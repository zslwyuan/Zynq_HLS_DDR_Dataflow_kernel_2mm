// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _buffer_func1_C7_HH_
#define _buffer_func1_C7_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct buffer_func1_C7 : public sc_module {
    // Port declarations 62
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > C_input_0_address0;
    sc_out< sc_logic > C_input_0_ce0;
    sc_in< sc_lv<32> > C_input_0_q0;
    sc_out< sc_lv<7> > C_input_1_address0;
    sc_out< sc_logic > C_input_1_ce0;
    sc_in< sc_lv<32> > C_input_1_q0;
    sc_out< sc_lv<6> > C_input_2_address0;
    sc_out< sc_logic > C_input_2_ce0;
    sc_in< sc_lv<32> > C_input_2_q0;
    sc_out< sc_lv<6> > C_input_3_address0;
    sc_out< sc_logic > C_input_3_ce0;
    sc_in< sc_lv<32> > C_input_3_q0;
    sc_out< sc_lv<6> > C_input_4_address0;
    sc_out< sc_logic > C_input_4_ce0;
    sc_in< sc_lv<32> > C_input_4_q0;
    sc_out< sc_lv<6> > C_input_5_address0;
    sc_out< sc_logic > C_input_5_ce0;
    sc_in< sc_lv<32> > C_input_5_q0;
    sc_out< sc_lv<6> > C_input_6_address0;
    sc_out< sc_logic > C_input_6_ce0;
    sc_in< sc_lv<32> > C_input_6_q0;
    sc_out< sc_lv<6> > C_input_7_address0;
    sc_out< sc_logic > C_input_7_ce0;
    sc_in< sc_lv<32> > C_input_7_q0;
    sc_out< sc_lv<7> > C_mid_0_address0;
    sc_out< sc_logic > C_mid_0_ce0;
    sc_out< sc_logic > C_mid_0_we0;
    sc_out< sc_lv<32> > C_mid_0_d0;
    sc_out< sc_lv<7> > C_mid_1_address0;
    sc_out< sc_logic > C_mid_1_ce0;
    sc_out< sc_logic > C_mid_1_we0;
    sc_out< sc_lv<32> > C_mid_1_d0;
    sc_out< sc_lv<6> > C_mid_2_address0;
    sc_out< sc_logic > C_mid_2_ce0;
    sc_out< sc_logic > C_mid_2_we0;
    sc_out< sc_lv<32> > C_mid_2_d0;
    sc_out< sc_lv<6> > C_mid_3_address0;
    sc_out< sc_logic > C_mid_3_ce0;
    sc_out< sc_logic > C_mid_3_we0;
    sc_out< sc_lv<32> > C_mid_3_d0;
    sc_out< sc_lv<6> > C_mid_4_address0;
    sc_out< sc_logic > C_mid_4_ce0;
    sc_out< sc_logic > C_mid_4_we0;
    sc_out< sc_lv<32> > C_mid_4_d0;
    sc_out< sc_lv<6> > C_mid_5_address0;
    sc_out< sc_logic > C_mid_5_ce0;
    sc_out< sc_logic > C_mid_5_we0;
    sc_out< sc_lv<32> > C_mid_5_d0;
    sc_out< sc_lv<6> > C_mid_6_address0;
    sc_out< sc_logic > C_mid_6_ce0;
    sc_out< sc_logic > C_mid_6_we0;
    sc_out< sc_lv<32> > C_mid_6_d0;
    sc_out< sc_lv<6> > C_mid_7_address0;
    sc_out< sc_logic > C_mid_7_ce0;
    sc_out< sc_logic > C_mid_7_we0;
    sc_out< sc_lv<32> > C_mid_7_d0;


    // Module declarations
    buffer_func1_C7(sc_module_name name);
    SC_HAS_PROCESS(buffer_func1_C7);

    ~buffer_func1_C7();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > j_4_fu_295_p2;
    sc_signal< sc_lv<5> > j_4_reg_376;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > tmp_cast_fu_301_p1;
    sc_signal< sc_lv<8> > tmp_cast_reg_381;
    sc_signal< sc_lv<1> > exitcond1_fu_289_p2;
    sc_signal< sc_lv<8> > tmp_28_fu_345_p2;
    sc_signal< sc_lv<8> > tmp_28_reg_386;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > tmp_70_cast_fu_350_p1;
    sc_signal< sc_lv<64> > tmp_70_cast_reg_391;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > C_input_0_load_reg_419;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > C_input_1_load_reg_424;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<6> > C_mid_2_addr_reg_459;
    sc_signal< sc_lv<6> > C_mid_3_addr_reg_464;
    sc_signal< sc_lv<6> > C_mid_4_addr_reg_469;
    sc_signal< sc_lv<6> > C_mid_5_addr_reg_474;
    sc_signal< sc_lv<6> > C_mid_6_addr_reg_479;
    sc_signal< sc_lv<6> > C_mid_7_addr_reg_484;
    sc_signal< sc_lv<5> > k_10_7_fu_367_p2;
    sc_signal< sc_lv<5> > k_10_7_reg_492;
    sc_signal< sc_lv<1> > exitcond_2_fu_361_p2;
    sc_signal< sc_lv<32> > C_input_2_load_reg_497;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<32> > C_input_3_load_reg_502;
    sc_signal< sc_lv<32> > C_input_4_load_reg_507;
    sc_signal< sc_lv<32> > C_input_5_load_reg_512;
    sc_signal< sc_lv<32> > C_input_6_load_reg_517;
    sc_signal< sc_lv<32> > C_input_7_load_reg_522;
    sc_signal< sc_lv<5> > j_reg_266;
    sc_signal< sc_lv<5> > k_reg_277;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<2> > newIndex_fu_305_p4;
    sc_signal< sc_lv<7> > tmp_s_fu_315_p3;
    sc_signal< sc_lv<5> > tmp_26_fu_327_p3;
    sc_signal< sc_lv<8> > p_shl_cast_fu_323_p1;
    sc_signal< sc_lv<8> > p_shl1_cast_fu_335_p1;
    sc_signal< sc_lv<8> > tmp_27_fu_339_p2;
    sc_signal< sc_lv<5> > k_10_s_fu_355_p2;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_state5;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<5> ap_const_lv5_18;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<5> ap_const_lv5_2;
    static const sc_lv<5> ap_const_lv5_12;
    static const sc_lv<5> ap_const_lv5_8;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_C_input_0_address0();
    void thread_C_input_0_ce0();
    void thread_C_input_1_address0();
    void thread_C_input_1_ce0();
    void thread_C_input_2_address0();
    void thread_C_input_2_ce0();
    void thread_C_input_3_address0();
    void thread_C_input_3_ce0();
    void thread_C_input_4_address0();
    void thread_C_input_4_ce0();
    void thread_C_input_5_address0();
    void thread_C_input_5_ce0();
    void thread_C_input_6_address0();
    void thread_C_input_6_ce0();
    void thread_C_input_7_address0();
    void thread_C_input_7_ce0();
    void thread_C_mid_0_address0();
    void thread_C_mid_0_ce0();
    void thread_C_mid_0_d0();
    void thread_C_mid_0_we0();
    void thread_C_mid_1_address0();
    void thread_C_mid_1_ce0();
    void thread_C_mid_1_d0();
    void thread_C_mid_1_we0();
    void thread_C_mid_2_address0();
    void thread_C_mid_2_ce0();
    void thread_C_mid_2_d0();
    void thread_C_mid_2_we0();
    void thread_C_mid_3_address0();
    void thread_C_mid_3_ce0();
    void thread_C_mid_3_d0();
    void thread_C_mid_3_we0();
    void thread_C_mid_4_address0();
    void thread_C_mid_4_ce0();
    void thread_C_mid_4_d0();
    void thread_C_mid_4_we0();
    void thread_C_mid_5_address0();
    void thread_C_mid_5_ce0();
    void thread_C_mid_5_d0();
    void thread_C_mid_5_we0();
    void thread_C_mid_6_address0();
    void thread_C_mid_6_ce0();
    void thread_C_mid_6_d0();
    void thread_C_mid_6_we0();
    void thread_C_mid_7_address0();
    void thread_C_mid_7_ce0();
    void thread_C_mid_7_d0();
    void thread_C_mid_7_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond1_fu_289_p2();
    void thread_exitcond_2_fu_361_p2();
    void thread_j_4_fu_295_p2();
    void thread_k_10_7_fu_367_p2();
    void thread_k_10_s_fu_355_p2();
    void thread_newIndex_fu_305_p4();
    void thread_p_shl1_cast_fu_335_p1();
    void thread_p_shl_cast_fu_323_p1();
    void thread_tmp_26_fu_327_p3();
    void thread_tmp_27_fu_339_p2();
    void thread_tmp_28_fu_345_p2();
    void thread_tmp_70_cast_fu_350_p1();
    void thread_tmp_cast_fu_301_p1();
    void thread_tmp_s_fu_315_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
