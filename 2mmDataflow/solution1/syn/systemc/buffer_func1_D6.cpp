// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "buffer_func1_D6.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic buffer_func1_D6::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic buffer_func1_D6::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> buffer_func1_D6::ap_ST_fsm_state1 = "1";
const sc_lv<5> buffer_func1_D6::ap_ST_fsm_state2 = "10";
const sc_lv<5> buffer_func1_D6::ap_ST_fsm_state3 = "100";
const sc_lv<5> buffer_func1_D6::ap_ST_fsm_state4 = "1000";
const sc_lv<5> buffer_func1_D6::ap_ST_fsm_state5 = "10000";
const sc_lv<32> buffer_func1_D6::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> buffer_func1_D6::ap_const_lv32_1 = "1";
const sc_lv<1> buffer_func1_D6::ap_const_lv1_0 = "0";
const sc_lv<32> buffer_func1_D6::ap_const_lv32_2 = "10";
const sc_lv<32> buffer_func1_D6::ap_const_lv32_3 = "11";
const sc_lv<5> buffer_func1_D6::ap_const_lv5_0 = "00000";
const sc_lv<1> buffer_func1_D6::ap_const_lv1_1 = "1";
const sc_lv<32> buffer_func1_D6::ap_const_lv32_4 = "100";
const sc_lv<5> buffer_func1_D6::ap_const_lv5_10 = "10000";
const sc_lv<5> buffer_func1_D6::ap_const_lv5_1 = "1";
const sc_lv<3> buffer_func1_D6::ap_const_lv3_0 = "000";
const sc_lv<5> buffer_func1_D6::ap_const_lv5_18 = "11000";
const bool buffer_func1_D6::ap_const_boolean_1 = true;

buffer_func1_D6::buffer_func1_D6(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_D_input_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_66_cast_fu_133_p1 );

    SC_METHOD(thread_D_input_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_D_mid_address0);
    sensitive << ( tmp_66_cast_reg_159 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_D_mid_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_D_mid_d0);
    sensitive << ( D_input_load_reg_169 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_D_mid_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_74_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_74_p2 );

    SC_METHOD(thread_exitcond1_fu_74_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_52 );

    SC_METHOD(thread_exitcond_fu_112_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_reg_63 );

    SC_METHOD(thread_i_3_fu_80_p2);
    sensitive << ( i_reg_52 );

    SC_METHOD(thread_j_3_fu_118_p2);
    sensitive << ( j_reg_63 );

    SC_METHOD(thread_p_shl1_cast_fu_102_p1);
    sensitive << ( tmp_s_fu_94_p3 );

    SC_METHOD(thread_tmp_24_fu_106_p2);
    sensitive << ( tmp_fu_86_p3 );
    sensitive << ( p_shl1_cast_fu_102_p1 );

    SC_METHOD(thread_tmp_25_fu_128_p2);
    sensitive << ( tmp_24_reg_146 );
    sensitive << ( tmp_cast_fu_124_p1 );

    SC_METHOD(thread_tmp_66_cast_fu_133_p1);
    sensitive << ( tmp_25_fu_128_p2 );

    SC_METHOD(thread_tmp_cast_fu_124_p1);
    sensitive << ( j_reg_63 );

    SC_METHOD(thread_tmp_fu_86_p3);
    sensitive << ( i_reg_52 );

    SC_METHOD(thread_tmp_s_fu_94_p3);
    sensitive << ( i_reg_52 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_74_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_112_p2 );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "buffer_func1_D6_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, D_input_address0, "(port)D_input_address0");
    sc_trace(mVcdFile, D_input_ce0, "(port)D_input_ce0");
    sc_trace(mVcdFile, D_input_q0, "(port)D_input_q0");
    sc_trace(mVcdFile, D_mid_address0, "(port)D_mid_address0");
    sc_trace(mVcdFile, D_mid_ce0, "(port)D_mid_ce0");
    sc_trace(mVcdFile, D_mid_we0, "(port)D_mid_we0");
    sc_trace(mVcdFile, D_mid_d0, "(port)D_mid_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_3_fu_80_p2, "i_3_fu_80_p2");
    sc_trace(mVcdFile, i_3_reg_141, "i_3_reg_141");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_24_fu_106_p2, "tmp_24_fu_106_p2");
    sc_trace(mVcdFile, tmp_24_reg_146, "tmp_24_reg_146");
    sc_trace(mVcdFile, exitcond1_fu_74_p2, "exitcond1_fu_74_p2");
    sc_trace(mVcdFile, j_3_fu_118_p2, "j_3_fu_118_p2");
    sc_trace(mVcdFile, j_3_reg_154, "j_3_reg_154");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_66_cast_fu_133_p1, "tmp_66_cast_fu_133_p1");
    sc_trace(mVcdFile, tmp_66_cast_reg_159, "tmp_66_cast_reg_159");
    sc_trace(mVcdFile, exitcond_fu_112_p2, "exitcond_fu_112_p2");
    sc_trace(mVcdFile, D_input_load_reg_169, "D_input_load_reg_169");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_reg_52, "i_reg_52");
    sc_trace(mVcdFile, j_reg_63, "j_reg_63");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_s_fu_94_p3, "tmp_s_fu_94_p3");
    sc_trace(mVcdFile, tmp_fu_86_p3, "tmp_fu_86_p3");
    sc_trace(mVcdFile, p_shl1_cast_fu_102_p1, "p_shl1_cast_fu_102_p1");
    sc_trace(mVcdFile, tmp_cast_fu_124_p1, "tmp_cast_fu_124_p1");
    sc_trace(mVcdFile, tmp_25_fu_128_p2, "tmp_25_fu_128_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

buffer_func1_D6::~buffer_func1_D6() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void buffer_func1_D6::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_112_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        i_reg_52 = i_3_reg_141.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_52 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_74_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        j_reg_63 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        j_reg_63 = j_3_reg_154.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        D_input_load_reg_169 = D_input_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_3_reg_141 = i_3_fu_80_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_3_reg_154 = j_3_fu_118_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_74_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tmp_24_reg_146 = tmp_24_fu_106_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_112_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        tmp_66_cast_reg_159 = tmp_66_cast_fu_133_p1.read();
    }
}

void buffer_func1_D6::thread_D_input_address0() {
    D_input_address0 =  (sc_lv<9>) (tmp_66_cast_fu_133_p1.read());
}

void buffer_func1_D6::thread_D_input_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        D_input_ce0 = ap_const_logic_1;
    } else {
        D_input_ce0 = ap_const_logic_0;
    }
}

void buffer_func1_D6::thread_D_mid_address0() {
    D_mid_address0 =  (sc_lv<9>) (tmp_66_cast_reg_159.read());
}

void buffer_func1_D6::thread_D_mid_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        D_mid_ce0 = ap_const_logic_1;
    } else {
        D_mid_ce0 = ap_const_logic_0;
    }
}

void buffer_func1_D6::thread_D_mid_d0() {
    D_mid_d0 = D_input_load_reg_169.read();
}

void buffer_func1_D6::thread_D_mid_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        D_mid_we0 = ap_const_logic_1;
    } else {
        D_mid_we0 = ap_const_logic_0;
    }
}

void buffer_func1_D6::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void buffer_func1_D6::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void buffer_func1_D6::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void buffer_func1_D6::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void buffer_func1_D6::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void buffer_func1_D6::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(exitcond1_fu_74_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void buffer_func1_D6::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void buffer_func1_D6::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond1_fu_74_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void buffer_func1_D6::thread_exitcond1_fu_74_p2() {
    exitcond1_fu_74_p2 = (!i_reg_52.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_52.read() == ap_const_lv5_10);
}

void buffer_func1_D6::thread_exitcond_fu_112_p2() {
    exitcond_fu_112_p2 = (!j_reg_63.read().is_01() || !ap_const_lv5_18.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_63.read() == ap_const_lv5_18);
}

void buffer_func1_D6::thread_i_3_fu_80_p2() {
    i_3_fu_80_p2 = (!i_reg_52.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_52.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void buffer_func1_D6::thread_j_3_fu_118_p2() {
    j_3_fu_118_p2 = (!j_reg_63.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(j_reg_63.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void buffer_func1_D6::thread_p_shl1_cast_fu_102_p1() {
    p_shl1_cast_fu_102_p1 = esl_zext<10,8>(tmp_s_fu_94_p3.read());
}

void buffer_func1_D6::thread_tmp_24_fu_106_p2() {
    tmp_24_fu_106_p2 = (!tmp_fu_86_p3.read().is_01() || !p_shl1_cast_fu_102_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_fu_86_p3.read()) - sc_biguint<10>(p_shl1_cast_fu_102_p1.read()));
}

void buffer_func1_D6::thread_tmp_25_fu_128_p2() {
    tmp_25_fu_128_p2 = (!tmp_24_reg_146.read().is_01() || !tmp_cast_fu_124_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_24_reg_146.read()) + sc_biguint<10>(tmp_cast_fu_124_p1.read()));
}

void buffer_func1_D6::thread_tmp_66_cast_fu_133_p1() {
    tmp_66_cast_fu_133_p1 = esl_sext<64,10>(tmp_25_fu_128_p2.read());
}

void buffer_func1_D6::thread_tmp_cast_fu_124_p1() {
    tmp_cast_fu_124_p1 = esl_zext<10,5>(j_reg_63.read());
}

void buffer_func1_D6::thread_tmp_fu_86_p3() {
    tmp_fu_86_p3 = esl_concat<5,5>(i_reg_52.read(), ap_const_lv5_0);
}

void buffer_func1_D6::thread_tmp_s_fu_94_p3() {
    tmp_s_fu_94_p3 = esl_concat<5,3>(i_reg_52.read(), ap_const_lv3_0);
}

void buffer_func1_D6::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond1_fu_74_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_112_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

