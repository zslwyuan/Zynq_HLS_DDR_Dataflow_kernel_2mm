// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "writeData.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic writeData::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic writeData::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> writeData::ap_ST_fsm_state1 = "1";
const sc_lv<3> writeData::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> writeData::ap_ST_fsm_state11 = "100";
const sc_lv<32> writeData::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool writeData::ap_const_boolean_1 = true;
const sc_lv<1> writeData::ap_const_lv1_0 = "0";
const sc_lv<3> writeData::ap_const_lv3_0 = "000";
const sc_lv<2> writeData::ap_const_lv2_0 = "00";
const sc_lv<4> writeData::ap_const_lv4_0 = "0000";
const bool writeData::ap_const_boolean_0 = false;
const sc_lv<32> writeData::ap_const_lv32_1 = "1";
const sc_lv<1> writeData::ap_const_lv1_1 = "1";
const sc_lv<9> writeData::ap_const_lv9_0 = "000000000";
const sc_lv<5> writeData::ap_const_lv5_0 = "00000";
const sc_lv<4> writeData::ap_const_lv4_F = "1111";
const sc_lv<32> writeData::ap_const_lv32_2 = "10";
const sc_lv<32> writeData::ap_const_lv32_1F = "11111";
const sc_lv<9> writeData::ap_const_lv9_180 = "110000000";
const sc_lv<9> writeData::ap_const_lv9_1 = "1";
const sc_lv<5> writeData::ap_const_lv5_1 = "1";
const sc_lv<5> writeData::ap_const_lv5_18 = "11000";

writeData::writeData(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_D_output_AXI_blk_n_AW);
    sensitive << ( m_axi_D_output_AXI_AWREADY );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_i_reg_273_pp0_iter1_reg );

    SC_METHOD(thread_D_output_AXI_blk_n_B);
    sensitive << ( m_axi_D_output_AXI_BVALID );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( exitcond_flatten_i_reg_273_pp0_iter7_reg );

    SC_METHOD(thread_D_output_AXI_blk_n_W);
    sensitive << ( m_axi_D_output_AXI_WREADY );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( exitcond_flatten_i_reg_273_pp0_iter2_reg );

    SC_METHOD(thread_D_output_AXI_offset_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( D_output_AXI_offset_empty_n );

    SC_METHOD(thread_D_output_AXI_offset_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( D_output_AXI_offset_empty_n );

    SC_METHOD(thread_D_output_address0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_5_cast_i_fu_248_p1 );

    SC_METHOD(thread_D_output_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( m_axi_D_output_AXI_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( exitcond_flatten_i_reg_273_pp0_iter7_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( m_axi_D_output_AXI_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( exitcond_flatten_i_reg_273_pp0_iter7_reg );
    sensitive << ( ap_block_state4_io );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( m_axi_D_output_AXI_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( exitcond_flatten_i_reg_273_pp0_iter7_reg );
    sensitive << ( ap_block_state4_io );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( D_output_AXI_offset_empty_n );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter8);
    sensitive << ( m_axi_D_output_AXI_BVALID );
    sensitive << ( exitcond_flatten_i_reg_273_pp0_iter7_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( exitcond_flatten_i_reg_273_pp0_iter1_reg );
    sensitive << ( ap_sig_ioackin_m_axi_D_output_AXI_AWREADY );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5_io);
    sensitive << ( exitcond_flatten_i_reg_273_pp0_iter2_reg );
    sensitive << ( ap_sig_ioackin_m_axi_D_output_AXI_WREADY );

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter6);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter7);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond_flatten_i_fu_156_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );

    SC_METHOD(thread_ap_phi_mux_i_i_phi_fu_124_p4);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_i_reg_273 );
    sensitive << ( i_i_reg_120 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_mid2_v_i_reg_287 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_D_output_AXI_AWREADY);
    sensitive << ( m_axi_D_output_AXI_AWREADY );
    sensitive << ( ap_reg_ioackin_m_axi_D_output_AXI_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_D_output_AXI_WREADY);
    sensitive << ( m_axi_D_output_AXI_WREADY );
    sensitive << ( ap_reg_ioackin_m_axi_D_output_AXI_WREADY );

    SC_METHOD(thread_exitcond9_i_fu_174_p2);
    sensitive << ( j_i_reg_131 );
    sensitive << ( exitcond_flatten_i_fu_156_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_exitcond_flatten_i_fu_156_p2);
    sensitive << ( indvar_flatten_i_reg_109 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_i_1_i_fu_168_p2);
    sensitive << ( ap_phi_mux_i_i_phi_fu_124_p4 );

    SC_METHOD(thread_indvar_flatten_next_s_fu_162_p2);
    sensitive << ( indvar_flatten_i_reg_109 );

    SC_METHOD(thread_j_fu_226_p2);
    sensitive << ( j_mid2_i_fu_180_p3 );

    SC_METHOD(thread_j_mid2_i_fu_180_p3);
    sensitive << ( j_i_reg_131 );
    sensitive << ( exitcond9_i_fu_174_p2 );

    SC_METHOD(thread_m_axi_D_output_AXI_ARADDR);

    SC_METHOD(thread_m_axi_D_output_AXI_ARBURST);

    SC_METHOD(thread_m_axi_D_output_AXI_ARCACHE);

    SC_METHOD(thread_m_axi_D_output_AXI_ARID);

    SC_METHOD(thread_m_axi_D_output_AXI_ARLEN);

    SC_METHOD(thread_m_axi_D_output_AXI_ARLOCK);

    SC_METHOD(thread_m_axi_D_output_AXI_ARPROT);

    SC_METHOD(thread_m_axi_D_output_AXI_ARQOS);

    SC_METHOD(thread_m_axi_D_output_AXI_ARREGION);

    SC_METHOD(thread_m_axi_D_output_AXI_ARSIZE);

    SC_METHOD(thread_m_axi_D_output_AXI_ARUSER);

    SC_METHOD(thread_m_axi_D_output_AXI_ARVALID);

    SC_METHOD(thread_m_axi_D_output_AXI_AWADDR);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_flatten_i_reg_273_pp0_iter1_reg );
    sensitive << ( sum_cast_i_fu_258_p1 );
    sensitive << ( ap_reg_ioackin_m_axi_D_output_AXI_AWREADY );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_axi_D_output_AXI_AWBURST);

    SC_METHOD(thread_m_axi_D_output_AXI_AWCACHE);

    SC_METHOD(thread_m_axi_D_output_AXI_AWID);

    SC_METHOD(thread_m_axi_D_output_AXI_AWLEN);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_flatten_i_reg_273_pp0_iter1_reg );
    sensitive << ( ap_reg_ioackin_m_axi_D_output_AXI_AWREADY );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_axi_D_output_AXI_AWLOCK);

    SC_METHOD(thread_m_axi_D_output_AXI_AWPROT);

    SC_METHOD(thread_m_axi_D_output_AXI_AWQOS);

    SC_METHOD(thread_m_axi_D_output_AXI_AWREGION);

    SC_METHOD(thread_m_axi_D_output_AXI_AWSIZE);

    SC_METHOD(thread_m_axi_D_output_AXI_AWUSER);

    SC_METHOD(thread_m_axi_D_output_AXI_AWVALID);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_flatten_i_reg_273_pp0_iter1_reg );
    sensitive << ( ap_reg_ioackin_m_axi_D_output_AXI_AWREADY );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_axi_D_output_AXI_BREADY);
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( exitcond_flatten_i_reg_273_pp0_iter7_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axi_D_output_AXI_RREADY);

    SC_METHOD(thread_m_axi_D_output_AXI_WDATA);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( exitcond_flatten_i_reg_273_pp0_iter2_reg );
    sensitive << ( D_output_load_reg_318 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( ap_reg_ioackin_m_axi_D_output_AXI_WREADY );

    SC_METHOD(thread_m_axi_D_output_AXI_WID);

    SC_METHOD(thread_m_axi_D_output_AXI_WLAST);

    SC_METHOD(thread_m_axi_D_output_AXI_WSTRB);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( exitcond_flatten_i_reg_273_pp0_iter2_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( ap_reg_ioackin_m_axi_D_output_AXI_WREADY );

    SC_METHOD(thread_m_axi_D_output_AXI_WUSER);

    SC_METHOD(thread_m_axi_D_output_AXI_WVALID);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( exitcond_flatten_i_reg_273_pp0_iter2_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( ap_reg_ioackin_m_axi_D_output_AXI_WREADY );

    SC_METHOD(thread_p_shl2_cast_i_fu_216_p1);
    sensitive << ( tmp_3_i_fu_208_p3 );

    SC_METHOD(thread_p_shl_cast_i_fu_204_p1);
    sensitive << ( tmp_i_fu_196_p3 );

    SC_METHOD(thread_sext_cast_i_fu_152_p1);
    sensitive << ( tmp_fu_142_p4 );

    SC_METHOD(thread_sum_cast_i_fu_258_p1);
    sensitive << ( sum_i_reg_302 );

    SC_METHOD(thread_sum_i_fu_253_p2);
    sensitive << ( sext_cast_i_reg_268 );
    sensitive << ( tmp_5_cast10_i_fu_244_p1 );

    SC_METHOD(thread_tmp_2_cast_i_fu_235_p1);
    sensitive << ( j_mid2_i_reg_282 );

    SC_METHOD(thread_tmp_3_i_fu_208_p3);
    sensitive << ( tmp_mid2_v_i_fu_188_p3 );

    SC_METHOD(thread_tmp_4_cast_i_fu_232_p1);
    sensitive << ( tmp_4_i_reg_292 );

    SC_METHOD(thread_tmp_4_i_fu_220_p2);
    sensitive << ( p_shl_cast_i_fu_204_p1 );
    sensitive << ( p_shl2_cast_i_fu_216_p1 );

    SC_METHOD(thread_tmp_5_cast10_i_fu_244_p1);
    sensitive << ( tmp_5_i_fu_238_p2 );

    SC_METHOD(thread_tmp_5_cast_i_fu_248_p1);
    sensitive << ( tmp_5_i_fu_238_p2 );

    SC_METHOD(thread_tmp_5_i_fu_238_p2);
    sensitive << ( tmp_4_cast_i_fu_232_p1 );
    sensitive << ( tmp_2_cast_i_fu_235_p1 );

    SC_METHOD(thread_tmp_fu_142_p4);
    sensitive << ( D_output_AXI_offset_dout );

    SC_METHOD(thread_tmp_i_fu_196_p3);
    sensitive << ( tmp_mid2_v_i_fu_188_p3 );

    SC_METHOD(thread_tmp_mid2_v_i_fu_188_p3);
    sensitive << ( ap_phi_mux_i_i_phi_fu_124_p4 );
    sensitive << ( exitcond9_i_fu_174_p2 );
    sensitive << ( i_1_i_fu_168_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( D_output_AXI_offset_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( exitcond_flatten_i_fu_156_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter7 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter8 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter7 = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_D_output_AXI_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_D_output_AXI_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "writeData_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_D_output_AXI_AWVALID, "(port)m_axi_D_output_AXI_AWVALID");
    sc_trace(mVcdFile, m_axi_D_output_AXI_AWREADY, "(port)m_axi_D_output_AXI_AWREADY");
    sc_trace(mVcdFile, m_axi_D_output_AXI_AWADDR, "(port)m_axi_D_output_AXI_AWADDR");
    sc_trace(mVcdFile, m_axi_D_output_AXI_AWID, "(port)m_axi_D_output_AXI_AWID");
    sc_trace(mVcdFile, m_axi_D_output_AXI_AWLEN, "(port)m_axi_D_output_AXI_AWLEN");
    sc_trace(mVcdFile, m_axi_D_output_AXI_AWSIZE, "(port)m_axi_D_output_AXI_AWSIZE");
    sc_trace(mVcdFile, m_axi_D_output_AXI_AWBURST, "(port)m_axi_D_output_AXI_AWBURST");
    sc_trace(mVcdFile, m_axi_D_output_AXI_AWLOCK, "(port)m_axi_D_output_AXI_AWLOCK");
    sc_trace(mVcdFile, m_axi_D_output_AXI_AWCACHE, "(port)m_axi_D_output_AXI_AWCACHE");
    sc_trace(mVcdFile, m_axi_D_output_AXI_AWPROT, "(port)m_axi_D_output_AXI_AWPROT");
    sc_trace(mVcdFile, m_axi_D_output_AXI_AWQOS, "(port)m_axi_D_output_AXI_AWQOS");
    sc_trace(mVcdFile, m_axi_D_output_AXI_AWREGION, "(port)m_axi_D_output_AXI_AWREGION");
    sc_trace(mVcdFile, m_axi_D_output_AXI_AWUSER, "(port)m_axi_D_output_AXI_AWUSER");
    sc_trace(mVcdFile, m_axi_D_output_AXI_WVALID, "(port)m_axi_D_output_AXI_WVALID");
    sc_trace(mVcdFile, m_axi_D_output_AXI_WREADY, "(port)m_axi_D_output_AXI_WREADY");
    sc_trace(mVcdFile, m_axi_D_output_AXI_WDATA, "(port)m_axi_D_output_AXI_WDATA");
    sc_trace(mVcdFile, m_axi_D_output_AXI_WSTRB, "(port)m_axi_D_output_AXI_WSTRB");
    sc_trace(mVcdFile, m_axi_D_output_AXI_WLAST, "(port)m_axi_D_output_AXI_WLAST");
    sc_trace(mVcdFile, m_axi_D_output_AXI_WID, "(port)m_axi_D_output_AXI_WID");
    sc_trace(mVcdFile, m_axi_D_output_AXI_WUSER, "(port)m_axi_D_output_AXI_WUSER");
    sc_trace(mVcdFile, m_axi_D_output_AXI_ARVALID, "(port)m_axi_D_output_AXI_ARVALID");
    sc_trace(mVcdFile, m_axi_D_output_AXI_ARREADY, "(port)m_axi_D_output_AXI_ARREADY");
    sc_trace(mVcdFile, m_axi_D_output_AXI_ARADDR, "(port)m_axi_D_output_AXI_ARADDR");
    sc_trace(mVcdFile, m_axi_D_output_AXI_ARID, "(port)m_axi_D_output_AXI_ARID");
    sc_trace(mVcdFile, m_axi_D_output_AXI_ARLEN, "(port)m_axi_D_output_AXI_ARLEN");
    sc_trace(mVcdFile, m_axi_D_output_AXI_ARSIZE, "(port)m_axi_D_output_AXI_ARSIZE");
    sc_trace(mVcdFile, m_axi_D_output_AXI_ARBURST, "(port)m_axi_D_output_AXI_ARBURST");
    sc_trace(mVcdFile, m_axi_D_output_AXI_ARLOCK, "(port)m_axi_D_output_AXI_ARLOCK");
    sc_trace(mVcdFile, m_axi_D_output_AXI_ARCACHE, "(port)m_axi_D_output_AXI_ARCACHE");
    sc_trace(mVcdFile, m_axi_D_output_AXI_ARPROT, "(port)m_axi_D_output_AXI_ARPROT");
    sc_trace(mVcdFile, m_axi_D_output_AXI_ARQOS, "(port)m_axi_D_output_AXI_ARQOS");
    sc_trace(mVcdFile, m_axi_D_output_AXI_ARREGION, "(port)m_axi_D_output_AXI_ARREGION");
    sc_trace(mVcdFile, m_axi_D_output_AXI_ARUSER, "(port)m_axi_D_output_AXI_ARUSER");
    sc_trace(mVcdFile, m_axi_D_output_AXI_RVALID, "(port)m_axi_D_output_AXI_RVALID");
    sc_trace(mVcdFile, m_axi_D_output_AXI_RREADY, "(port)m_axi_D_output_AXI_RREADY");
    sc_trace(mVcdFile, m_axi_D_output_AXI_RDATA, "(port)m_axi_D_output_AXI_RDATA");
    sc_trace(mVcdFile, m_axi_D_output_AXI_RLAST, "(port)m_axi_D_output_AXI_RLAST");
    sc_trace(mVcdFile, m_axi_D_output_AXI_RID, "(port)m_axi_D_output_AXI_RID");
    sc_trace(mVcdFile, m_axi_D_output_AXI_RUSER, "(port)m_axi_D_output_AXI_RUSER");
    sc_trace(mVcdFile, m_axi_D_output_AXI_RRESP, "(port)m_axi_D_output_AXI_RRESP");
    sc_trace(mVcdFile, m_axi_D_output_AXI_BVALID, "(port)m_axi_D_output_AXI_BVALID");
    sc_trace(mVcdFile, m_axi_D_output_AXI_BREADY, "(port)m_axi_D_output_AXI_BREADY");
    sc_trace(mVcdFile, m_axi_D_output_AXI_BRESP, "(port)m_axi_D_output_AXI_BRESP");
    sc_trace(mVcdFile, m_axi_D_output_AXI_BID, "(port)m_axi_D_output_AXI_BID");
    sc_trace(mVcdFile, m_axi_D_output_AXI_BUSER, "(port)m_axi_D_output_AXI_BUSER");
    sc_trace(mVcdFile, D_output_AXI_offset_dout, "(port)D_output_AXI_offset_dout");
    sc_trace(mVcdFile, D_output_AXI_offset_empty_n, "(port)D_output_AXI_offset_empty_n");
    sc_trace(mVcdFile, D_output_AXI_offset_read, "(port)D_output_AXI_offset_read");
    sc_trace(mVcdFile, D_output_address0, "(port)D_output_address0");
    sc_trace(mVcdFile, D_output_ce0, "(port)D_output_ce0");
    sc_trace(mVcdFile, D_output_q0, "(port)D_output_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, D_output_AXI_blk_n_AW, "D_output_AXI_blk_n_AW");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_flatten_i_reg_273, "exitcond_flatten_i_reg_273");
    sc_trace(mVcdFile, exitcond_flatten_i_reg_273_pp0_iter1_reg, "exitcond_flatten_i_reg_273_pp0_iter1_reg");
    sc_trace(mVcdFile, D_output_AXI_blk_n_W, "D_output_AXI_blk_n_W");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, exitcond_flatten_i_reg_273_pp0_iter2_reg, "exitcond_flatten_i_reg_273_pp0_iter2_reg");
    sc_trace(mVcdFile, D_output_AXI_blk_n_B, "D_output_AXI_blk_n_B");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter8, "ap_enable_reg_pp0_iter8");
    sc_trace(mVcdFile, exitcond_flatten_i_reg_273_pp0_iter7_reg, "exitcond_flatten_i_reg_273_pp0_iter7_reg");
    sc_trace(mVcdFile, D_output_AXI_offset_blk_n, "D_output_AXI_offset_blk_n");
    sc_trace(mVcdFile, indvar_flatten_i_reg_109, "indvar_flatten_i_reg_109");
    sc_trace(mVcdFile, i_i_reg_120, "i_i_reg_120");
    sc_trace(mVcdFile, j_i_reg_131, "j_i_reg_131");
    sc_trace(mVcdFile, sext_cast_i_fu_152_p1, "sext_cast_i_fu_152_p1");
    sc_trace(mVcdFile, sext_cast_i_reg_268, "sext_cast_i_reg_268");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, exitcond_flatten_i_fu_156_p2, "exitcond_flatten_i_fu_156_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_D_output_AXI_AWREADY, "ap_sig_ioackin_m_axi_D_output_AXI_AWREADY");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter3, "ap_block_state5_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_D_output_AXI_WREADY, "ap_sig_ioackin_m_axi_D_output_AXI_WREADY");
    sc_trace(mVcdFile, ap_block_state5_io, "ap_block_state5_io");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter4, "ap_block_state6_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter5, "ap_block_state7_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter6, "ap_block_state8_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter7, "ap_block_state9_pp0_stage0_iter7");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter8, "ap_block_state10_pp0_stage0_iter8");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, exitcond_flatten_i_reg_273_pp0_iter3_reg, "exitcond_flatten_i_reg_273_pp0_iter3_reg");
    sc_trace(mVcdFile, exitcond_flatten_i_reg_273_pp0_iter4_reg, "exitcond_flatten_i_reg_273_pp0_iter4_reg");
    sc_trace(mVcdFile, exitcond_flatten_i_reg_273_pp0_iter5_reg, "exitcond_flatten_i_reg_273_pp0_iter5_reg");
    sc_trace(mVcdFile, exitcond_flatten_i_reg_273_pp0_iter6_reg, "exitcond_flatten_i_reg_273_pp0_iter6_reg");
    sc_trace(mVcdFile, indvar_flatten_next_s_fu_162_p2, "indvar_flatten_next_s_fu_162_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, j_mid2_i_fu_180_p3, "j_mid2_i_fu_180_p3");
    sc_trace(mVcdFile, j_mid2_i_reg_282, "j_mid2_i_reg_282");
    sc_trace(mVcdFile, tmp_mid2_v_i_fu_188_p3, "tmp_mid2_v_i_fu_188_p3");
    sc_trace(mVcdFile, tmp_mid2_v_i_reg_287, "tmp_mid2_v_i_reg_287");
    sc_trace(mVcdFile, tmp_4_i_fu_220_p2, "tmp_4_i_fu_220_p2");
    sc_trace(mVcdFile, tmp_4_i_reg_292, "tmp_4_i_reg_292");
    sc_trace(mVcdFile, j_fu_226_p2, "j_fu_226_p2");
    sc_trace(mVcdFile, sum_i_fu_253_p2, "sum_i_fu_253_p2");
    sc_trace(mVcdFile, sum_i_reg_302, "sum_i_reg_302");
    sc_trace(mVcdFile, D_output_load_reg_318, "D_output_load_reg_318");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter7, "ap_enable_reg_pp0_iter7");
    sc_trace(mVcdFile, ap_phi_mux_i_i_phi_fu_124_p4, "ap_phi_mux_i_i_phi_fu_124_p4");
    sc_trace(mVcdFile, tmp_5_cast_i_fu_248_p1, "tmp_5_cast_i_fu_248_p1");
    sc_trace(mVcdFile, sum_cast_i_fu_258_p1, "sum_cast_i_fu_258_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_D_output_AXI_AWREADY, "ap_reg_ioackin_m_axi_D_output_AXI_AWREADY");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_D_output_AXI_WREADY, "ap_reg_ioackin_m_axi_D_output_AXI_WREADY");
    sc_trace(mVcdFile, tmp_fu_142_p4, "tmp_fu_142_p4");
    sc_trace(mVcdFile, exitcond9_i_fu_174_p2, "exitcond9_i_fu_174_p2");
    sc_trace(mVcdFile, i_1_i_fu_168_p2, "i_1_i_fu_168_p2");
    sc_trace(mVcdFile, tmp_i_fu_196_p3, "tmp_i_fu_196_p3");
    sc_trace(mVcdFile, tmp_3_i_fu_208_p3, "tmp_3_i_fu_208_p3");
    sc_trace(mVcdFile, p_shl_cast_i_fu_204_p1, "p_shl_cast_i_fu_204_p1");
    sc_trace(mVcdFile, p_shl2_cast_i_fu_216_p1, "p_shl2_cast_i_fu_216_p1");
    sc_trace(mVcdFile, tmp_4_cast_i_fu_232_p1, "tmp_4_cast_i_fu_232_p1");
    sc_trace(mVcdFile, tmp_2_cast_i_fu_235_p1, "tmp_2_cast_i_fu_235_p1");
    sc_trace(mVcdFile, tmp_5_i_fu_238_p2, "tmp_5_i_fu_238_p2");
    sc_trace(mVcdFile, tmp_5_cast10_i_fu_244_p1, "tmp_5_cast10_i_fu_244_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

writeData::~writeData() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void writeData::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((!(esl_seteq<1,1,1>(ap_const_logic_0, D_output_AXI_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter7 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter7 = ap_enable_reg_pp0_iter6.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter8 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter8 = ap_enable_reg_pp0_iter7.read();
        } else if ((!(esl_seteq<1,1,1>(ap_const_logic_0, D_output_AXI_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter8 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_D_output_AXI_AWREADY = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_reg_273_pp0_iter1_reg.read()))) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_m_axi_D_output_AXI_AWREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axi_D_output_AXI_AWREADY.read()) && 
                        esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
                ap_reg_ioackin_m_axi_D_output_AXI_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_D_output_AXI_WREADY = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_reg_273_pp0_iter2_reg.read()))) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_m_axi_D_output_AXI_WREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && 
                        esl_seteq<1,1,1>(ap_const_logic_1, m_axi_D_output_AXI_WREADY.read()))) {
                ap_reg_ioackin_m_axi_D_output_AXI_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_reg_273.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        i_i_reg_120 = tmp_mid2_v_i_reg_287.read();
    } else if ((!(esl_seteq<1,1,1>(ap_const_logic_0, D_output_AXI_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        i_i_reg_120 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_fu_156_p2.read()))) {
        indvar_flatten_i_reg_109 = indvar_flatten_next_s_fu_162_p2.read();
    } else if ((!(esl_seteq<1,1,1>(ap_const_logic_0, D_output_AXI_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        indvar_flatten_i_reg_109 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_fu_156_p2.read()))) {
        j_i_reg_131 = j_fu_226_p2.read();
    } else if ((!(esl_seteq<1,1,1>(ap_const_logic_0, D_output_AXI_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        j_i_reg_131 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_reg_273_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        D_output_load_reg_318 = D_output_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten_i_reg_273 = exitcond_flatten_i_fu_156_p2.read();
        exitcond_flatten_i_reg_273_pp0_iter1_reg = exitcond_flatten_i_reg_273.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        exitcond_flatten_i_reg_273_pp0_iter2_reg = exitcond_flatten_i_reg_273_pp0_iter1_reg.read();
        exitcond_flatten_i_reg_273_pp0_iter3_reg = exitcond_flatten_i_reg_273_pp0_iter2_reg.read();
        exitcond_flatten_i_reg_273_pp0_iter4_reg = exitcond_flatten_i_reg_273_pp0_iter3_reg.read();
        exitcond_flatten_i_reg_273_pp0_iter5_reg = exitcond_flatten_i_reg_273_pp0_iter4_reg.read();
        exitcond_flatten_i_reg_273_pp0_iter6_reg = exitcond_flatten_i_reg_273_pp0_iter5_reg.read();
        exitcond_flatten_i_reg_273_pp0_iter7_reg = exitcond_flatten_i_reg_273_pp0_iter6_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_fu_156_p2.read()))) {
        j_mid2_i_reg_282 = j_mid2_i_fu_180_p3.read();
        tmp_4_i_reg_292 = tmp_4_i_fu_220_p2.read();
    }
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, D_output_AXI_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        sext_cast_i_reg_268 = sext_cast_i_fu_152_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_reg_273.read()))) {
        sum_i_reg_302 = sum_i_fu_253_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_fu_156_p2.read()))) {
        tmp_mid2_v_i_reg_287 = tmp_mid2_v_i_fu_188_p3.read();
    }
}

void writeData::thread_D_output_AXI_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_reg_273_pp0_iter1_reg.read()))) {
        D_output_AXI_blk_n_AW = m_axi_D_output_AXI_AWREADY.read();
    } else {
        D_output_AXI_blk_n_AW = ap_const_logic_1;
    }
}

void writeData::thread_D_output_AXI_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter8.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_reg_273_pp0_iter7_reg.read()))) {
        D_output_AXI_blk_n_B = m_axi_D_output_AXI_BVALID.read();
    } else {
        D_output_AXI_blk_n_B = ap_const_logic_1;
    }
}

void writeData::thread_D_output_AXI_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_reg_273_pp0_iter2_reg.read()))) {
        D_output_AXI_blk_n_W = m_axi_D_output_AXI_WREADY.read();
    } else {
        D_output_AXI_blk_n_W = ap_const_logic_1;
    }
}

void writeData::thread_D_output_AXI_offset_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        D_output_AXI_offset_blk_n = D_output_AXI_offset_empty_n.read();
    } else {
        D_output_AXI_offset_blk_n = ap_const_logic_1;
    }
}

void writeData::thread_D_output_AXI_offset_read() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, D_output_AXI_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        D_output_AXI_offset_read = ap_const_logic_1;
    } else {
        D_output_AXI_offset_read = ap_const_logic_0;
    }
}

void writeData::thread_D_output_address0() {
    D_output_address0 =  (sc_lv<9>) (tmp_5_cast_i_fu_248_p1.read());
}

void writeData::thread_D_output_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        D_output_ce0 = ap_const_logic_1;
    } else {
        D_output_ce0 = ap_const_logic_0;
    }
}

void writeData::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void writeData::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void writeData::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[2];
}

void writeData::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void writeData::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter8.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_reg_273_pp0_iter7_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_D_output_AXI_BVALID.read()));
}

void writeData::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter8.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_reg_273_pp0_iter7_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_D_output_AXI_BVALID.read())));
}

void writeData::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter8.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_reg_273_pp0_iter7_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_D_output_AXI_BVALID.read())));
}

void writeData::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, D_output_AXI_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void writeData::thread_ap_block_state10_pp0_stage0_iter8() {
    ap_block_state10_pp0_stage0_iter8 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_reg_273_pp0_iter7_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_D_output_AXI_BVALID.read()));
}

void writeData::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void writeData::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void writeData::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_reg_273_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_D_output_AXI_AWREADY.read()));
}

void writeData::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void writeData::thread_ap_block_state5_io() {
    ap_block_state5_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_reg_273_pp0_iter2_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_D_output_AXI_WREADY.read()));
}

void writeData::thread_ap_block_state5_pp0_stage0_iter3() {
    ap_block_state5_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void writeData::thread_ap_block_state6_pp0_stage0_iter4() {
    ap_block_state6_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void writeData::thread_ap_block_state7_pp0_stage0_iter5() {
    ap_block_state7_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void writeData::thread_ap_block_state8_pp0_stage0_iter6() {
    ap_block_state8_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void writeData::thread_ap_block_state9_pp0_stage0_iter7() {
    ap_block_state9_pp0_stage0_iter7 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void writeData::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(exitcond_flatten_i_fu_156_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void writeData::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void writeData::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void writeData::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void writeData::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter8.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void writeData::thread_ap_phi_mux_i_i_phi_fu_124_p4() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_reg_273.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        ap_phi_mux_i_i_phi_fu_124_p4 = tmp_mid2_v_i_reg_287.read();
    } else {
        ap_phi_mux_i_i_phi_fu_124_p4 = i_i_reg_120.read();
    }
}

void writeData::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void writeData::thread_ap_sig_ioackin_m_axi_D_output_AXI_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_D_output_AXI_AWREADY.read())) {
        ap_sig_ioackin_m_axi_D_output_AXI_AWREADY = m_axi_D_output_AXI_AWREADY.read();
    } else {
        ap_sig_ioackin_m_axi_D_output_AXI_AWREADY = ap_const_logic_1;
    }
}

void writeData::thread_ap_sig_ioackin_m_axi_D_output_AXI_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_D_output_AXI_WREADY.read())) {
        ap_sig_ioackin_m_axi_D_output_AXI_WREADY = m_axi_D_output_AXI_WREADY.read();
    } else {
        ap_sig_ioackin_m_axi_D_output_AXI_WREADY = ap_const_logic_1;
    }
}

void writeData::thread_exitcond9_i_fu_174_p2() {
    exitcond9_i_fu_174_p2 = (!j_i_reg_131.read().is_01() || !ap_const_lv5_18.is_01())? sc_lv<1>(): sc_lv<1>(j_i_reg_131.read() == ap_const_lv5_18);
}

void writeData::thread_exitcond_flatten_i_fu_156_p2() {
    exitcond_flatten_i_fu_156_p2 = (!indvar_flatten_i_reg_109.read().is_01() || !ap_const_lv9_180.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_i_reg_109.read() == ap_const_lv9_180);
}

void writeData::thread_i_1_i_fu_168_p2() {
    i_1_i_fu_168_p2 = (!ap_phi_mux_i_i_phi_fu_124_p4.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(ap_phi_mux_i_i_phi_fu_124_p4.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void writeData::thread_indvar_flatten_next_s_fu_162_p2() {
    indvar_flatten_next_s_fu_162_p2 = (!indvar_flatten_i_reg_109.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(indvar_flatten_i_reg_109.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void writeData::thread_j_fu_226_p2() {
    j_fu_226_p2 = (!j_mid2_i_fu_180_p3.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(j_mid2_i_fu_180_p3.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void writeData::thread_j_mid2_i_fu_180_p3() {
    j_mid2_i_fu_180_p3 = (!exitcond9_i_fu_174_p2.read()[0].is_01())? sc_lv<5>(): ((exitcond9_i_fu_174_p2.read()[0].to_bool())? ap_const_lv5_0: j_i_reg_131.read());
}

void writeData::thread_m_axi_D_output_AXI_ARADDR() {
    m_axi_D_output_AXI_ARADDR = ap_const_lv32_0;
}

void writeData::thread_m_axi_D_output_AXI_ARBURST() {
    m_axi_D_output_AXI_ARBURST = ap_const_lv2_0;
}

void writeData::thread_m_axi_D_output_AXI_ARCACHE() {
    m_axi_D_output_AXI_ARCACHE = ap_const_lv4_0;
}

void writeData::thread_m_axi_D_output_AXI_ARID() {
    m_axi_D_output_AXI_ARID = ap_const_lv1_0;
}

void writeData::thread_m_axi_D_output_AXI_ARLEN() {
    m_axi_D_output_AXI_ARLEN = ap_const_lv32_0;
}

void writeData::thread_m_axi_D_output_AXI_ARLOCK() {
    m_axi_D_output_AXI_ARLOCK = ap_const_lv2_0;
}

void writeData::thread_m_axi_D_output_AXI_ARPROT() {
    m_axi_D_output_AXI_ARPROT = ap_const_lv3_0;
}

void writeData::thread_m_axi_D_output_AXI_ARQOS() {
    m_axi_D_output_AXI_ARQOS = ap_const_lv4_0;
}

void writeData::thread_m_axi_D_output_AXI_ARREGION() {
    m_axi_D_output_AXI_ARREGION = ap_const_lv4_0;
}

void writeData::thread_m_axi_D_output_AXI_ARSIZE() {
    m_axi_D_output_AXI_ARSIZE = ap_const_lv3_0;
}

void writeData::thread_m_axi_D_output_AXI_ARUSER() {
    m_axi_D_output_AXI_ARUSER = ap_const_lv1_0;
}

void writeData::thread_m_axi_D_output_AXI_ARVALID() {
    m_axi_D_output_AXI_ARVALID = ap_const_logic_0;
}

void writeData::thread_m_axi_D_output_AXI_AWADDR() {
    m_axi_D_output_AXI_AWADDR =  (sc_lv<32>) (sum_cast_i_fu_258_p1.read());
}

void writeData::thread_m_axi_D_output_AXI_AWBURST() {
    m_axi_D_output_AXI_AWBURST = ap_const_lv2_0;
}

void writeData::thread_m_axi_D_output_AXI_AWCACHE() {
    m_axi_D_output_AXI_AWCACHE = ap_const_lv4_0;
}

void writeData::thread_m_axi_D_output_AXI_AWID() {
    m_axi_D_output_AXI_AWID = ap_const_lv1_0;
}

void writeData::thread_m_axi_D_output_AXI_AWLEN() {
    m_axi_D_output_AXI_AWLEN = ap_const_lv32_1;
}

void writeData::thread_m_axi_D_output_AXI_AWLOCK() {
    m_axi_D_output_AXI_AWLOCK = ap_const_lv2_0;
}

void writeData::thread_m_axi_D_output_AXI_AWPROT() {
    m_axi_D_output_AXI_AWPROT = ap_const_lv3_0;
}

void writeData::thread_m_axi_D_output_AXI_AWQOS() {
    m_axi_D_output_AXI_AWQOS = ap_const_lv4_0;
}

void writeData::thread_m_axi_D_output_AXI_AWREGION() {
    m_axi_D_output_AXI_AWREGION = ap_const_lv4_0;
}

void writeData::thread_m_axi_D_output_AXI_AWSIZE() {
    m_axi_D_output_AXI_AWSIZE = ap_const_lv3_0;
}

void writeData::thread_m_axi_D_output_AXI_AWUSER() {
    m_axi_D_output_AXI_AWUSER = ap_const_lv1_0;
}

void writeData::thread_m_axi_D_output_AXI_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_reg_273_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_D_output_AXI_AWREADY.read()))) {
        m_axi_D_output_AXI_AWVALID = ap_const_logic_1;
    } else {
        m_axi_D_output_AXI_AWVALID = ap_const_logic_0;
    }
}

void writeData::thread_m_axi_D_output_AXI_BREADY() {
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter8.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_reg_273_pp0_iter7_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axi_D_output_AXI_BREADY = ap_const_logic_1;
    } else {
        m_axi_D_output_AXI_BREADY = ap_const_logic_0;
    }
}

void writeData::thread_m_axi_D_output_AXI_RREADY() {
    m_axi_D_output_AXI_RREADY = ap_const_logic_0;
}

void writeData::thread_m_axi_D_output_AXI_WDATA() {
    m_axi_D_output_AXI_WDATA = D_output_load_reg_318.read();
}

void writeData::thread_m_axi_D_output_AXI_WID() {
    m_axi_D_output_AXI_WID = ap_const_lv1_0;
}

void writeData::thread_m_axi_D_output_AXI_WLAST() {
    m_axi_D_output_AXI_WLAST = ap_const_logic_0;
}

void writeData::thread_m_axi_D_output_AXI_WSTRB() {
    m_axi_D_output_AXI_WSTRB = ap_const_lv4_F;
}

void writeData::thread_m_axi_D_output_AXI_WUSER() {
    m_axi_D_output_AXI_WUSER = ap_const_lv1_0;
}

void writeData::thread_m_axi_D_output_AXI_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_i_reg_273_pp0_iter2_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_D_output_AXI_WREADY.read()))) {
        m_axi_D_output_AXI_WVALID = ap_const_logic_1;
    } else {
        m_axi_D_output_AXI_WVALID = ap_const_logic_0;
    }
}

void writeData::thread_p_shl2_cast_i_fu_216_p1() {
    p_shl2_cast_i_fu_216_p1 = esl_zext<11,8>(tmp_3_i_fu_208_p3.read());
}

void writeData::thread_p_shl_cast_i_fu_204_p1() {
    p_shl_cast_i_fu_204_p1 = esl_zext<11,10>(tmp_i_fu_196_p3.read());
}

void writeData::thread_sext_cast_i_fu_152_p1() {
    sext_cast_i_fu_152_p1 = esl_zext<32,30>(tmp_fu_142_p4.read());
}

void writeData::thread_sum_cast_i_fu_258_p1() {
    sum_cast_i_fu_258_p1 = esl_sext<64,32>(sum_i_reg_302.read());
}

void writeData::thread_sum_i_fu_253_p2() {
    sum_i_fu_253_p2 = (!sext_cast_i_reg_268.read().is_01() || !tmp_5_cast10_i_fu_244_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(sext_cast_i_reg_268.read()) + sc_bigint<32>(tmp_5_cast10_i_fu_244_p1.read()));
}

void writeData::thread_tmp_2_cast_i_fu_235_p1() {
    tmp_2_cast_i_fu_235_p1 = esl_zext<12,5>(j_mid2_i_reg_282.read());
}

void writeData::thread_tmp_3_i_fu_208_p3() {
    tmp_3_i_fu_208_p3 = esl_concat<5,3>(tmp_mid2_v_i_fu_188_p3.read(), ap_const_lv3_0);
}

void writeData::thread_tmp_4_cast_i_fu_232_p1() {
    tmp_4_cast_i_fu_232_p1 = esl_sext<12,11>(tmp_4_i_reg_292.read());
}

void writeData::thread_tmp_4_i_fu_220_p2() {
    tmp_4_i_fu_220_p2 = (!p_shl_cast_i_fu_204_p1.read().is_01() || !p_shl2_cast_i_fu_216_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(p_shl_cast_i_fu_204_p1.read()) - sc_biguint<11>(p_shl2_cast_i_fu_216_p1.read()));
}

void writeData::thread_tmp_5_cast10_i_fu_244_p1() {
    tmp_5_cast10_i_fu_244_p1 = esl_sext<32,12>(tmp_5_i_fu_238_p2.read());
}

void writeData::thread_tmp_5_cast_i_fu_248_p1() {
    tmp_5_cast_i_fu_248_p1 = esl_sext<64,12>(tmp_5_i_fu_238_p2.read());
}

void writeData::thread_tmp_5_i_fu_238_p2() {
    tmp_5_i_fu_238_p2 = (!tmp_4_cast_i_fu_232_p1.read().is_01() || !tmp_2_cast_i_fu_235_p1.read().is_01())? sc_lv<12>(): (sc_bigint<12>(tmp_4_cast_i_fu_232_p1.read()) + sc_biguint<12>(tmp_2_cast_i_fu_235_p1.read()));
}

void writeData::thread_tmp_fu_142_p4() {
    tmp_fu_142_p4 = D_output_AXI_offset_dout.read().range(31, 2);
}

void writeData::thread_tmp_i_fu_196_p3() {
    tmp_i_fu_196_p3 = esl_concat<5,5>(tmp_mid2_v_i_fu_188_p3.read(), ap_const_lv5_0);
}

void writeData::thread_tmp_mid2_v_i_fu_188_p3() {
    tmp_mid2_v_i_fu_188_p3 = (!exitcond9_i_fu_174_p2.read()[0].is_01())? sc_lv<5>(): ((exitcond9_i_fu_174_p2.read()[0].to_bool())? i_1_i_fu_168_p2.read(): ap_phi_mux_i_i_phi_fu_124_p4.read());
}

void writeData::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_0, D_output_AXI_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(exitcond_flatten_i_fu_156_p2.read(), ap_const_lv1_1)) && !(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter7.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter8.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter7.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter8.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(exitcond_flatten_i_fu_156_p2.read(), ap_const_lv1_1)))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

