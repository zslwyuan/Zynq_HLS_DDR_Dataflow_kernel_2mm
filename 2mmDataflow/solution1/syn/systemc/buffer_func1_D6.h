// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _buffer_func1_D6_HH_
#define _buffer_func1_D6_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct buffer_func1_D6 : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<9> > D_input_address0;
    sc_out< sc_logic > D_input_ce0;
    sc_in< sc_lv<32> > D_input_q0;
    sc_out< sc_lv<9> > D_mid_address0;
    sc_out< sc_logic > D_mid_ce0;
    sc_out< sc_logic > D_mid_we0;
    sc_out< sc_lv<32> > D_mid_d0;


    // Module declarations
    buffer_func1_D6(sc_module_name name);
    SC_HAS_PROCESS(buffer_func1_D6);

    ~buffer_func1_D6();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > i_3_fu_80_p2;
    sc_signal< sc_lv<5> > i_3_reg_141;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<10> > tmp_24_fu_106_p2;
    sc_signal< sc_lv<10> > tmp_24_reg_146;
    sc_signal< sc_lv<1> > exitcond1_fu_74_p2;
    sc_signal< sc_lv<5> > j_3_fu_118_p2;
    sc_signal< sc_lv<5> > j_3_reg_154;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > tmp_66_cast_fu_133_p1;
    sc_signal< sc_lv<64> > tmp_66_cast_reg_159;
    sc_signal< sc_lv<1> > exitcond_fu_112_p2;
    sc_signal< sc_lv<32> > D_input_load_reg_169;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<5> > i_reg_52;
    sc_signal< sc_lv<5> > j_reg_63;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<8> > tmp_s_fu_94_p3;
    sc_signal< sc_lv<10> > tmp_fu_86_p3;
    sc_signal< sc_lv<10> > p_shl1_cast_fu_102_p1;
    sc_signal< sc_lv<10> > tmp_cast_fu_124_p1;
    sc_signal< sc_lv<10> > tmp_25_fu_128_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<5> ap_const_lv5_18;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_D_input_address0();
    void thread_D_input_ce0();
    void thread_D_mid_address0();
    void thread_D_mid_ce0();
    void thread_D_mid_d0();
    void thread_D_mid_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond1_fu_74_p2();
    void thread_exitcond_fu_112_p2();
    void thread_i_3_fu_80_p2();
    void thread_j_3_fu_118_p2();
    void thread_p_shl1_cast_fu_102_p1();
    void thread_tmp_24_fu_106_p2();
    void thread_tmp_25_fu_128_p2();
    void thread_tmp_66_cast_fu_133_p1();
    void thread_tmp_cast_fu_124_p1();
    void thread_tmp_fu_86_p3();
    void thread_tmp_s_fu_94_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
