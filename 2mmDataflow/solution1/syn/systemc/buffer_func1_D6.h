// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _buffer_func1_D6_HH_
#define _buffer_func1_D6_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct buffer_func1_D6 : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<9> > D_input_address0;
    sc_out< sc_logic > D_input_ce0;
    sc_in< sc_lv<32> > D_input_q0;
    sc_out< sc_lv<9> > D_mid_address0;
    sc_out< sc_logic > D_mid_ce0;
    sc_out< sc_logic > D_mid_we0;
    sc_out< sc_lv<32> > D_mid_d0;


    // Module declarations
    buffer_func1_D6(sc_module_name name);
    SC_HAS_PROCESS(buffer_func1_D6);

    ~buffer_func1_D6();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<9> > indvar_flatten_reg_70;
    sc_signal< sc_lv<5> > i_reg_81;
    sc_signal< sc_lv<5> > j_reg_92;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_103_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_186;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_186_pp0_iter1_reg;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_186_pp0_iter2_reg;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_186_pp0_iter3_reg;
    sc_signal< sc_lv<9> > indvar_flatten_next_fu_109_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<5> > j_mid2_fu_127_p3;
    sc_signal< sc_lv<5> > j_mid2_reg_195;
    sc_signal< sc_lv<5> > tmp_mid2_v_fu_135_p3;
    sc_signal< sc_lv<5> > tmp_mid2_v_reg_200;
    sc_signal< sc_lv<5> > j_3_fu_143_p2;
    sc_signal< sc_lv<10> > tmp_25_fu_176_p2;
    sc_signal< sc_lv<10> > tmp_25_reg_212;
    sc_signal< sc_lv<64> > tmp_66_cast_fu_182_p1;
    sc_signal< sc_lv<64> > tmp_66_cast_reg_217;
    sc_signal< sc_lv<64> > tmp_66_cast_reg_217_pp0_iter3_reg;
    sc_signal< sc_lv<32> > D_input_load_reg_227;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_lv<5> > ap_phi_mux_i_phi_fu_85_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond3_fu_121_p2;
    sc_signal< sc_lv<5> > i_3_fu_115_p2;
    sc_signal< sc_lv<8> > tmp_s_fu_156_p3;
    sc_signal< sc_lv<10> > tmp_fu_149_p3;
    sc_signal< sc_lv<10> > p_shl1_cast_fu_163_p1;
    sc_signal< sc_lv<10> > tmp_24_fu_167_p2;
    sc_signal< sc_lv<10> > tmp_cast_fu_173_p1;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state7;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<9> ap_const_lv9_180;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<5> ap_const_lv5_18;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_D_input_address0();
    void thread_D_input_ce0();
    void thread_D_mid_address0();
    void thread_D_mid_ce0();
    void thread_D_mid_d0();
    void thread_D_mid_we0();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_phi_fu_85_p4();
    void thread_ap_ready();
    void thread_exitcond3_fu_121_p2();
    void thread_exitcond_flatten_fu_103_p2();
    void thread_i_3_fu_115_p2();
    void thread_indvar_flatten_next_fu_109_p2();
    void thread_j_3_fu_143_p2();
    void thread_j_mid2_fu_127_p3();
    void thread_p_shl1_cast_fu_163_p1();
    void thread_tmp_24_fu_167_p2();
    void thread_tmp_25_fu_176_p2();
    void thread_tmp_66_cast_fu_182_p1();
    void thread_tmp_cast_fu_173_p1();
    void thread_tmp_fu_149_p3();
    void thread_tmp_mid2_v_fu_135_p3();
    void thread_tmp_s_fu_156_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
