// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _writeData_HH_
#define _writeData_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct writeData : public sc_module {
    // Port declarations 58
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_D_output_AXI_AWVALID;
    sc_in< sc_logic > m_axi_D_output_AXI_AWREADY;
    sc_out< sc_lv<32> > m_axi_D_output_AXI_AWADDR;
    sc_out< sc_lv<1> > m_axi_D_output_AXI_AWID;
    sc_out< sc_lv<32> > m_axi_D_output_AXI_AWLEN;
    sc_out< sc_lv<3> > m_axi_D_output_AXI_AWSIZE;
    sc_out< sc_lv<2> > m_axi_D_output_AXI_AWBURST;
    sc_out< sc_lv<2> > m_axi_D_output_AXI_AWLOCK;
    sc_out< sc_lv<4> > m_axi_D_output_AXI_AWCACHE;
    sc_out< sc_lv<3> > m_axi_D_output_AXI_AWPROT;
    sc_out< sc_lv<4> > m_axi_D_output_AXI_AWQOS;
    sc_out< sc_lv<4> > m_axi_D_output_AXI_AWREGION;
    sc_out< sc_lv<1> > m_axi_D_output_AXI_AWUSER;
    sc_out< sc_logic > m_axi_D_output_AXI_WVALID;
    sc_in< sc_logic > m_axi_D_output_AXI_WREADY;
    sc_out< sc_lv<32> > m_axi_D_output_AXI_WDATA;
    sc_out< sc_lv<4> > m_axi_D_output_AXI_WSTRB;
    sc_out< sc_logic > m_axi_D_output_AXI_WLAST;
    sc_out< sc_lv<1> > m_axi_D_output_AXI_WID;
    sc_out< sc_lv<1> > m_axi_D_output_AXI_WUSER;
    sc_out< sc_logic > m_axi_D_output_AXI_ARVALID;
    sc_in< sc_logic > m_axi_D_output_AXI_ARREADY;
    sc_out< sc_lv<32> > m_axi_D_output_AXI_ARADDR;
    sc_out< sc_lv<1> > m_axi_D_output_AXI_ARID;
    sc_out< sc_lv<32> > m_axi_D_output_AXI_ARLEN;
    sc_out< sc_lv<3> > m_axi_D_output_AXI_ARSIZE;
    sc_out< sc_lv<2> > m_axi_D_output_AXI_ARBURST;
    sc_out< sc_lv<2> > m_axi_D_output_AXI_ARLOCK;
    sc_out< sc_lv<4> > m_axi_D_output_AXI_ARCACHE;
    sc_out< sc_lv<3> > m_axi_D_output_AXI_ARPROT;
    sc_out< sc_lv<4> > m_axi_D_output_AXI_ARQOS;
    sc_out< sc_lv<4> > m_axi_D_output_AXI_ARREGION;
    sc_out< sc_lv<1> > m_axi_D_output_AXI_ARUSER;
    sc_in< sc_logic > m_axi_D_output_AXI_RVALID;
    sc_out< sc_logic > m_axi_D_output_AXI_RREADY;
    sc_in< sc_lv<32> > m_axi_D_output_AXI_RDATA;
    sc_in< sc_logic > m_axi_D_output_AXI_RLAST;
    sc_in< sc_lv<1> > m_axi_D_output_AXI_RID;
    sc_in< sc_lv<1> > m_axi_D_output_AXI_RUSER;
    sc_in< sc_lv<2> > m_axi_D_output_AXI_RRESP;
    sc_in< sc_logic > m_axi_D_output_AXI_BVALID;
    sc_out< sc_logic > m_axi_D_output_AXI_BREADY;
    sc_in< sc_lv<2> > m_axi_D_output_AXI_BRESP;
    sc_in< sc_lv<1> > m_axi_D_output_AXI_BID;
    sc_in< sc_lv<1> > m_axi_D_output_AXI_BUSER;
    sc_in< sc_lv<32> > D_output_AXI_offset_dout;
    sc_in< sc_logic > D_output_AXI_offset_empty_n;
    sc_out< sc_logic > D_output_AXI_offset_read;
    sc_out< sc_lv<9> > D_output_address0;
    sc_out< sc_logic > D_output_ce0;
    sc_in< sc_lv<32> > D_output_q0;


    // Module declarations
    writeData(sc_module_name name);
    SC_HAS_PROCESS(writeData);

    ~writeData();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > D_output_AXI_blk_n_AW;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_flatten_i_reg_273;
    sc_signal< sc_lv<1> > exitcond_flatten_i_reg_273_pp0_iter1_reg;
    sc_signal< sc_logic > D_output_AXI_blk_n_W;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<1> > exitcond_flatten_i_reg_273_pp0_iter2_reg;
    sc_signal< sc_logic > D_output_AXI_blk_n_B;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_lv<1> > exitcond_flatten_i_reg_273_pp0_iter7_reg;
    sc_signal< sc_logic > D_output_AXI_offset_blk_n;
    sc_signal< sc_lv<9> > indvar_flatten_i_reg_109;
    sc_signal< sc_lv<5> > i_i_reg_120;
    sc_signal< sc_lv<5> > j_i_reg_131;
    sc_signal< sc_lv<32> > sext_cast_i_fu_152_p1;
    sc_signal< sc_lv<32> > sext_cast_i_reg_268;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > exitcond_flatten_i_fu_156_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_D_output_AXI_AWREADY;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_D_output_AXI_WREADY;
    sc_signal< bool > ap_block_state5_io;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter8;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > exitcond_flatten_i_reg_273_pp0_iter3_reg;
    sc_signal< sc_lv<1> > exitcond_flatten_i_reg_273_pp0_iter4_reg;
    sc_signal< sc_lv<1> > exitcond_flatten_i_reg_273_pp0_iter5_reg;
    sc_signal< sc_lv<1> > exitcond_flatten_i_reg_273_pp0_iter6_reg;
    sc_signal< sc_lv<9> > indvar_flatten_next_s_fu_162_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<5> > j_mid2_i_fu_180_p3;
    sc_signal< sc_lv<5> > j_mid2_i_reg_282;
    sc_signal< sc_lv<5> > tmp_mid2_v_i_fu_188_p3;
    sc_signal< sc_lv<5> > tmp_mid2_v_i_reg_287;
    sc_signal< sc_lv<11> > tmp_4_i_fu_220_p2;
    sc_signal< sc_lv<11> > tmp_4_i_reg_292;
    sc_signal< sc_lv<5> > j_fu_226_p2;
    sc_signal< sc_lv<32> > sum_i_fu_253_p2;
    sc_signal< sc_lv<32> > sum_i_reg_302;
    sc_signal< sc_lv<32> > D_output_load_reg_318;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_lv<5> > ap_phi_mux_i_i_phi_fu_124_p4;
    sc_signal< sc_lv<64> > tmp_5_cast_i_fu_248_p1;
    sc_signal< sc_lv<64> > sum_cast_i_fu_258_p1;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_D_output_AXI_AWREADY;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_D_output_AXI_WREADY;
    sc_signal< sc_lv<30> > tmp_fu_142_p4;
    sc_signal< sc_lv<1> > exitcond9_i_fu_174_p2;
    sc_signal< sc_lv<5> > i_1_i_fu_168_p2;
    sc_signal< sc_lv<10> > tmp_i_fu_196_p3;
    sc_signal< sc_lv<8> > tmp_3_i_fu_208_p3;
    sc_signal< sc_lv<11> > p_shl_cast_i_fu_204_p1;
    sc_signal< sc_lv<11> > p_shl2_cast_i_fu_216_p1;
    sc_signal< sc_lv<12> > tmp_4_cast_i_fu_232_p1;
    sc_signal< sc_lv<12> > tmp_2_cast_i_fu_235_p1;
    sc_signal< sc_lv<12> > tmp_5_i_fu_238_p2;
    sc_signal< sc_lv<32> > tmp_5_cast10_i_fu_244_p1;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state11;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<9> ap_const_lv9_180;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<5> ap_const_lv5_18;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_D_output_AXI_blk_n_AW();
    void thread_D_output_AXI_blk_n_B();
    void thread_D_output_AXI_blk_n_W();
    void thread_D_output_AXI_offset_blk_n();
    void thread_D_output_AXI_offset_read();
    void thread_D_output_address0();
    void thread_D_output_ce0();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state10_pp0_stage0_iter8();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_io();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_block_state8_pp0_stage0_iter6();
    void thread_ap_block_state9_pp0_stage0_iter7();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_i_phi_fu_124_p4();
    void thread_ap_ready();
    void thread_ap_sig_ioackin_m_axi_D_output_AXI_AWREADY();
    void thread_ap_sig_ioackin_m_axi_D_output_AXI_WREADY();
    void thread_exitcond9_i_fu_174_p2();
    void thread_exitcond_flatten_i_fu_156_p2();
    void thread_i_1_i_fu_168_p2();
    void thread_indvar_flatten_next_s_fu_162_p2();
    void thread_j_fu_226_p2();
    void thread_j_mid2_i_fu_180_p3();
    void thread_m_axi_D_output_AXI_ARADDR();
    void thread_m_axi_D_output_AXI_ARBURST();
    void thread_m_axi_D_output_AXI_ARCACHE();
    void thread_m_axi_D_output_AXI_ARID();
    void thread_m_axi_D_output_AXI_ARLEN();
    void thread_m_axi_D_output_AXI_ARLOCK();
    void thread_m_axi_D_output_AXI_ARPROT();
    void thread_m_axi_D_output_AXI_ARQOS();
    void thread_m_axi_D_output_AXI_ARREGION();
    void thread_m_axi_D_output_AXI_ARSIZE();
    void thread_m_axi_D_output_AXI_ARUSER();
    void thread_m_axi_D_output_AXI_ARVALID();
    void thread_m_axi_D_output_AXI_AWADDR();
    void thread_m_axi_D_output_AXI_AWBURST();
    void thread_m_axi_D_output_AXI_AWCACHE();
    void thread_m_axi_D_output_AXI_AWID();
    void thread_m_axi_D_output_AXI_AWLEN();
    void thread_m_axi_D_output_AXI_AWLOCK();
    void thread_m_axi_D_output_AXI_AWPROT();
    void thread_m_axi_D_output_AXI_AWQOS();
    void thread_m_axi_D_output_AXI_AWREGION();
    void thread_m_axi_D_output_AXI_AWSIZE();
    void thread_m_axi_D_output_AXI_AWUSER();
    void thread_m_axi_D_output_AXI_AWVALID();
    void thread_m_axi_D_output_AXI_BREADY();
    void thread_m_axi_D_output_AXI_RREADY();
    void thread_m_axi_D_output_AXI_WDATA();
    void thread_m_axi_D_output_AXI_WID();
    void thread_m_axi_D_output_AXI_WLAST();
    void thread_m_axi_D_output_AXI_WSTRB();
    void thread_m_axi_D_output_AXI_WUSER();
    void thread_m_axi_D_output_AXI_WVALID();
    void thread_p_shl2_cast_i_fu_216_p1();
    void thread_p_shl_cast_i_fu_204_p1();
    void thread_sext_cast_i_fu_152_p1();
    void thread_sum_cast_i_fu_258_p1();
    void thread_sum_i_fu_253_p2();
    void thread_tmp_2_cast_i_fu_235_p1();
    void thread_tmp_3_i_fu_208_p3();
    void thread_tmp_4_cast_i_fu_232_p1();
    void thread_tmp_4_i_fu_220_p2();
    void thread_tmp_5_cast10_i_fu_244_p1();
    void thread_tmp_5_cast_i_fu_248_p1();
    void thread_tmp_5_i_fu_238_p2();
    void thread_tmp_fu_142_p4();
    void thread_tmp_i_fu_196_p3();
    void thread_tmp_mid2_v_i_fu_188_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
