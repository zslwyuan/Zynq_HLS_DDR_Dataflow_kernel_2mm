// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "buffer_func1_C7.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic buffer_func1_C7::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic buffer_func1_C7::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> buffer_func1_C7::ap_ST_fsm_state1 = "1";
const sc_lv<8> buffer_func1_C7::ap_ST_fsm_state2 = "10";
const sc_lv<8> buffer_func1_C7::ap_ST_fsm_state3 = "100";
const sc_lv<8> buffer_func1_C7::ap_ST_fsm_state4 = "1000";
const sc_lv<8> buffer_func1_C7::ap_ST_fsm_state5 = "10000";
const sc_lv<8> buffer_func1_C7::ap_ST_fsm_state6 = "100000";
const sc_lv<8> buffer_func1_C7::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> buffer_func1_C7::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> buffer_func1_C7::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> buffer_func1_C7::ap_const_lv32_1 = "1";
const sc_lv<1> buffer_func1_C7::ap_const_lv1_0 = "0";
const sc_lv<32> buffer_func1_C7::ap_const_lv32_2 = "10";
const sc_lv<32> buffer_func1_C7::ap_const_lv32_3 = "11";
const sc_lv<32> buffer_func1_C7::ap_const_lv32_4 = "100";
const sc_lv<32> buffer_func1_C7::ap_const_lv32_5 = "101";
const sc_lv<32> buffer_func1_C7::ap_const_lv32_6 = "110";
const sc_lv<5> buffer_func1_C7::ap_const_lv5_0 = "00000";
const sc_lv<1> buffer_func1_C7::ap_const_lv1_1 = "1";
const sc_lv<32> buffer_func1_C7::ap_const_lv32_7 = "111";
const sc_lv<5> buffer_func1_C7::ap_const_lv5_18 = "11000";
const sc_lv<5> buffer_func1_C7::ap_const_lv5_1 = "1";
const sc_lv<3> buffer_func1_C7::ap_const_lv3_0 = "000";
const sc_lv<5> buffer_func1_C7::ap_const_lv5_2 = "10";
const sc_lv<5> buffer_func1_C7::ap_const_lv5_12 = "10010";
const sc_lv<5> buffer_func1_C7::ap_const_lv5_8 = "1000";
const bool buffer_func1_C7::ap_const_boolean_1 = true;

buffer_func1_C7::buffer_func1_C7(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_C_input_0_address0);
    sensitive << ( tmp_70_cast_fu_350_p1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_C_input_0_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_C_input_1_address0);
    sensitive << ( tmp_70_cast_fu_350_p1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_C_input_1_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_C_input_2_address0);
    sensitive << ( tmp_70_cast_reg_391 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_C_input_2_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_C_input_3_address0);
    sensitive << ( tmp_70_cast_reg_391 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_C_input_3_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_C_input_4_address0);
    sensitive << ( tmp_70_cast_reg_391 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_C_input_4_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_C_input_5_address0);
    sensitive << ( tmp_70_cast_reg_391 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_C_input_5_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_C_input_6_address0);
    sensitive << ( tmp_70_cast_reg_391 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_C_input_6_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_C_input_7_address0);
    sensitive << ( tmp_70_cast_reg_391 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_C_input_7_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_C_mid_0_address0);
    sensitive << ( tmp_70_cast_reg_391 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_C_mid_0_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_C_mid_0_d0);
    sensitive << ( C_input_0_load_reg_419 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_C_mid_0_we0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_C_mid_1_address0);
    sensitive << ( tmp_70_cast_reg_391 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_C_mid_1_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_C_mid_1_d0);
    sensitive << ( C_input_1_load_reg_424 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_C_mid_1_we0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_C_mid_2_address0);
    sensitive << ( C_mid_2_addr_reg_459 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_2_ce0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_2_d0);
    sensitive << ( C_input_2_load_reg_497 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_2_we0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_3_address0);
    sensitive << ( C_mid_3_addr_reg_464 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_3_ce0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_3_d0);
    sensitive << ( C_input_3_load_reg_502 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_3_we0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_4_address0);
    sensitive << ( C_mid_4_addr_reg_469 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_4_ce0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_4_d0);
    sensitive << ( C_input_4_load_reg_507 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_4_we0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_5_address0);
    sensitive << ( C_mid_5_addr_reg_474 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_5_ce0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_5_d0);
    sensitive << ( C_input_5_load_reg_512 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_5_we0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_6_address0);
    sensitive << ( C_mid_6_addr_reg_479 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_6_ce0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_6_d0);
    sensitive << ( C_input_6_load_reg_517 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_6_we0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_7_address0);
    sensitive << ( C_mid_7_addr_reg_484 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_7_ce0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_7_d0);
    sensitive << ( C_input_7_load_reg_522 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_C_mid_7_we0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_289_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_289_p2 );

    SC_METHOD(thread_exitcond1_fu_289_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( j_reg_266 );

    SC_METHOD(thread_exitcond_2_fu_361_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( k_10_s_fu_355_p2 );

    SC_METHOD(thread_j_4_fu_295_p2);
    sensitive << ( j_reg_266 );

    SC_METHOD(thread_k_10_7_fu_367_p2);
    sensitive << ( k_reg_277 );

    SC_METHOD(thread_k_10_s_fu_355_p2);
    sensitive << ( k_reg_277 );

    SC_METHOD(thread_newIndex_fu_305_p4);
    sensitive << ( k_reg_277 );

    SC_METHOD(thread_p_shl1_cast_fu_335_p1);
    sensitive << ( tmp_26_fu_327_p3 );

    SC_METHOD(thread_p_shl_cast_fu_323_p1);
    sensitive << ( tmp_s_fu_315_p3 );

    SC_METHOD(thread_tmp_26_fu_327_p3);
    sensitive << ( newIndex_fu_305_p4 );

    SC_METHOD(thread_tmp_27_fu_339_p2);
    sensitive << ( p_shl_cast_fu_323_p1 );
    sensitive << ( p_shl1_cast_fu_335_p1 );

    SC_METHOD(thread_tmp_28_fu_345_p2);
    sensitive << ( tmp_cast_reg_381 );
    sensitive << ( tmp_27_fu_339_p2 );

    SC_METHOD(thread_tmp_70_cast_fu_350_p1);
    sensitive << ( tmp_28_reg_386 );

    SC_METHOD(thread_tmp_cast_fu_301_p1);
    sensitive << ( j_reg_266 );

    SC_METHOD(thread_tmp_s_fu_315_p3);
    sensitive << ( newIndex_fu_305_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_289_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond_2_fu_361_p2 );

    ap_CS_fsm = "00000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "buffer_func1_C7_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, C_input_0_address0, "(port)C_input_0_address0");
    sc_trace(mVcdFile, C_input_0_ce0, "(port)C_input_0_ce0");
    sc_trace(mVcdFile, C_input_0_q0, "(port)C_input_0_q0");
    sc_trace(mVcdFile, C_input_1_address0, "(port)C_input_1_address0");
    sc_trace(mVcdFile, C_input_1_ce0, "(port)C_input_1_ce0");
    sc_trace(mVcdFile, C_input_1_q0, "(port)C_input_1_q0");
    sc_trace(mVcdFile, C_input_2_address0, "(port)C_input_2_address0");
    sc_trace(mVcdFile, C_input_2_ce0, "(port)C_input_2_ce0");
    sc_trace(mVcdFile, C_input_2_q0, "(port)C_input_2_q0");
    sc_trace(mVcdFile, C_input_3_address0, "(port)C_input_3_address0");
    sc_trace(mVcdFile, C_input_3_ce0, "(port)C_input_3_ce0");
    sc_trace(mVcdFile, C_input_3_q0, "(port)C_input_3_q0");
    sc_trace(mVcdFile, C_input_4_address0, "(port)C_input_4_address0");
    sc_trace(mVcdFile, C_input_4_ce0, "(port)C_input_4_ce0");
    sc_trace(mVcdFile, C_input_4_q0, "(port)C_input_4_q0");
    sc_trace(mVcdFile, C_input_5_address0, "(port)C_input_5_address0");
    sc_trace(mVcdFile, C_input_5_ce0, "(port)C_input_5_ce0");
    sc_trace(mVcdFile, C_input_5_q0, "(port)C_input_5_q0");
    sc_trace(mVcdFile, C_input_6_address0, "(port)C_input_6_address0");
    sc_trace(mVcdFile, C_input_6_ce0, "(port)C_input_6_ce0");
    sc_trace(mVcdFile, C_input_6_q0, "(port)C_input_6_q0");
    sc_trace(mVcdFile, C_input_7_address0, "(port)C_input_7_address0");
    sc_trace(mVcdFile, C_input_7_ce0, "(port)C_input_7_ce0");
    sc_trace(mVcdFile, C_input_7_q0, "(port)C_input_7_q0");
    sc_trace(mVcdFile, C_mid_0_address0, "(port)C_mid_0_address0");
    sc_trace(mVcdFile, C_mid_0_ce0, "(port)C_mid_0_ce0");
    sc_trace(mVcdFile, C_mid_0_we0, "(port)C_mid_0_we0");
    sc_trace(mVcdFile, C_mid_0_d0, "(port)C_mid_0_d0");
    sc_trace(mVcdFile, C_mid_1_address0, "(port)C_mid_1_address0");
    sc_trace(mVcdFile, C_mid_1_ce0, "(port)C_mid_1_ce0");
    sc_trace(mVcdFile, C_mid_1_we0, "(port)C_mid_1_we0");
    sc_trace(mVcdFile, C_mid_1_d0, "(port)C_mid_1_d0");
    sc_trace(mVcdFile, C_mid_2_address0, "(port)C_mid_2_address0");
    sc_trace(mVcdFile, C_mid_2_ce0, "(port)C_mid_2_ce0");
    sc_trace(mVcdFile, C_mid_2_we0, "(port)C_mid_2_we0");
    sc_trace(mVcdFile, C_mid_2_d0, "(port)C_mid_2_d0");
    sc_trace(mVcdFile, C_mid_3_address0, "(port)C_mid_3_address0");
    sc_trace(mVcdFile, C_mid_3_ce0, "(port)C_mid_3_ce0");
    sc_trace(mVcdFile, C_mid_3_we0, "(port)C_mid_3_we0");
    sc_trace(mVcdFile, C_mid_3_d0, "(port)C_mid_3_d0");
    sc_trace(mVcdFile, C_mid_4_address0, "(port)C_mid_4_address0");
    sc_trace(mVcdFile, C_mid_4_ce0, "(port)C_mid_4_ce0");
    sc_trace(mVcdFile, C_mid_4_we0, "(port)C_mid_4_we0");
    sc_trace(mVcdFile, C_mid_4_d0, "(port)C_mid_4_d0");
    sc_trace(mVcdFile, C_mid_5_address0, "(port)C_mid_5_address0");
    sc_trace(mVcdFile, C_mid_5_ce0, "(port)C_mid_5_ce0");
    sc_trace(mVcdFile, C_mid_5_we0, "(port)C_mid_5_we0");
    sc_trace(mVcdFile, C_mid_5_d0, "(port)C_mid_5_d0");
    sc_trace(mVcdFile, C_mid_6_address0, "(port)C_mid_6_address0");
    sc_trace(mVcdFile, C_mid_6_ce0, "(port)C_mid_6_ce0");
    sc_trace(mVcdFile, C_mid_6_we0, "(port)C_mid_6_we0");
    sc_trace(mVcdFile, C_mid_6_d0, "(port)C_mid_6_d0");
    sc_trace(mVcdFile, C_mid_7_address0, "(port)C_mid_7_address0");
    sc_trace(mVcdFile, C_mid_7_ce0, "(port)C_mid_7_ce0");
    sc_trace(mVcdFile, C_mid_7_we0, "(port)C_mid_7_we0");
    sc_trace(mVcdFile, C_mid_7_d0, "(port)C_mid_7_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, j_4_fu_295_p2, "j_4_fu_295_p2");
    sc_trace(mVcdFile, j_4_reg_376, "j_4_reg_376");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_cast_fu_301_p1, "tmp_cast_fu_301_p1");
    sc_trace(mVcdFile, tmp_cast_reg_381, "tmp_cast_reg_381");
    sc_trace(mVcdFile, exitcond1_fu_289_p2, "exitcond1_fu_289_p2");
    sc_trace(mVcdFile, tmp_28_fu_345_p2, "tmp_28_fu_345_p2");
    sc_trace(mVcdFile, tmp_28_reg_386, "tmp_28_reg_386");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_70_cast_fu_350_p1, "tmp_70_cast_fu_350_p1");
    sc_trace(mVcdFile, tmp_70_cast_reg_391, "tmp_70_cast_reg_391");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, C_input_0_load_reg_419, "C_input_0_load_reg_419");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, C_input_1_load_reg_424, "C_input_1_load_reg_424");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, C_mid_2_addr_reg_459, "C_mid_2_addr_reg_459");
    sc_trace(mVcdFile, C_mid_3_addr_reg_464, "C_mid_3_addr_reg_464");
    sc_trace(mVcdFile, C_mid_4_addr_reg_469, "C_mid_4_addr_reg_469");
    sc_trace(mVcdFile, C_mid_5_addr_reg_474, "C_mid_5_addr_reg_474");
    sc_trace(mVcdFile, C_mid_6_addr_reg_479, "C_mid_6_addr_reg_479");
    sc_trace(mVcdFile, C_mid_7_addr_reg_484, "C_mid_7_addr_reg_484");
    sc_trace(mVcdFile, k_10_7_fu_367_p2, "k_10_7_fu_367_p2");
    sc_trace(mVcdFile, k_10_7_reg_492, "k_10_7_reg_492");
    sc_trace(mVcdFile, exitcond_2_fu_361_p2, "exitcond_2_fu_361_p2");
    sc_trace(mVcdFile, C_input_2_load_reg_497, "C_input_2_load_reg_497");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, C_input_3_load_reg_502, "C_input_3_load_reg_502");
    sc_trace(mVcdFile, C_input_4_load_reg_507, "C_input_4_load_reg_507");
    sc_trace(mVcdFile, C_input_5_load_reg_512, "C_input_5_load_reg_512");
    sc_trace(mVcdFile, C_input_6_load_reg_517, "C_input_6_load_reg_517");
    sc_trace(mVcdFile, C_input_7_load_reg_522, "C_input_7_load_reg_522");
    sc_trace(mVcdFile, j_reg_266, "j_reg_266");
    sc_trace(mVcdFile, k_reg_277, "k_reg_277");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, newIndex_fu_305_p4, "newIndex_fu_305_p4");
    sc_trace(mVcdFile, tmp_s_fu_315_p3, "tmp_s_fu_315_p3");
    sc_trace(mVcdFile, tmp_26_fu_327_p3, "tmp_26_fu_327_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_323_p1, "p_shl_cast_fu_323_p1");
    sc_trace(mVcdFile, p_shl1_cast_fu_335_p1, "p_shl1_cast_fu_335_p1");
    sc_trace(mVcdFile, tmp_27_fu_339_p2, "tmp_27_fu_339_p2");
    sc_trace(mVcdFile, k_10_s_fu_355_p2, "k_10_s_fu_355_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

buffer_func1_C7::~buffer_func1_C7() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void buffer_func1_C7::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_2_fu_361_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        j_reg_266 = j_4_reg_376.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_reg_266 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_289_p2.read(), ap_const_lv1_0))) {
        k_reg_277 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        k_reg_277 = k_10_7_reg_492.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        C_input_0_load_reg_419 = C_input_0_q0.read();
        C_input_1_load_reg_424 = C_input_1_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        C_input_2_load_reg_497 = C_input_2_q0.read();
        C_input_3_load_reg_502 = C_input_3_q0.read();
        C_input_4_load_reg_507 = C_input_4_q0.read();
        C_input_5_load_reg_512 = C_input_5_q0.read();
        C_input_6_load_reg_517 = C_input_6_q0.read();
        C_input_7_load_reg_522 = C_input_7_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        C_mid_2_addr_reg_459 =  (sc_lv<6>) (tmp_70_cast_reg_391.read());
        C_mid_3_addr_reg_464 =  (sc_lv<6>) (tmp_70_cast_reg_391.read());
        C_mid_4_addr_reg_469 =  (sc_lv<6>) (tmp_70_cast_reg_391.read());
        C_mid_5_addr_reg_474 =  (sc_lv<6>) (tmp_70_cast_reg_391.read());
        C_mid_6_addr_reg_479 =  (sc_lv<6>) (tmp_70_cast_reg_391.read());
        C_mid_7_addr_reg_484 =  (sc_lv<6>) (tmp_70_cast_reg_391.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        j_4_reg_376 = j_4_fu_295_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(exitcond_2_fu_361_p2.read(), ap_const_lv1_0))) {
        k_10_7_reg_492 = k_10_7_fu_367_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_28_reg_386 = tmp_28_fu_345_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_70_cast_reg_391 = tmp_70_cast_fu_350_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_289_p2.read(), ap_const_lv1_0))) {
        tmp_cast_reg_381 = tmp_cast_fu_301_p1.read();
    }
}

void buffer_func1_C7::thread_C_input_0_address0() {
    C_input_0_address0 =  (sc_lv<7>) (tmp_70_cast_fu_350_p1.read());
}

void buffer_func1_C7::thread_C_input_0_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        C_input_0_ce0 = ap_const_logic_1;
    } else {
        C_input_0_ce0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_input_1_address0() {
    C_input_1_address0 =  (sc_lv<7>) (tmp_70_cast_fu_350_p1.read());
}

void buffer_func1_C7::thread_C_input_1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        C_input_1_ce0 = ap_const_logic_1;
    } else {
        C_input_1_ce0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_input_2_address0() {
    C_input_2_address0 =  (sc_lv<6>) (tmp_70_cast_reg_391.read());
}

void buffer_func1_C7::thread_C_input_2_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        C_input_2_ce0 = ap_const_logic_1;
    } else {
        C_input_2_ce0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_input_3_address0() {
    C_input_3_address0 =  (sc_lv<6>) (tmp_70_cast_reg_391.read());
}

void buffer_func1_C7::thread_C_input_3_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        C_input_3_ce0 = ap_const_logic_1;
    } else {
        C_input_3_ce0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_input_4_address0() {
    C_input_4_address0 =  (sc_lv<6>) (tmp_70_cast_reg_391.read());
}

void buffer_func1_C7::thread_C_input_4_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        C_input_4_ce0 = ap_const_logic_1;
    } else {
        C_input_4_ce0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_input_5_address0() {
    C_input_5_address0 =  (sc_lv<6>) (tmp_70_cast_reg_391.read());
}

void buffer_func1_C7::thread_C_input_5_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        C_input_5_ce0 = ap_const_logic_1;
    } else {
        C_input_5_ce0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_input_6_address0() {
    C_input_6_address0 =  (sc_lv<6>) (tmp_70_cast_reg_391.read());
}

void buffer_func1_C7::thread_C_input_6_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        C_input_6_ce0 = ap_const_logic_1;
    } else {
        C_input_6_ce0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_input_7_address0() {
    C_input_7_address0 =  (sc_lv<6>) (tmp_70_cast_reg_391.read());
}

void buffer_func1_C7::thread_C_input_7_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        C_input_7_ce0 = ap_const_logic_1;
    } else {
        C_input_7_ce0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_mid_0_address0() {
    C_mid_0_address0 =  (sc_lv<7>) (tmp_70_cast_reg_391.read());
}

void buffer_func1_C7::thread_C_mid_0_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        C_mid_0_ce0 = ap_const_logic_1;
    } else {
        C_mid_0_ce0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_mid_0_d0() {
    C_mid_0_d0 = C_input_0_load_reg_419.read();
}

void buffer_func1_C7::thread_C_mid_0_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        C_mid_0_we0 = ap_const_logic_1;
    } else {
        C_mid_0_we0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_mid_1_address0() {
    C_mid_1_address0 =  (sc_lv<7>) (tmp_70_cast_reg_391.read());
}

void buffer_func1_C7::thread_C_mid_1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        C_mid_1_ce0 = ap_const_logic_1;
    } else {
        C_mid_1_ce0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_mid_1_d0() {
    C_mid_1_d0 = C_input_1_load_reg_424.read();
}

void buffer_func1_C7::thread_C_mid_1_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        C_mid_1_we0 = ap_const_logic_1;
    } else {
        C_mid_1_we0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_mid_2_address0() {
    C_mid_2_address0 = C_mid_2_addr_reg_459.read();
}

void buffer_func1_C7::thread_C_mid_2_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        C_mid_2_ce0 = ap_const_logic_1;
    } else {
        C_mid_2_ce0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_mid_2_d0() {
    C_mid_2_d0 = C_input_2_load_reg_497.read();
}

void buffer_func1_C7::thread_C_mid_2_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        C_mid_2_we0 = ap_const_logic_1;
    } else {
        C_mid_2_we0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_mid_3_address0() {
    C_mid_3_address0 = C_mid_3_addr_reg_464.read();
}

void buffer_func1_C7::thread_C_mid_3_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        C_mid_3_ce0 = ap_const_logic_1;
    } else {
        C_mid_3_ce0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_mid_3_d0() {
    C_mid_3_d0 = C_input_3_load_reg_502.read();
}

void buffer_func1_C7::thread_C_mid_3_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        C_mid_3_we0 = ap_const_logic_1;
    } else {
        C_mid_3_we0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_mid_4_address0() {
    C_mid_4_address0 = C_mid_4_addr_reg_469.read();
}

void buffer_func1_C7::thread_C_mid_4_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        C_mid_4_ce0 = ap_const_logic_1;
    } else {
        C_mid_4_ce0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_mid_4_d0() {
    C_mid_4_d0 = C_input_4_load_reg_507.read();
}

void buffer_func1_C7::thread_C_mid_4_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        C_mid_4_we0 = ap_const_logic_1;
    } else {
        C_mid_4_we0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_mid_5_address0() {
    C_mid_5_address0 = C_mid_5_addr_reg_474.read();
}

void buffer_func1_C7::thread_C_mid_5_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        C_mid_5_ce0 = ap_const_logic_1;
    } else {
        C_mid_5_ce0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_mid_5_d0() {
    C_mid_5_d0 = C_input_5_load_reg_512.read();
}

void buffer_func1_C7::thread_C_mid_5_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        C_mid_5_we0 = ap_const_logic_1;
    } else {
        C_mid_5_we0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_mid_6_address0() {
    C_mid_6_address0 = C_mid_6_addr_reg_479.read();
}

void buffer_func1_C7::thread_C_mid_6_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        C_mid_6_ce0 = ap_const_logic_1;
    } else {
        C_mid_6_ce0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_mid_6_d0() {
    C_mid_6_d0 = C_input_6_load_reg_517.read();
}

void buffer_func1_C7::thread_C_mid_6_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        C_mid_6_we0 = ap_const_logic_1;
    } else {
        C_mid_6_we0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_mid_7_address0() {
    C_mid_7_address0 = C_mid_7_addr_reg_484.read();
}

void buffer_func1_C7::thread_C_mid_7_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        C_mid_7_ce0 = ap_const_logic_1;
    } else {
        C_mid_7_ce0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_C_mid_7_d0() {
    C_mid_7_d0 = C_input_7_load_reg_522.read();
}

void buffer_func1_C7::thread_C_mid_7_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        C_mid_7_we0 = ap_const_logic_1;
    } else {
        C_mid_7_we0 = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void buffer_func1_C7::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void buffer_func1_C7::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void buffer_func1_C7::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void buffer_func1_C7::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void buffer_func1_C7::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void buffer_func1_C7::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void buffer_func1_C7::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void buffer_func1_C7::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(exitcond1_fu_289_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_289_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void buffer_func1_C7::thread_exitcond1_fu_289_p2() {
    exitcond1_fu_289_p2 = (!j_reg_266.read().is_01() || !ap_const_lv5_18.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_266.read() == ap_const_lv5_18);
}

void buffer_func1_C7::thread_exitcond_2_fu_361_p2() {
    exitcond_2_fu_361_p2 = (!k_10_s_fu_355_p2.read().is_01() || !ap_const_lv5_12.is_01())? sc_lv<1>(): sc_lv<1>(k_10_s_fu_355_p2.read() == ap_const_lv5_12);
}

void buffer_func1_C7::thread_j_4_fu_295_p2() {
    j_4_fu_295_p2 = (!j_reg_266.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(j_reg_266.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void buffer_func1_C7::thread_k_10_7_fu_367_p2() {
    k_10_7_fu_367_p2 = (!k_reg_277.read().is_01() || !ap_const_lv5_8.is_01())? sc_lv<5>(): (sc_biguint<5>(k_reg_277.read()) + sc_biguint<5>(ap_const_lv5_8));
}

void buffer_func1_C7::thread_k_10_s_fu_355_p2() {
    k_10_s_fu_355_p2 = (k_reg_277.read() | ap_const_lv5_2);
}

void buffer_func1_C7::thread_newIndex_fu_305_p4() {
    newIndex_fu_305_p4 = k_reg_277.read().range(4, 3);
}

void buffer_func1_C7::thread_p_shl1_cast_fu_335_p1() {
    p_shl1_cast_fu_335_p1 = esl_zext<8,5>(tmp_26_fu_327_p3.read());
}

void buffer_func1_C7::thread_p_shl_cast_fu_323_p1() {
    p_shl_cast_fu_323_p1 = esl_zext<8,7>(tmp_s_fu_315_p3.read());
}

void buffer_func1_C7::thread_tmp_26_fu_327_p3() {
    tmp_26_fu_327_p3 = esl_concat<2,3>(newIndex_fu_305_p4.read(), ap_const_lv3_0);
}

void buffer_func1_C7::thread_tmp_27_fu_339_p2() {
    tmp_27_fu_339_p2 = (!p_shl_cast_fu_323_p1.read().is_01() || !p_shl1_cast_fu_335_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(p_shl_cast_fu_323_p1.read()) - sc_biguint<8>(p_shl1_cast_fu_335_p1.read()));
}

void buffer_func1_C7::thread_tmp_28_fu_345_p2() {
    tmp_28_fu_345_p2 = (!tmp_27_fu_339_p2.read().is_01() || !tmp_cast_reg_381.read().is_01())? sc_lv<8>(): (sc_biguint<8>(tmp_27_fu_339_p2.read()) + sc_biguint<8>(tmp_cast_reg_381.read()));
}

void buffer_func1_C7::thread_tmp_70_cast_fu_350_p1() {
    tmp_70_cast_fu_350_p1 = esl_sext<64,8>(tmp_28_reg_386.read());
}

void buffer_func1_C7::thread_tmp_cast_fu_301_p1() {
    tmp_cast_fu_301_p1 = esl_zext<8,5>(j_reg_266.read());
}

void buffer_func1_C7::thread_tmp_s_fu_315_p3() {
    tmp_s_fu_315_p3 = esl_concat<2,5>(newIndex_fu_305_p4.read(), ap_const_lv5_0);
}

void buffer_func1_C7::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_289_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(exitcond_2_fu_361_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXX";
            break;
    }
}

}

