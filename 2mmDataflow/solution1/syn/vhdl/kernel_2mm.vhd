-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_2mm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    A_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_0_ce0 : OUT STD_LOGIC;
    A_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_0_we0 : OUT STD_LOGIC;
    A_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_0_ce1 : OUT STD_LOGIC;
    A_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_0_we1 : OUT STD_LOGIC;
    A_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_1_ce0 : OUT STD_LOGIC;
    A_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_we0 : OUT STD_LOGIC;
    A_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_1_ce1 : OUT STD_LOGIC;
    A_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_we1 : OUT STD_LOGIC;
    B_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_0_ce0 : OUT STD_LOGIC;
    B_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_we0 : OUT STD_LOGIC;
    B_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_0_ce1 : OUT STD_LOGIC;
    B_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_we1 : OUT STD_LOGIC;
    B_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_1_ce0 : OUT STD_LOGIC;
    B_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_we0 : OUT STD_LOGIC;
    B_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_1_ce1 : OUT STD_LOGIC;
    B_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_we1 : OUT STD_LOGIC;
    C_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_0_ce0 : OUT STD_LOGIC;
    C_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_0_we0 : OUT STD_LOGIC;
    C_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_0_ce1 : OUT STD_LOGIC;
    C_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_0_we1 : OUT STD_LOGIC;
    C_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_1_ce0 : OUT STD_LOGIC;
    C_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_1_we0 : OUT STD_LOGIC;
    C_1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_1_ce1 : OUT STD_LOGIC;
    C_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_1_we1 : OUT STD_LOGIC;
    C_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_2_ce0 : OUT STD_LOGIC;
    C_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_2_we0 : OUT STD_LOGIC;
    C_2_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_2_ce1 : OUT STD_LOGIC;
    C_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_2_we1 : OUT STD_LOGIC;
    C_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_3_ce0 : OUT STD_LOGIC;
    C_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_3_we0 : OUT STD_LOGIC;
    C_3_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_3_ce1 : OUT STD_LOGIC;
    C_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_3_we1 : OUT STD_LOGIC;
    C_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_4_ce0 : OUT STD_LOGIC;
    C_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_4_we0 : OUT STD_LOGIC;
    C_4_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_4_ce1 : OUT STD_LOGIC;
    C_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_4_we1 : OUT STD_LOGIC;
    C_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_5_ce0 : OUT STD_LOGIC;
    C_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_5_we0 : OUT STD_LOGIC;
    C_5_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_5_ce1 : OUT STD_LOGIC;
    C_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_5_we1 : OUT STD_LOGIC;
    C_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_6_ce0 : OUT STD_LOGIC;
    C_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_6_we0 : OUT STD_LOGIC;
    C_6_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_6_ce1 : OUT STD_LOGIC;
    C_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_6_we1 : OUT STD_LOGIC;
    C_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_7_ce0 : OUT STD_LOGIC;
    C_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_7_we0 : OUT STD_LOGIC;
    C_7_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_7_ce1 : OUT STD_LOGIC;
    C_7_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_7_we1 : OUT STD_LOGIC;
    D_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    D_ce0 : OUT STD_LOGIC;
    D_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    D_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    D_we0 : OUT STD_LOGIC;
    D_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    D_ce1 : OUT STD_LOGIC;
    D_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    D_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    D_we1 : OUT STD_LOGIC;
    D_output_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    D_output_ce0 : OUT STD_LOGIC;
    D_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    D_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    D_output_we0 : OUT STD_LOGIC;
    D_output_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    D_output_ce1 : OUT STD_LOGIC;
    D_output_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    D_output_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    D_output_we1 : OUT STD_LOGIC;
    A_0_empty_n : IN STD_LOGIC;
    A_0_read : OUT STD_LOGIC;
    A_1_empty_n : IN STD_LOGIC;
    A_1_read : OUT STD_LOGIC;
    B_0_empty_n : IN STD_LOGIC;
    B_0_read : OUT STD_LOGIC;
    B_1_empty_n : IN STD_LOGIC;
    B_1_read : OUT STD_LOGIC;
    C_0_empty_n : IN STD_LOGIC;
    C_0_read : OUT STD_LOGIC;
    C_1_empty_n : IN STD_LOGIC;
    C_1_read : OUT STD_LOGIC;
    C_2_empty_n : IN STD_LOGIC;
    C_2_read : OUT STD_LOGIC;
    C_3_empty_n : IN STD_LOGIC;
    C_3_read : OUT STD_LOGIC;
    C_4_empty_n : IN STD_LOGIC;
    C_4_read : OUT STD_LOGIC;
    C_5_empty_n : IN STD_LOGIC;
    C_5_read : OUT STD_LOGIC;
    C_6_empty_n : IN STD_LOGIC;
    C_6_read : OUT STD_LOGIC;
    C_7_empty_n : IN STD_LOGIC;
    C_7_read : OUT STD_LOGIC;
    D_empty_n : IN STD_LOGIC;
    D_read : OUT STD_LOGIC;
    D_output_full_n : IN STD_LOGIC;
    D_output_write : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of kernel_2mm is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal D_mid_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_mid_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_mid_0_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_mid_0_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_mid_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_mid_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_mid_2_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_mid_2_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_mid_3_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_mid_3_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_mid_4_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_mid_4_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_mid_5_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_mid_5_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_mid_6_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_mid_6_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_mid_7_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_mid_7_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid_0_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid_0_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid_2_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid_2_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid_3_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid_3_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid_4_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid_4_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid_5_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid_5_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid_6_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid_6_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid_7_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid_7_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal func15_U0_ap_start : STD_LOGIC;
    signal func15_U0_ap_done : STD_LOGIC;
    signal func15_U0_ap_continue : STD_LOGIC;
    signal func15_U0_ap_idle : STD_LOGIC;
    signal func15_U0_ap_ready : STD_LOGIC;
    signal func15_U0_A_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal func15_U0_A_0_ce0 : STD_LOGIC;
    signal func15_U0_A_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal func15_U0_A_1_ce0 : STD_LOGIC;
    signal func15_U0_B_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal func15_U0_B_0_ce0 : STD_LOGIC;
    signal func15_U0_B_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal func15_U0_B_1_ce0 : STD_LOGIC;
    signal func15_U0_C_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal func15_U0_C_0_ce0 : STD_LOGIC;
    signal func15_U0_C_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal func15_U0_C_1_ce0 : STD_LOGIC;
    signal func15_U0_C_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func15_U0_C_2_ce0 : STD_LOGIC;
    signal func15_U0_C_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func15_U0_C_3_ce0 : STD_LOGIC;
    signal func15_U0_C_4_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func15_U0_C_4_ce0 : STD_LOGIC;
    signal func15_U0_C_5_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func15_U0_C_5_ce0 : STD_LOGIC;
    signal func15_U0_C_6_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func15_U0_C_6_ce0 : STD_LOGIC;
    signal func15_U0_C_7_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func15_U0_C_7_ce0 : STD_LOGIC;
    signal func15_U0_D_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal func15_U0_D_ce0 : STD_LOGIC;
    signal func15_U0_tmp_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func15_U0_tmp_0_ce0 : STD_LOGIC;
    signal func15_U0_tmp_0_we0 : STD_LOGIC;
    signal func15_U0_tmp_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal func15_U0_tmp_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func15_U0_tmp_1_ce0 : STD_LOGIC;
    signal func15_U0_tmp_1_we0 : STD_LOGIC;
    signal func15_U0_tmp_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal func15_U0_tmp_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal func15_U0_tmp_2_ce0 : STD_LOGIC;
    signal func15_U0_tmp_2_we0 : STD_LOGIC;
    signal func15_U0_tmp_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal func15_U0_tmp_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal func15_U0_tmp_3_ce0 : STD_LOGIC;
    signal func15_U0_tmp_3_we0 : STD_LOGIC;
    signal func15_U0_tmp_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal func15_U0_tmp_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal func15_U0_tmp_4_ce0 : STD_LOGIC;
    signal func15_U0_tmp_4_we0 : STD_LOGIC;
    signal func15_U0_tmp_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal func15_U0_tmp_5_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal func15_U0_tmp_5_ce0 : STD_LOGIC;
    signal func15_U0_tmp_5_we0 : STD_LOGIC;
    signal func15_U0_tmp_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal func15_U0_tmp_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal func15_U0_tmp_6_ce0 : STD_LOGIC;
    signal func15_U0_tmp_6_we0 : STD_LOGIC;
    signal func15_U0_tmp_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal func15_U0_tmp_7_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal func15_U0_tmp_7_ce0 : STD_LOGIC;
    signal func15_U0_tmp_7_we0 : STD_LOGIC;
    signal func15_U0_tmp_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal func15_U0_C_mid_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal func15_U0_C_mid_0_ce0 : STD_LOGIC;
    signal func15_U0_C_mid_0_we0 : STD_LOGIC;
    signal func15_U0_C_mid_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal func15_U0_C_mid_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal func15_U0_C_mid_1_ce0 : STD_LOGIC;
    signal func15_U0_C_mid_1_we0 : STD_LOGIC;
    signal func15_U0_C_mid_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal func15_U0_C_mid_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func15_U0_C_mid_2_ce0 : STD_LOGIC;
    signal func15_U0_C_mid_2_we0 : STD_LOGIC;
    signal func15_U0_C_mid_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal func15_U0_C_mid_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func15_U0_C_mid_3_ce0 : STD_LOGIC;
    signal func15_U0_C_mid_3_we0 : STD_LOGIC;
    signal func15_U0_C_mid_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal func15_U0_C_mid_4_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func15_U0_C_mid_4_ce0 : STD_LOGIC;
    signal func15_U0_C_mid_4_we0 : STD_LOGIC;
    signal func15_U0_C_mid_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal func15_U0_C_mid_5_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func15_U0_C_mid_5_ce0 : STD_LOGIC;
    signal func15_U0_C_mid_5_we0 : STD_LOGIC;
    signal func15_U0_C_mid_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal func15_U0_C_mid_6_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func15_U0_C_mid_6_ce0 : STD_LOGIC;
    signal func15_U0_C_mid_6_we0 : STD_LOGIC;
    signal func15_U0_C_mid_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal func15_U0_C_mid_7_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func15_U0_C_mid_7_ce0 : STD_LOGIC;
    signal func15_U0_C_mid_7_we0 : STD_LOGIC;
    signal func15_U0_C_mid_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal func15_U0_D_mid_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal func15_U0_D_mid_ce0 : STD_LOGIC;
    signal func15_U0_D_mid_we0 : STD_LOGIC;
    signal func15_U0_D_mid_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal func15_U0_A_0_full_n : STD_LOGIC;
    signal func15_U0_A_0_write : STD_LOGIC;
    signal func15_U0_A_1_full_n : STD_LOGIC;
    signal func15_U0_A_1_write : STD_LOGIC;
    signal func15_U0_B_0_full_n : STD_LOGIC;
    signal func15_U0_B_0_write : STD_LOGIC;
    signal func15_U0_B_1_full_n : STD_LOGIC;
    signal func15_U0_B_1_write : STD_LOGIC;
    signal func15_U0_C_0_full_n : STD_LOGIC;
    signal func15_U0_C_0_write : STD_LOGIC;
    signal func15_U0_C_1_full_n : STD_LOGIC;
    signal func15_U0_C_1_write : STD_LOGIC;
    signal func15_U0_C_2_full_n : STD_LOGIC;
    signal func15_U0_C_2_write : STD_LOGIC;
    signal func15_U0_C_3_full_n : STD_LOGIC;
    signal func15_U0_C_3_write : STD_LOGIC;
    signal func15_U0_C_4_full_n : STD_LOGIC;
    signal func15_U0_C_4_write : STD_LOGIC;
    signal func15_U0_C_5_full_n : STD_LOGIC;
    signal func15_U0_C_5_write : STD_LOGIC;
    signal func15_U0_C_6_full_n : STD_LOGIC;
    signal func15_U0_C_6_write : STD_LOGIC;
    signal func15_U0_C_7_full_n : STD_LOGIC;
    signal func15_U0_C_7_write : STD_LOGIC;
    signal func15_U0_D_full_n : STD_LOGIC;
    signal func15_U0_D_write : STD_LOGIC;
    signal ap_channel_done_D_mid : STD_LOGIC;
    signal func15_U0_D_mid_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_D_mid : STD_LOGIC := '0';
    signal ap_sync_channel_write_D_mid : STD_LOGIC;
    signal ap_channel_done_C_mid_7 : STD_LOGIC;
    signal func15_U0_C_mid_7_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_C_mid_7 : STD_LOGIC := '0';
    signal ap_sync_channel_write_C_mid_7 : STD_LOGIC;
    signal ap_channel_done_C_mid_6 : STD_LOGIC;
    signal func15_U0_C_mid_6_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_C_mid_6 : STD_LOGIC := '0';
    signal ap_sync_channel_write_C_mid_6 : STD_LOGIC;
    signal ap_channel_done_C_mid_5 : STD_LOGIC;
    signal func15_U0_C_mid_5_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_C_mid_5 : STD_LOGIC := '0';
    signal ap_sync_channel_write_C_mid_5 : STD_LOGIC;
    signal ap_channel_done_C_mid_4 : STD_LOGIC;
    signal func15_U0_C_mid_4_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_C_mid_4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_C_mid_4 : STD_LOGIC;
    signal ap_channel_done_C_mid_3 : STD_LOGIC;
    signal func15_U0_C_mid_3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_C_mid_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_C_mid_3 : STD_LOGIC;
    signal ap_channel_done_C_mid_2 : STD_LOGIC;
    signal func15_U0_C_mid_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_C_mid_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_C_mid_2 : STD_LOGIC;
    signal ap_channel_done_C_mid_1 : STD_LOGIC;
    signal func15_U0_C_mid_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_C_mid_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_C_mid_1 : STD_LOGIC;
    signal ap_channel_done_C_mid_0 : STD_LOGIC;
    signal func15_U0_C_mid_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_C_mid_0 : STD_LOGIC := '0';
    signal ap_sync_channel_write_C_mid_0 : STD_LOGIC;
    signal ap_channel_done_tmp_mid_7 : STD_LOGIC;
    signal func15_U0_tmp_7_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp_mid_7 : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp_mid_7 : STD_LOGIC;
    signal ap_channel_done_tmp_mid_6 : STD_LOGIC;
    signal func15_U0_tmp_6_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp_mid_6 : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp_mid_6 : STD_LOGIC;
    signal ap_channel_done_tmp_mid_5 : STD_LOGIC;
    signal func15_U0_tmp_5_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp_mid_5 : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp_mid_5 : STD_LOGIC;
    signal ap_channel_done_tmp_mid_4 : STD_LOGIC;
    signal func15_U0_tmp_4_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp_mid_4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp_mid_4 : STD_LOGIC;
    signal ap_channel_done_tmp_mid_3 : STD_LOGIC;
    signal func15_U0_tmp_3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp_mid_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp_mid_3 : STD_LOGIC;
    signal ap_channel_done_tmp_mid_2 : STD_LOGIC;
    signal func15_U0_tmp_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp_mid_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp_mid_2 : STD_LOGIC;
    signal ap_channel_done_tmp_mid_1 : STD_LOGIC;
    signal func15_U0_tmp_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp_mid_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp_mid_1 : STD_LOGIC;
    signal ap_channel_done_tmp_mid_0 : STD_LOGIC;
    signal func15_U0_tmp_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp_mid_0 : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp_mid_0 : STD_LOGIC;
    signal func24_U0_ap_start : STD_LOGIC;
    signal func24_U0_ap_done : STD_LOGIC;
    signal func24_U0_ap_continue : STD_LOGIC;
    signal func24_U0_ap_idle : STD_LOGIC;
    signal func24_U0_ap_ready : STD_LOGIC;
    signal func24_U0_C_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal func24_U0_C_0_ce0 : STD_LOGIC;
    signal func24_U0_C_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal func24_U0_C_1_ce0 : STD_LOGIC;
    signal func24_U0_C_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func24_U0_C_2_ce0 : STD_LOGIC;
    signal func24_U0_C_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func24_U0_C_3_ce0 : STD_LOGIC;
    signal func24_U0_C_4_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func24_U0_C_4_ce0 : STD_LOGIC;
    signal func24_U0_C_5_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func24_U0_C_5_ce0 : STD_LOGIC;
    signal func24_U0_C_6_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func24_U0_C_6_ce0 : STD_LOGIC;
    signal func24_U0_C_7_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func24_U0_C_7_ce0 : STD_LOGIC;
    signal func24_U0_D_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal func24_U0_D_ce0 : STD_LOGIC;
    signal func24_U0_tmp_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func24_U0_tmp_0_ce0 : STD_LOGIC;
    signal func24_U0_tmp_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal func24_U0_tmp_1_ce0 : STD_LOGIC;
    signal func24_U0_tmp_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal func24_U0_tmp_2_ce0 : STD_LOGIC;
    signal func24_U0_tmp_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal func24_U0_tmp_3_ce0 : STD_LOGIC;
    signal func24_U0_tmp_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal func24_U0_tmp_4_ce0 : STD_LOGIC;
    signal func24_U0_tmp_5_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal func24_U0_tmp_5_ce0 : STD_LOGIC;
    signal func24_U0_tmp_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal func24_U0_tmp_6_ce0 : STD_LOGIC;
    signal func24_U0_tmp_7_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal func24_U0_tmp_7_ce0 : STD_LOGIC;
    signal func24_U0_D_output_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal func24_U0_D_output_ce0 : STD_LOGIC;
    signal func24_U0_D_output_we0 : STD_LOGIC;
    signal func24_U0_D_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal func24_U0_D_output_full_n : STD_LOGIC;
    signal func24_U0_D_output_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal tmp_mid_0_i_full_n : STD_LOGIC;
    signal tmp_mid_0_t_empty_n : STD_LOGIC;
    signal tmp_mid_1_i_full_n : STD_LOGIC;
    signal tmp_mid_1_t_empty_n : STD_LOGIC;
    signal tmp_mid_2_i_full_n : STD_LOGIC;
    signal tmp_mid_2_t_empty_n : STD_LOGIC;
    signal tmp_mid_3_i_full_n : STD_LOGIC;
    signal tmp_mid_3_t_empty_n : STD_LOGIC;
    signal tmp_mid_4_i_full_n : STD_LOGIC;
    signal tmp_mid_4_t_empty_n : STD_LOGIC;
    signal tmp_mid_5_i_full_n : STD_LOGIC;
    signal tmp_mid_5_t_empty_n : STD_LOGIC;
    signal tmp_mid_6_i_full_n : STD_LOGIC;
    signal tmp_mid_6_t_empty_n : STD_LOGIC;
    signal tmp_mid_7_i_full_n : STD_LOGIC;
    signal tmp_mid_7_t_empty_n : STD_LOGIC;
    signal C_mid_0_i_full_n : STD_LOGIC;
    signal C_mid_0_t_empty_n : STD_LOGIC;
    signal C_mid_1_i_full_n : STD_LOGIC;
    signal C_mid_1_t_empty_n : STD_LOGIC;
    signal C_mid_2_i_full_n : STD_LOGIC;
    signal C_mid_2_t_empty_n : STD_LOGIC;
    signal C_mid_3_i_full_n : STD_LOGIC;
    signal C_mid_3_t_empty_n : STD_LOGIC;
    signal C_mid_4_i_full_n : STD_LOGIC;
    signal C_mid_4_t_empty_n : STD_LOGIC;
    signal C_mid_5_i_full_n : STD_LOGIC;
    signal C_mid_5_t_empty_n : STD_LOGIC;
    signal C_mid_6_i_full_n : STD_LOGIC;
    signal C_mid_6_t_empty_n : STD_LOGIC;
    signal C_mid_7_i_full_n : STD_LOGIC;
    signal C_mid_7_t_empty_n : STD_LOGIC;
    signal D_mid_i_full_n : STD_LOGIC;
    signal D_mid_t_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal func15_U0_start_full_n : STD_LOGIC;
    signal func15_U0_start_write : STD_LOGIC;
    signal func24_U0_start_full_n : STD_LOGIC;
    signal func24_U0_start_write : STD_LOGIC;

    component func15 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_0_ce0 : OUT STD_LOGIC;
        A_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_1_ce0 : OUT STD_LOGIC;
        A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_0_ce0 : OUT STD_LOGIC;
        B_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_1_ce0 : OUT STD_LOGIC;
        B_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        C_0_ce0 : OUT STD_LOGIC;
        C_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        C_1_ce0 : OUT STD_LOGIC;
        C_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_2_ce0 : OUT STD_LOGIC;
        C_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_3_ce0 : OUT STD_LOGIC;
        C_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_4_ce0 : OUT STD_LOGIC;
        C_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_5_ce0 : OUT STD_LOGIC;
        C_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_6_ce0 : OUT STD_LOGIC;
        C_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_7_ce0 : OUT STD_LOGIC;
        C_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        D_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        D_ce0 : OUT STD_LOGIC;
        D_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        tmp_0_ce0 : OUT STD_LOGIC;
        tmp_0_we0 : OUT STD_LOGIC;
        tmp_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        tmp_1_ce0 : OUT STD_LOGIC;
        tmp_1_we0 : OUT STD_LOGIC;
        tmp_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tmp_2_ce0 : OUT STD_LOGIC;
        tmp_2_we0 : OUT STD_LOGIC;
        tmp_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tmp_3_ce0 : OUT STD_LOGIC;
        tmp_3_we0 : OUT STD_LOGIC;
        tmp_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tmp_4_ce0 : OUT STD_LOGIC;
        tmp_4_we0 : OUT STD_LOGIC;
        tmp_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tmp_5_ce0 : OUT STD_LOGIC;
        tmp_5_we0 : OUT STD_LOGIC;
        tmp_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tmp_6_ce0 : OUT STD_LOGIC;
        tmp_6_we0 : OUT STD_LOGIC;
        tmp_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tmp_7_ce0 : OUT STD_LOGIC;
        tmp_7_we0 : OUT STD_LOGIC;
        tmp_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_mid_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        C_mid_0_ce0 : OUT STD_LOGIC;
        C_mid_0_we0 : OUT STD_LOGIC;
        C_mid_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_mid_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        C_mid_1_ce0 : OUT STD_LOGIC;
        C_mid_1_we0 : OUT STD_LOGIC;
        C_mid_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_mid_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_mid_2_ce0 : OUT STD_LOGIC;
        C_mid_2_we0 : OUT STD_LOGIC;
        C_mid_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_mid_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_mid_3_ce0 : OUT STD_LOGIC;
        C_mid_3_we0 : OUT STD_LOGIC;
        C_mid_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_mid_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_mid_4_ce0 : OUT STD_LOGIC;
        C_mid_4_we0 : OUT STD_LOGIC;
        C_mid_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_mid_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_mid_5_ce0 : OUT STD_LOGIC;
        C_mid_5_we0 : OUT STD_LOGIC;
        C_mid_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_mid_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_mid_6_ce0 : OUT STD_LOGIC;
        C_mid_6_we0 : OUT STD_LOGIC;
        C_mid_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_mid_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_mid_7_ce0 : OUT STD_LOGIC;
        C_mid_7_we0 : OUT STD_LOGIC;
        C_mid_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        D_mid_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        D_mid_ce0 : OUT STD_LOGIC;
        D_mid_we0 : OUT STD_LOGIC;
        D_mid_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component func24 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        C_0_ce0 : OUT STD_LOGIC;
        C_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        C_1_ce0 : OUT STD_LOGIC;
        C_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_2_ce0 : OUT STD_LOGIC;
        C_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_3_ce0 : OUT STD_LOGIC;
        C_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_4_ce0 : OUT STD_LOGIC;
        C_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_5_ce0 : OUT STD_LOGIC;
        C_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_6_ce0 : OUT STD_LOGIC;
        C_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_7_ce0 : OUT STD_LOGIC;
        C_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        D_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        D_ce0 : OUT STD_LOGIC;
        D_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        tmp_0_ce0 : OUT STD_LOGIC;
        tmp_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        tmp_1_ce0 : OUT STD_LOGIC;
        tmp_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tmp_2_ce0 : OUT STD_LOGIC;
        tmp_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tmp_3_ce0 : OUT STD_LOGIC;
        tmp_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tmp_4_ce0 : OUT STD_LOGIC;
        tmp_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tmp_5_ce0 : OUT STD_LOGIC;
        tmp_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tmp_6_ce0 : OUT STD_LOGIC;
        tmp_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tmp_7_ce0 : OUT STD_LOGIC;
        tmp_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        D_output_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        D_output_ce0 : OUT STD_LOGIC;
        D_output_we0 : OUT STD_LOGIC;
        D_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_2mm_D_mid IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component kernel_2mm_C_mid_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component kernel_2mm_C_mid_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component kernel_2mm_tmp_mig8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;



begin
    D_mid_U : component kernel_2mm_D_mid
    generic map (
        DataWidth => 32,
        AddressRange => 384,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => func15_U0_D_mid_address0,
        i_ce0 => func15_U0_D_mid_ce0,
        i_we0 => func15_U0_D_mid_we0,
        i_d0 => func15_U0_D_mid_d0,
        i_q0 => D_mid_i_q0,
        t_address0 => func24_U0_D_address0,
        t_ce0 => func24_U0_D_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => D_mid_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => D_mid_i_full_n,
        i_write => ap_channel_done_D_mid,
        t_empty_n => D_mid_t_empty_n,
        t_read => func24_U0_ap_ready);

    C_mid_0_U : component kernel_2mm_C_mid_0
    generic map (
        DataWidth => 32,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => func15_U0_C_mid_0_address0,
        i_ce0 => func15_U0_C_mid_0_ce0,
        i_we0 => func15_U0_C_mid_0_we0,
        i_d0 => func15_U0_C_mid_0_d0,
        i_q0 => C_mid_0_i_q0,
        t_address0 => func24_U0_C_0_address0,
        t_ce0 => func24_U0_C_0_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => C_mid_0_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => C_mid_0_i_full_n,
        i_write => ap_channel_done_C_mid_0,
        t_empty_n => C_mid_0_t_empty_n,
        t_read => func24_U0_ap_ready);

    C_mid_1_U : component kernel_2mm_C_mid_0
    generic map (
        DataWidth => 32,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => func15_U0_C_mid_1_address0,
        i_ce0 => func15_U0_C_mid_1_ce0,
        i_we0 => func15_U0_C_mid_1_we0,
        i_d0 => func15_U0_C_mid_1_d0,
        i_q0 => C_mid_1_i_q0,
        t_address0 => func24_U0_C_1_address0,
        t_ce0 => func24_U0_C_1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => C_mid_1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => C_mid_1_i_full_n,
        i_write => ap_channel_done_C_mid_1,
        t_empty_n => C_mid_1_t_empty_n,
        t_read => func24_U0_ap_ready);

    C_mid_2_U : component kernel_2mm_C_mid_2
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => func15_U0_C_mid_2_address0,
        i_ce0 => func15_U0_C_mid_2_ce0,
        i_we0 => func15_U0_C_mid_2_we0,
        i_d0 => func15_U0_C_mid_2_d0,
        i_q0 => C_mid_2_i_q0,
        t_address0 => func24_U0_C_2_address0,
        t_ce0 => func24_U0_C_2_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => C_mid_2_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => C_mid_2_i_full_n,
        i_write => ap_channel_done_C_mid_2,
        t_empty_n => C_mid_2_t_empty_n,
        t_read => func24_U0_ap_ready);

    C_mid_3_U : component kernel_2mm_C_mid_2
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => func15_U0_C_mid_3_address0,
        i_ce0 => func15_U0_C_mid_3_ce0,
        i_we0 => func15_U0_C_mid_3_we0,
        i_d0 => func15_U0_C_mid_3_d0,
        i_q0 => C_mid_3_i_q0,
        t_address0 => func24_U0_C_3_address0,
        t_ce0 => func24_U0_C_3_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => C_mid_3_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => C_mid_3_i_full_n,
        i_write => ap_channel_done_C_mid_3,
        t_empty_n => C_mid_3_t_empty_n,
        t_read => func24_U0_ap_ready);

    C_mid_4_U : component kernel_2mm_C_mid_2
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => func15_U0_C_mid_4_address0,
        i_ce0 => func15_U0_C_mid_4_ce0,
        i_we0 => func15_U0_C_mid_4_we0,
        i_d0 => func15_U0_C_mid_4_d0,
        i_q0 => C_mid_4_i_q0,
        t_address0 => func24_U0_C_4_address0,
        t_ce0 => func24_U0_C_4_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => C_mid_4_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => C_mid_4_i_full_n,
        i_write => ap_channel_done_C_mid_4,
        t_empty_n => C_mid_4_t_empty_n,
        t_read => func24_U0_ap_ready);

    C_mid_5_U : component kernel_2mm_C_mid_2
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => func15_U0_C_mid_5_address0,
        i_ce0 => func15_U0_C_mid_5_ce0,
        i_we0 => func15_U0_C_mid_5_we0,
        i_d0 => func15_U0_C_mid_5_d0,
        i_q0 => C_mid_5_i_q0,
        t_address0 => func24_U0_C_5_address0,
        t_ce0 => func24_U0_C_5_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => C_mid_5_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => C_mid_5_i_full_n,
        i_write => ap_channel_done_C_mid_5,
        t_empty_n => C_mid_5_t_empty_n,
        t_read => func24_U0_ap_ready);

    C_mid_6_U : component kernel_2mm_C_mid_2
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => func15_U0_C_mid_6_address0,
        i_ce0 => func15_U0_C_mid_6_ce0,
        i_we0 => func15_U0_C_mid_6_we0,
        i_d0 => func15_U0_C_mid_6_d0,
        i_q0 => C_mid_6_i_q0,
        t_address0 => func24_U0_C_6_address0,
        t_ce0 => func24_U0_C_6_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => C_mid_6_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => C_mid_6_i_full_n,
        i_write => ap_channel_done_C_mid_6,
        t_empty_n => C_mid_6_t_empty_n,
        t_read => func24_U0_ap_ready);

    C_mid_7_U : component kernel_2mm_C_mid_2
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => func15_U0_C_mid_7_address0,
        i_ce0 => func15_U0_C_mid_7_ce0,
        i_we0 => func15_U0_C_mid_7_we0,
        i_d0 => func15_U0_C_mid_7_d0,
        i_q0 => C_mid_7_i_q0,
        t_address0 => func24_U0_C_7_address0,
        t_ce0 => func24_U0_C_7_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => C_mid_7_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => C_mid_7_i_full_n,
        i_write => ap_channel_done_C_mid_7,
        t_empty_n => C_mid_7_t_empty_n,
        t_read => func24_U0_ap_ready);

    tmp_mid_0_U : component kernel_2mm_C_mid_2
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => func15_U0_tmp_0_address0,
        i_ce0 => func15_U0_tmp_0_ce0,
        i_we0 => func15_U0_tmp_0_we0,
        i_d0 => func15_U0_tmp_0_d0,
        i_q0 => tmp_mid_0_i_q0,
        t_address0 => func24_U0_tmp_0_address0,
        t_ce0 => func24_U0_tmp_0_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => tmp_mid_0_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => tmp_mid_0_i_full_n,
        i_write => ap_channel_done_tmp_mid_0,
        t_empty_n => tmp_mid_0_t_empty_n,
        t_read => func24_U0_ap_ready);

    tmp_mid_1_U : component kernel_2mm_C_mid_2
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => func15_U0_tmp_1_address0,
        i_ce0 => func15_U0_tmp_1_ce0,
        i_we0 => func15_U0_tmp_1_we0,
        i_d0 => func15_U0_tmp_1_d0,
        i_q0 => tmp_mid_1_i_q0,
        t_address0 => func24_U0_tmp_1_address0,
        t_ce0 => func24_U0_tmp_1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => tmp_mid_1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => tmp_mid_1_i_full_n,
        i_write => ap_channel_done_tmp_mid_1,
        t_empty_n => tmp_mid_1_t_empty_n,
        t_read => func24_U0_ap_ready);

    tmp_mid_2_U : component kernel_2mm_tmp_mig8j
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => func15_U0_tmp_2_address0,
        i_ce0 => func15_U0_tmp_2_ce0,
        i_we0 => func15_U0_tmp_2_we0,
        i_d0 => func15_U0_tmp_2_d0,
        i_q0 => tmp_mid_2_i_q0,
        t_address0 => func24_U0_tmp_2_address0,
        t_ce0 => func24_U0_tmp_2_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => tmp_mid_2_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => tmp_mid_2_i_full_n,
        i_write => ap_channel_done_tmp_mid_2,
        t_empty_n => tmp_mid_2_t_empty_n,
        t_read => func24_U0_ap_ready);

    tmp_mid_3_U : component kernel_2mm_tmp_mig8j
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => func15_U0_tmp_3_address0,
        i_ce0 => func15_U0_tmp_3_ce0,
        i_we0 => func15_U0_tmp_3_we0,
        i_d0 => func15_U0_tmp_3_d0,
        i_q0 => tmp_mid_3_i_q0,
        t_address0 => func24_U0_tmp_3_address0,
        t_ce0 => func24_U0_tmp_3_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => tmp_mid_3_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => tmp_mid_3_i_full_n,
        i_write => ap_channel_done_tmp_mid_3,
        t_empty_n => tmp_mid_3_t_empty_n,
        t_read => func24_U0_ap_ready);

    tmp_mid_4_U : component kernel_2mm_tmp_mig8j
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => func15_U0_tmp_4_address0,
        i_ce0 => func15_U0_tmp_4_ce0,
        i_we0 => func15_U0_tmp_4_we0,
        i_d0 => func15_U0_tmp_4_d0,
        i_q0 => tmp_mid_4_i_q0,
        t_address0 => func24_U0_tmp_4_address0,
        t_ce0 => func24_U0_tmp_4_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => tmp_mid_4_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => tmp_mid_4_i_full_n,
        i_write => ap_channel_done_tmp_mid_4,
        t_empty_n => tmp_mid_4_t_empty_n,
        t_read => func24_U0_ap_ready);

    tmp_mid_5_U : component kernel_2mm_tmp_mig8j
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => func15_U0_tmp_5_address0,
        i_ce0 => func15_U0_tmp_5_ce0,
        i_we0 => func15_U0_tmp_5_we0,
        i_d0 => func15_U0_tmp_5_d0,
        i_q0 => tmp_mid_5_i_q0,
        t_address0 => func24_U0_tmp_5_address0,
        t_ce0 => func24_U0_tmp_5_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => tmp_mid_5_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => tmp_mid_5_i_full_n,
        i_write => ap_channel_done_tmp_mid_5,
        t_empty_n => tmp_mid_5_t_empty_n,
        t_read => func24_U0_ap_ready);

    tmp_mid_6_U : component kernel_2mm_tmp_mig8j
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => func15_U0_tmp_6_address0,
        i_ce0 => func15_U0_tmp_6_ce0,
        i_we0 => func15_U0_tmp_6_we0,
        i_d0 => func15_U0_tmp_6_d0,
        i_q0 => tmp_mid_6_i_q0,
        t_address0 => func24_U0_tmp_6_address0,
        t_ce0 => func24_U0_tmp_6_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => tmp_mid_6_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => tmp_mid_6_i_full_n,
        i_write => ap_channel_done_tmp_mid_6,
        t_empty_n => tmp_mid_6_t_empty_n,
        t_read => func24_U0_ap_ready);

    tmp_mid_7_U : component kernel_2mm_tmp_mig8j
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => func15_U0_tmp_7_address0,
        i_ce0 => func15_U0_tmp_7_ce0,
        i_we0 => func15_U0_tmp_7_we0,
        i_d0 => func15_U0_tmp_7_d0,
        i_q0 => tmp_mid_7_i_q0,
        t_address0 => func24_U0_tmp_7_address0,
        t_ce0 => func24_U0_tmp_7_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => tmp_mid_7_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => tmp_mid_7_i_full_n,
        i_write => ap_channel_done_tmp_mid_7,
        t_empty_n => tmp_mid_7_t_empty_n,
        t_read => func24_U0_ap_ready);

    func15_U0 : component func15
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => func15_U0_ap_start,
        ap_done => func15_U0_ap_done,
        ap_continue => func15_U0_ap_continue,
        ap_idle => func15_U0_ap_idle,
        ap_ready => func15_U0_ap_ready,
        A_0_address0 => func15_U0_A_0_address0,
        A_0_ce0 => func15_U0_A_0_ce0,
        A_0_q0 => A_0_q0,
        A_1_address0 => func15_U0_A_1_address0,
        A_1_ce0 => func15_U0_A_1_ce0,
        A_1_q0 => A_1_q0,
        B_0_address0 => func15_U0_B_0_address0,
        B_0_ce0 => func15_U0_B_0_ce0,
        B_0_q0 => B_0_q0,
        B_1_address0 => func15_U0_B_1_address0,
        B_1_ce0 => func15_U0_B_1_ce0,
        B_1_q0 => B_1_q0,
        C_0_address0 => func15_U0_C_0_address0,
        C_0_ce0 => func15_U0_C_0_ce0,
        C_0_q0 => C_0_q0,
        C_1_address0 => func15_U0_C_1_address0,
        C_1_ce0 => func15_U0_C_1_ce0,
        C_1_q0 => C_1_q0,
        C_2_address0 => func15_U0_C_2_address0,
        C_2_ce0 => func15_U0_C_2_ce0,
        C_2_q0 => C_2_q0,
        C_3_address0 => func15_U0_C_3_address0,
        C_3_ce0 => func15_U0_C_3_ce0,
        C_3_q0 => C_3_q0,
        C_4_address0 => func15_U0_C_4_address0,
        C_4_ce0 => func15_U0_C_4_ce0,
        C_4_q0 => C_4_q0,
        C_5_address0 => func15_U0_C_5_address0,
        C_5_ce0 => func15_U0_C_5_ce0,
        C_5_q0 => C_5_q0,
        C_6_address0 => func15_U0_C_6_address0,
        C_6_ce0 => func15_U0_C_6_ce0,
        C_6_q0 => C_6_q0,
        C_7_address0 => func15_U0_C_7_address0,
        C_7_ce0 => func15_U0_C_7_ce0,
        C_7_q0 => C_7_q0,
        D_address0 => func15_U0_D_address0,
        D_ce0 => func15_U0_D_ce0,
        D_q0 => D_q0,
        tmp_0_address0 => func15_U0_tmp_0_address0,
        tmp_0_ce0 => func15_U0_tmp_0_ce0,
        tmp_0_we0 => func15_U0_tmp_0_we0,
        tmp_0_d0 => func15_U0_tmp_0_d0,
        tmp_0_q0 => tmp_mid_0_i_q0,
        tmp_1_address0 => func15_U0_tmp_1_address0,
        tmp_1_ce0 => func15_U0_tmp_1_ce0,
        tmp_1_we0 => func15_U0_tmp_1_we0,
        tmp_1_d0 => func15_U0_tmp_1_d0,
        tmp_1_q0 => tmp_mid_1_i_q0,
        tmp_2_address0 => func15_U0_tmp_2_address0,
        tmp_2_ce0 => func15_U0_tmp_2_ce0,
        tmp_2_we0 => func15_U0_tmp_2_we0,
        tmp_2_d0 => func15_U0_tmp_2_d0,
        tmp_2_q0 => tmp_mid_2_i_q0,
        tmp_3_address0 => func15_U0_tmp_3_address0,
        tmp_3_ce0 => func15_U0_tmp_3_ce0,
        tmp_3_we0 => func15_U0_tmp_3_we0,
        tmp_3_d0 => func15_U0_tmp_3_d0,
        tmp_3_q0 => tmp_mid_3_i_q0,
        tmp_4_address0 => func15_U0_tmp_4_address0,
        tmp_4_ce0 => func15_U0_tmp_4_ce0,
        tmp_4_we0 => func15_U0_tmp_4_we0,
        tmp_4_d0 => func15_U0_tmp_4_d0,
        tmp_4_q0 => tmp_mid_4_i_q0,
        tmp_5_address0 => func15_U0_tmp_5_address0,
        tmp_5_ce0 => func15_U0_tmp_5_ce0,
        tmp_5_we0 => func15_U0_tmp_5_we0,
        tmp_5_d0 => func15_U0_tmp_5_d0,
        tmp_5_q0 => tmp_mid_5_i_q0,
        tmp_6_address0 => func15_U0_tmp_6_address0,
        tmp_6_ce0 => func15_U0_tmp_6_ce0,
        tmp_6_we0 => func15_U0_tmp_6_we0,
        tmp_6_d0 => func15_U0_tmp_6_d0,
        tmp_6_q0 => tmp_mid_6_i_q0,
        tmp_7_address0 => func15_U0_tmp_7_address0,
        tmp_7_ce0 => func15_U0_tmp_7_ce0,
        tmp_7_we0 => func15_U0_tmp_7_we0,
        tmp_7_d0 => func15_U0_tmp_7_d0,
        tmp_7_q0 => tmp_mid_7_i_q0,
        C_mid_0_address0 => func15_U0_C_mid_0_address0,
        C_mid_0_ce0 => func15_U0_C_mid_0_ce0,
        C_mid_0_we0 => func15_U0_C_mid_0_we0,
        C_mid_0_d0 => func15_U0_C_mid_0_d0,
        C_mid_1_address0 => func15_U0_C_mid_1_address0,
        C_mid_1_ce0 => func15_U0_C_mid_1_ce0,
        C_mid_1_we0 => func15_U0_C_mid_1_we0,
        C_mid_1_d0 => func15_U0_C_mid_1_d0,
        C_mid_2_address0 => func15_U0_C_mid_2_address0,
        C_mid_2_ce0 => func15_U0_C_mid_2_ce0,
        C_mid_2_we0 => func15_U0_C_mid_2_we0,
        C_mid_2_d0 => func15_U0_C_mid_2_d0,
        C_mid_3_address0 => func15_U0_C_mid_3_address0,
        C_mid_3_ce0 => func15_U0_C_mid_3_ce0,
        C_mid_3_we0 => func15_U0_C_mid_3_we0,
        C_mid_3_d0 => func15_U0_C_mid_3_d0,
        C_mid_4_address0 => func15_U0_C_mid_4_address0,
        C_mid_4_ce0 => func15_U0_C_mid_4_ce0,
        C_mid_4_we0 => func15_U0_C_mid_4_we0,
        C_mid_4_d0 => func15_U0_C_mid_4_d0,
        C_mid_5_address0 => func15_U0_C_mid_5_address0,
        C_mid_5_ce0 => func15_U0_C_mid_5_ce0,
        C_mid_5_we0 => func15_U0_C_mid_5_we0,
        C_mid_5_d0 => func15_U0_C_mid_5_d0,
        C_mid_6_address0 => func15_U0_C_mid_6_address0,
        C_mid_6_ce0 => func15_U0_C_mid_6_ce0,
        C_mid_6_we0 => func15_U0_C_mid_6_we0,
        C_mid_6_d0 => func15_U0_C_mid_6_d0,
        C_mid_7_address0 => func15_U0_C_mid_7_address0,
        C_mid_7_ce0 => func15_U0_C_mid_7_ce0,
        C_mid_7_we0 => func15_U0_C_mid_7_we0,
        C_mid_7_d0 => func15_U0_C_mid_7_d0,
        D_mid_address0 => func15_U0_D_mid_address0,
        D_mid_ce0 => func15_U0_D_mid_ce0,
        D_mid_we0 => func15_U0_D_mid_we0,
        D_mid_d0 => func15_U0_D_mid_d0);

    func24_U0 : component func24
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => func24_U0_ap_start,
        ap_done => func24_U0_ap_done,
        ap_continue => func24_U0_ap_continue,
        ap_idle => func24_U0_ap_idle,
        ap_ready => func24_U0_ap_ready,
        C_0_address0 => func24_U0_C_0_address0,
        C_0_ce0 => func24_U0_C_0_ce0,
        C_0_q0 => C_mid_0_t_q0,
        C_1_address0 => func24_U0_C_1_address0,
        C_1_ce0 => func24_U0_C_1_ce0,
        C_1_q0 => C_mid_1_t_q0,
        C_2_address0 => func24_U0_C_2_address0,
        C_2_ce0 => func24_U0_C_2_ce0,
        C_2_q0 => C_mid_2_t_q0,
        C_3_address0 => func24_U0_C_3_address0,
        C_3_ce0 => func24_U0_C_3_ce0,
        C_3_q0 => C_mid_3_t_q0,
        C_4_address0 => func24_U0_C_4_address0,
        C_4_ce0 => func24_U0_C_4_ce0,
        C_4_q0 => C_mid_4_t_q0,
        C_5_address0 => func24_U0_C_5_address0,
        C_5_ce0 => func24_U0_C_5_ce0,
        C_5_q0 => C_mid_5_t_q0,
        C_6_address0 => func24_U0_C_6_address0,
        C_6_ce0 => func24_U0_C_6_ce0,
        C_6_q0 => C_mid_6_t_q0,
        C_7_address0 => func24_U0_C_7_address0,
        C_7_ce0 => func24_U0_C_7_ce0,
        C_7_q0 => C_mid_7_t_q0,
        D_address0 => func24_U0_D_address0,
        D_ce0 => func24_U0_D_ce0,
        D_q0 => D_mid_t_q0,
        tmp_0_address0 => func24_U0_tmp_0_address0,
        tmp_0_ce0 => func24_U0_tmp_0_ce0,
        tmp_0_q0 => tmp_mid_0_t_q0,
        tmp_1_address0 => func24_U0_tmp_1_address0,
        tmp_1_ce0 => func24_U0_tmp_1_ce0,
        tmp_1_q0 => tmp_mid_1_t_q0,
        tmp_2_address0 => func24_U0_tmp_2_address0,
        tmp_2_ce0 => func24_U0_tmp_2_ce0,
        tmp_2_q0 => tmp_mid_2_t_q0,
        tmp_3_address0 => func24_U0_tmp_3_address0,
        tmp_3_ce0 => func24_U0_tmp_3_ce0,
        tmp_3_q0 => tmp_mid_3_t_q0,
        tmp_4_address0 => func24_U0_tmp_4_address0,
        tmp_4_ce0 => func24_U0_tmp_4_ce0,
        tmp_4_q0 => tmp_mid_4_t_q0,
        tmp_5_address0 => func24_U0_tmp_5_address0,
        tmp_5_ce0 => func24_U0_tmp_5_ce0,
        tmp_5_q0 => tmp_mid_5_t_q0,
        tmp_6_address0 => func24_U0_tmp_6_address0,
        tmp_6_ce0 => func24_U0_tmp_6_ce0,
        tmp_6_q0 => tmp_mid_6_t_q0,
        tmp_7_address0 => func24_U0_tmp_7_address0,
        tmp_7_ce0 => func24_U0_tmp_7_ce0,
        tmp_7_q0 => tmp_mid_7_t_q0,
        D_output_address0 => func24_U0_D_output_address0,
        D_output_ce0 => func24_U0_D_output_ce0,
        D_output_we0 => func24_U0_D_output_we0,
        D_output_d0 => func24_U0_D_output_d0);





    ap_sync_reg_channel_write_C_mid_0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_C_mid_0 <= ap_const_logic_0;
            else
                if (((func15_U0_ap_done and func15_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_C_mid_0 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_C_mid_0 <= ap_sync_channel_write_C_mid_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_C_mid_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_C_mid_1 <= ap_const_logic_0;
            else
                if (((func15_U0_ap_done and func15_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_C_mid_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_C_mid_1 <= ap_sync_channel_write_C_mid_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_C_mid_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_C_mid_2 <= ap_const_logic_0;
            else
                if (((func15_U0_ap_done and func15_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_C_mid_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_C_mid_2 <= ap_sync_channel_write_C_mid_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_C_mid_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_C_mid_3 <= ap_const_logic_0;
            else
                if (((func15_U0_ap_done and func15_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_C_mid_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_C_mid_3 <= ap_sync_channel_write_C_mid_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_C_mid_4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_C_mid_4 <= ap_const_logic_0;
            else
                if (((func15_U0_ap_done and func15_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_C_mid_4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_C_mid_4 <= ap_sync_channel_write_C_mid_4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_C_mid_5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_C_mid_5 <= ap_const_logic_0;
            else
                if (((func15_U0_ap_done and func15_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_C_mid_5 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_C_mid_5 <= ap_sync_channel_write_C_mid_5;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_C_mid_6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_C_mid_6 <= ap_const_logic_0;
            else
                if (((func15_U0_ap_done and func15_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_C_mid_6 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_C_mid_6 <= ap_sync_channel_write_C_mid_6;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_C_mid_7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_C_mid_7 <= ap_const_logic_0;
            else
                if (((func15_U0_ap_done and func15_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_C_mid_7 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_C_mid_7 <= ap_sync_channel_write_C_mid_7;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_D_mid_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_D_mid <= ap_const_logic_0;
            else
                if (((func15_U0_ap_done and func15_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_D_mid <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_D_mid <= ap_sync_channel_write_D_mid;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp_mid_0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_tmp_mid_0 <= ap_const_logic_0;
            else
                if (((func15_U0_ap_done and func15_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_tmp_mid_0 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp_mid_0 <= ap_sync_channel_write_tmp_mid_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp_mid_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_tmp_mid_1 <= ap_const_logic_0;
            else
                if (((func15_U0_ap_done and func15_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_tmp_mid_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp_mid_1 <= ap_sync_channel_write_tmp_mid_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp_mid_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_tmp_mid_2 <= ap_const_logic_0;
            else
                if (((func15_U0_ap_done and func15_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_tmp_mid_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp_mid_2 <= ap_sync_channel_write_tmp_mid_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp_mid_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_tmp_mid_3 <= ap_const_logic_0;
            else
                if (((func15_U0_ap_done and func15_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_tmp_mid_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp_mid_3 <= ap_sync_channel_write_tmp_mid_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp_mid_4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_tmp_mid_4 <= ap_const_logic_0;
            else
                if (((func15_U0_ap_done and func15_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_tmp_mid_4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp_mid_4 <= ap_sync_channel_write_tmp_mid_4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp_mid_5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_tmp_mid_5 <= ap_const_logic_0;
            else
                if (((func15_U0_ap_done and func15_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_tmp_mid_5 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp_mid_5 <= ap_sync_channel_write_tmp_mid_5;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp_mid_6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_tmp_mid_6 <= ap_const_logic_0;
            else
                if (((func15_U0_ap_done and func15_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_tmp_mid_6 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp_mid_6 <= ap_sync_channel_write_tmp_mid_6;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp_mid_7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_tmp_mid_7 <= ap_const_logic_0;
            else
                if (((func15_U0_ap_done and func15_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_tmp_mid_7 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp_mid_7 <= ap_sync_channel_write_tmp_mid_7;
                end if; 
            end if;
        end if;
    end process;

    A_0_address0 <= func15_U0_A_0_address0;
    A_0_address1 <= ap_const_lv8_0;
    A_0_ce0 <= func15_U0_A_0_ce0;
    A_0_ce1 <= ap_const_logic_0;
    A_0_d0 <= ap_const_lv32_0;
    A_0_d1 <= ap_const_lv32_0;
    A_0_read <= func15_U0_A_0_write;
    A_0_we0 <= ap_const_logic_0;
    A_0_we1 <= ap_const_logic_0;
    A_1_address0 <= func15_U0_A_1_address0;
    A_1_address1 <= ap_const_lv8_0;
    A_1_ce0 <= func15_U0_A_1_ce0;
    A_1_ce1 <= ap_const_logic_0;
    A_1_d0 <= ap_const_lv32_0;
    A_1_d1 <= ap_const_lv32_0;
    A_1_read <= func15_U0_A_1_write;
    A_1_we0 <= ap_const_logic_0;
    A_1_we1 <= ap_const_logic_0;
    B_0_address0 <= func15_U0_B_0_address0;
    B_0_address1 <= ap_const_lv8_0;
    B_0_ce0 <= func15_U0_B_0_ce0;
    B_0_ce1 <= ap_const_logic_0;
    B_0_d0 <= ap_const_lv32_0;
    B_0_d1 <= ap_const_lv32_0;
    B_0_read <= func15_U0_B_0_write;
    B_0_we0 <= ap_const_logic_0;
    B_0_we1 <= ap_const_logic_0;
    B_1_address0 <= func15_U0_B_1_address0;
    B_1_address1 <= ap_const_lv8_0;
    B_1_ce0 <= func15_U0_B_1_ce0;
    B_1_ce1 <= ap_const_logic_0;
    B_1_d0 <= ap_const_lv32_0;
    B_1_d1 <= ap_const_lv32_0;
    B_1_read <= func15_U0_B_1_write;
    B_1_we0 <= ap_const_logic_0;
    B_1_we1 <= ap_const_logic_0;
    C_0_address0 <= func15_U0_C_0_address0;
    C_0_address1 <= ap_const_lv7_0;
    C_0_ce0 <= func15_U0_C_0_ce0;
    C_0_ce1 <= ap_const_logic_0;
    C_0_d0 <= ap_const_lv32_0;
    C_0_d1 <= ap_const_lv32_0;
    C_0_read <= func15_U0_C_0_write;
    C_0_we0 <= ap_const_logic_0;
    C_0_we1 <= ap_const_logic_0;
    C_1_address0 <= func15_U0_C_1_address0;
    C_1_address1 <= ap_const_lv7_0;
    C_1_ce0 <= func15_U0_C_1_ce0;
    C_1_ce1 <= ap_const_logic_0;
    C_1_d0 <= ap_const_lv32_0;
    C_1_d1 <= ap_const_lv32_0;
    C_1_read <= func15_U0_C_1_write;
    C_1_we0 <= ap_const_logic_0;
    C_1_we1 <= ap_const_logic_0;
    C_2_address0 <= func15_U0_C_2_address0;
    C_2_address1 <= ap_const_lv6_0;
    C_2_ce0 <= func15_U0_C_2_ce0;
    C_2_ce1 <= ap_const_logic_0;
    C_2_d0 <= ap_const_lv32_0;
    C_2_d1 <= ap_const_lv32_0;
    C_2_read <= func15_U0_C_2_write;
    C_2_we0 <= ap_const_logic_0;
    C_2_we1 <= ap_const_logic_0;
    C_3_address0 <= func15_U0_C_3_address0;
    C_3_address1 <= ap_const_lv6_0;
    C_3_ce0 <= func15_U0_C_3_ce0;
    C_3_ce1 <= ap_const_logic_0;
    C_3_d0 <= ap_const_lv32_0;
    C_3_d1 <= ap_const_lv32_0;
    C_3_read <= func15_U0_C_3_write;
    C_3_we0 <= ap_const_logic_0;
    C_3_we1 <= ap_const_logic_0;
    C_4_address0 <= func15_U0_C_4_address0;
    C_4_address1 <= ap_const_lv6_0;
    C_4_ce0 <= func15_U0_C_4_ce0;
    C_4_ce1 <= ap_const_logic_0;
    C_4_d0 <= ap_const_lv32_0;
    C_4_d1 <= ap_const_lv32_0;
    C_4_read <= func15_U0_C_4_write;
    C_4_we0 <= ap_const_logic_0;
    C_4_we1 <= ap_const_logic_0;
    C_5_address0 <= func15_U0_C_5_address0;
    C_5_address1 <= ap_const_lv6_0;
    C_5_ce0 <= func15_U0_C_5_ce0;
    C_5_ce1 <= ap_const_logic_0;
    C_5_d0 <= ap_const_lv32_0;
    C_5_d1 <= ap_const_lv32_0;
    C_5_read <= func15_U0_C_5_write;
    C_5_we0 <= ap_const_logic_0;
    C_5_we1 <= ap_const_logic_0;
    C_6_address0 <= func15_U0_C_6_address0;
    C_6_address1 <= ap_const_lv6_0;
    C_6_ce0 <= func15_U0_C_6_ce0;
    C_6_ce1 <= ap_const_logic_0;
    C_6_d0 <= ap_const_lv32_0;
    C_6_d1 <= ap_const_lv32_0;
    C_6_read <= func15_U0_C_6_write;
    C_6_we0 <= ap_const_logic_0;
    C_6_we1 <= ap_const_logic_0;
    C_7_address0 <= func15_U0_C_7_address0;
    C_7_address1 <= ap_const_lv6_0;
    C_7_ce0 <= func15_U0_C_7_ce0;
    C_7_ce1 <= ap_const_logic_0;
    C_7_d0 <= ap_const_lv32_0;
    C_7_d1 <= ap_const_lv32_0;
    C_7_read <= func15_U0_C_7_write;
    C_7_we0 <= ap_const_logic_0;
    C_7_we1 <= ap_const_logic_0;
    D_address0 <= func15_U0_D_address0;
    D_address1 <= ap_const_lv9_0;
    D_ce0 <= func15_U0_D_ce0;
    D_ce1 <= ap_const_logic_0;
    D_d0 <= ap_const_lv32_0;
    D_d1 <= ap_const_lv32_0;
    D_output_address0 <= func24_U0_D_output_address0;
    D_output_address1 <= ap_const_lv9_0;
    D_output_ce0 <= func24_U0_D_output_ce0;
    D_output_ce1 <= ap_const_logic_0;
    D_output_d0 <= func24_U0_D_output_d0;
    D_output_d1 <= ap_const_lv32_0;
    D_output_we0 <= func24_U0_D_output_we0;
    D_output_we1 <= ap_const_logic_0;
    D_output_write <= func24_U0_D_output_write;
    D_read <= func15_U0_D_write;
    D_we0 <= ap_const_logic_0;
    D_we1 <= ap_const_logic_0;
    ap_channel_done_C_mid_0 <= (func15_U0_ap_done and (ap_sync_reg_channel_write_C_mid_0 xor ap_const_logic_1));
    ap_channel_done_C_mid_1 <= (func15_U0_ap_done and (ap_sync_reg_channel_write_C_mid_1 xor ap_const_logic_1));
    ap_channel_done_C_mid_2 <= (func15_U0_ap_done and (ap_sync_reg_channel_write_C_mid_2 xor ap_const_logic_1));
    ap_channel_done_C_mid_3 <= (func15_U0_ap_done and (ap_sync_reg_channel_write_C_mid_3 xor ap_const_logic_1));
    ap_channel_done_C_mid_4 <= (func15_U0_ap_done and (ap_sync_reg_channel_write_C_mid_4 xor ap_const_logic_1));
    ap_channel_done_C_mid_5 <= (func15_U0_ap_done and (ap_sync_reg_channel_write_C_mid_5 xor ap_const_logic_1));
    ap_channel_done_C_mid_6 <= (func15_U0_ap_done and (ap_sync_reg_channel_write_C_mid_6 xor ap_const_logic_1));
    ap_channel_done_C_mid_7 <= (func15_U0_ap_done and (ap_sync_reg_channel_write_C_mid_7 xor ap_const_logic_1));
    ap_channel_done_D_mid <= (func15_U0_ap_done and (ap_sync_reg_channel_write_D_mid xor ap_const_logic_1));
    ap_channel_done_tmp_mid_0 <= (func15_U0_ap_done and (ap_sync_reg_channel_write_tmp_mid_0 xor ap_const_logic_1));
    ap_channel_done_tmp_mid_1 <= (func15_U0_ap_done and (ap_sync_reg_channel_write_tmp_mid_1 xor ap_const_logic_1));
    ap_channel_done_tmp_mid_2 <= (func15_U0_ap_done and (ap_sync_reg_channel_write_tmp_mid_2 xor ap_const_logic_1));
    ap_channel_done_tmp_mid_3 <= (func15_U0_ap_done and (ap_sync_reg_channel_write_tmp_mid_3 xor ap_const_logic_1));
    ap_channel_done_tmp_mid_4 <= (func15_U0_ap_done and (ap_sync_reg_channel_write_tmp_mid_4 xor ap_const_logic_1));
    ap_channel_done_tmp_mid_5 <= (func15_U0_ap_done and (ap_sync_reg_channel_write_tmp_mid_5 xor ap_const_logic_1));
    ap_channel_done_tmp_mid_6 <= (func15_U0_ap_done and (ap_sync_reg_channel_write_tmp_mid_6 xor ap_const_logic_1));
    ap_channel_done_tmp_mid_7 <= (func15_U0_ap_done and (ap_sync_reg_channel_write_tmp_mid_7 xor ap_const_logic_1));
    ap_done <= func24_U0_ap_done;
    ap_idle <= (func24_U0_ap_idle and func15_U0_ap_idle and (ap_const_logic_1 xor C_mid_6_t_empty_n) and (ap_const_logic_1 xor C_mid_5_t_empty_n) and (ap_const_logic_1 xor C_mid_4_t_empty_n) and (ap_const_logic_1 xor C_mid_3_t_empty_n) and (ap_const_logic_1 xor C_mid_2_t_empty_n) and (ap_const_logic_1 xor C_mid_1_t_empty_n) and (ap_const_logic_1 xor C_mid_0_t_empty_n) and (tmp_mid_7_t_empty_n xor ap_const_logic_1) and (tmp_mid_6_t_empty_n xor ap_const_logic_1) and (tmp_mid_5_t_empty_n xor ap_const_logic_1) and (tmp_mid_4_t_empty_n xor ap_const_logic_1) and (tmp_mid_3_t_empty_n xor ap_const_logic_1) and (tmp_mid_2_t_empty_n xor ap_const_logic_1) and (tmp_mid_1_t_empty_n xor ap_const_logic_1) and (tmp_mid_0_t_empty_n xor ap_const_logic_1) and (ap_const_logic_1 xor D_mid_t_empty_n) and (ap_const_logic_1 xor C_mid_7_t_empty_n));
    ap_ready <= func15_U0_ap_ready;
    ap_sync_channel_write_C_mid_0 <= ((func15_U0_C_mid_0_full_n and ap_channel_done_C_mid_0) or ap_sync_reg_channel_write_C_mid_0);
    ap_sync_channel_write_C_mid_1 <= ((func15_U0_C_mid_1_full_n and ap_channel_done_C_mid_1) or ap_sync_reg_channel_write_C_mid_1);
    ap_sync_channel_write_C_mid_2 <= ((func15_U0_C_mid_2_full_n and ap_channel_done_C_mid_2) or ap_sync_reg_channel_write_C_mid_2);
    ap_sync_channel_write_C_mid_3 <= ((func15_U0_C_mid_3_full_n and ap_channel_done_C_mid_3) or ap_sync_reg_channel_write_C_mid_3);
    ap_sync_channel_write_C_mid_4 <= ((func15_U0_C_mid_4_full_n and ap_channel_done_C_mid_4) or ap_sync_reg_channel_write_C_mid_4);
    ap_sync_channel_write_C_mid_5 <= ((func15_U0_C_mid_5_full_n and ap_channel_done_C_mid_5) or ap_sync_reg_channel_write_C_mid_5);
    ap_sync_channel_write_C_mid_6 <= ((func15_U0_C_mid_6_full_n and ap_channel_done_C_mid_6) or ap_sync_reg_channel_write_C_mid_6);
    ap_sync_channel_write_C_mid_7 <= ((func15_U0_C_mid_7_full_n and ap_channel_done_C_mid_7) or ap_sync_reg_channel_write_C_mid_7);
    ap_sync_channel_write_D_mid <= ((func15_U0_D_mid_full_n and ap_channel_done_D_mid) or ap_sync_reg_channel_write_D_mid);
    ap_sync_channel_write_tmp_mid_0 <= ((func15_U0_tmp_0_full_n and ap_channel_done_tmp_mid_0) or ap_sync_reg_channel_write_tmp_mid_0);
    ap_sync_channel_write_tmp_mid_1 <= ((func15_U0_tmp_1_full_n and ap_channel_done_tmp_mid_1) or ap_sync_reg_channel_write_tmp_mid_1);
    ap_sync_channel_write_tmp_mid_2 <= ((func15_U0_tmp_2_full_n and ap_channel_done_tmp_mid_2) or ap_sync_reg_channel_write_tmp_mid_2);
    ap_sync_channel_write_tmp_mid_3 <= ((func15_U0_tmp_3_full_n and ap_channel_done_tmp_mid_3) or ap_sync_reg_channel_write_tmp_mid_3);
    ap_sync_channel_write_tmp_mid_4 <= ((func15_U0_tmp_4_full_n and ap_channel_done_tmp_mid_4) or ap_sync_reg_channel_write_tmp_mid_4);
    ap_sync_channel_write_tmp_mid_5 <= ((func15_U0_tmp_5_full_n and ap_channel_done_tmp_mid_5) or ap_sync_reg_channel_write_tmp_mid_5);
    ap_sync_channel_write_tmp_mid_6 <= ((func15_U0_tmp_6_full_n and ap_channel_done_tmp_mid_6) or ap_sync_reg_channel_write_tmp_mid_6);
    ap_sync_channel_write_tmp_mid_7 <= ((func15_U0_tmp_7_full_n and ap_channel_done_tmp_mid_7) or ap_sync_reg_channel_write_tmp_mid_7);
    ap_sync_continue <= ap_continue;
    ap_sync_done <= func24_U0_ap_done;
    ap_sync_ready <= func15_U0_ap_ready;
    func15_U0_A_0_full_n <= A_0_empty_n;
    func15_U0_A_0_write <= ap_const_logic_0;
    func15_U0_A_1_full_n <= A_1_empty_n;
    func15_U0_A_1_write <= ap_const_logic_0;
    func15_U0_B_0_full_n <= B_0_empty_n;
    func15_U0_B_0_write <= ap_const_logic_0;
    func15_U0_B_1_full_n <= B_1_empty_n;
    func15_U0_B_1_write <= ap_const_logic_0;
    func15_U0_C_0_full_n <= C_0_empty_n;
    func15_U0_C_0_write <= ap_const_logic_0;
    func15_U0_C_1_full_n <= C_1_empty_n;
    func15_U0_C_1_write <= ap_const_logic_0;
    func15_U0_C_2_full_n <= C_2_empty_n;
    func15_U0_C_2_write <= ap_const_logic_0;
    func15_U0_C_3_full_n <= C_3_empty_n;
    func15_U0_C_3_write <= ap_const_logic_0;
    func15_U0_C_4_full_n <= C_4_empty_n;
    func15_U0_C_4_write <= ap_const_logic_0;
    func15_U0_C_5_full_n <= C_5_empty_n;
    func15_U0_C_5_write <= ap_const_logic_0;
    func15_U0_C_6_full_n <= C_6_empty_n;
    func15_U0_C_6_write <= ap_const_logic_0;
    func15_U0_C_7_full_n <= C_7_empty_n;
    func15_U0_C_7_write <= ap_const_logic_0;
    func15_U0_C_mid_0_full_n <= C_mid_0_i_full_n;
    func15_U0_C_mid_1_full_n <= C_mid_1_i_full_n;
    func15_U0_C_mid_2_full_n <= C_mid_2_i_full_n;
    func15_U0_C_mid_3_full_n <= C_mid_3_i_full_n;
    func15_U0_C_mid_4_full_n <= C_mid_4_i_full_n;
    func15_U0_C_mid_5_full_n <= C_mid_5_i_full_n;
    func15_U0_C_mid_6_full_n <= C_mid_6_i_full_n;
    func15_U0_C_mid_7_full_n <= C_mid_7_i_full_n;
    func15_U0_D_full_n <= D_empty_n;
    func15_U0_D_mid_full_n <= D_mid_i_full_n;
    func15_U0_D_write <= ap_const_logic_0;
    func15_U0_ap_continue <= (ap_sync_channel_write_tmp_mid_7 and ap_sync_channel_write_tmp_mid_6 and ap_sync_channel_write_tmp_mid_5 and ap_sync_channel_write_tmp_mid_4 and ap_sync_channel_write_tmp_mid_3 and ap_sync_channel_write_tmp_mid_2 and ap_sync_channel_write_tmp_mid_1 and ap_sync_channel_write_tmp_mid_0 and ap_sync_channel_write_D_mid and ap_sync_channel_write_C_mid_7 and ap_sync_channel_write_C_mid_6 and ap_sync_channel_write_C_mid_5 and ap_sync_channel_write_C_mid_4 and ap_sync_channel_write_C_mid_3 and ap_sync_channel_write_C_mid_2 and ap_sync_channel_write_C_mid_1 and ap_sync_channel_write_C_mid_0);
    func15_U0_ap_start <= ap_start;
    func15_U0_start_full_n <= ap_const_logic_1;
    func15_U0_start_write <= ap_const_logic_0;
    func15_U0_tmp_0_full_n <= tmp_mid_0_i_full_n;
    func15_U0_tmp_1_full_n <= tmp_mid_1_i_full_n;
    func15_U0_tmp_2_full_n <= tmp_mid_2_i_full_n;
    func15_U0_tmp_3_full_n <= tmp_mid_3_i_full_n;
    func15_U0_tmp_4_full_n <= tmp_mid_4_i_full_n;
    func15_U0_tmp_5_full_n <= tmp_mid_5_i_full_n;
    func15_U0_tmp_6_full_n <= tmp_mid_6_i_full_n;
    func15_U0_tmp_7_full_n <= tmp_mid_7_i_full_n;
    func24_U0_D_output_full_n <= D_output_full_n;
    func24_U0_D_output_write <= ap_const_logic_0;
    func24_U0_ap_continue <= ap_continue;
    func24_U0_ap_start <= (tmp_mid_7_t_empty_n and tmp_mid_6_t_empty_n and tmp_mid_5_t_empty_n and tmp_mid_4_t_empty_n and tmp_mid_3_t_empty_n and tmp_mid_2_t_empty_n and tmp_mid_1_t_empty_n and tmp_mid_0_t_empty_n and D_mid_t_empty_n and C_mid_7_t_empty_n and C_mid_6_t_empty_n and C_mid_5_t_empty_n and C_mid_4_t_empty_n and C_mid_3_t_empty_n and C_mid_2_t_empty_n and C_mid_1_t_empty_n and C_mid_0_t_empty_n);
    func24_U0_start_full_n <= ap_const_logic_1;
    func24_U0_start_write <= ap_const_logic_0;
end behav;
