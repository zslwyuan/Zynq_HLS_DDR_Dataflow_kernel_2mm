-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity func24 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_0_ce0 : OUT STD_LOGIC;
    C_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_1_ce0 : OUT STD_LOGIC;
    C_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_2_ce0 : OUT STD_LOGIC;
    C_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_3_ce0 : OUT STD_LOGIC;
    C_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_4_ce0 : OUT STD_LOGIC;
    C_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_5_ce0 : OUT STD_LOGIC;
    C_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_6_ce0 : OUT STD_LOGIC;
    C_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_7_ce0 : OUT STD_LOGIC;
    C_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    D_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    D_ce0 : OUT STD_LOGIC;
    D_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    tmp_0_ce0 : OUT STD_LOGIC;
    tmp_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    tmp_1_ce0 : OUT STD_LOGIC;
    tmp_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tmp_2_ce0 : OUT STD_LOGIC;
    tmp_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tmp_3_ce0 : OUT STD_LOGIC;
    tmp_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tmp_4_ce0 : OUT STD_LOGIC;
    tmp_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tmp_5_ce0 : OUT STD_LOGIC;
    tmp_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tmp_6_ce0 : OUT STD_LOGIC;
    tmp_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tmp_7_ce0 : OUT STD_LOGIC;
    tmp_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    D_output_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    D_output_ce0 : OUT STD_LOGIC;
    D_output_we0 : OUT STD_LOGIC;
    D_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of func24 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv32_141 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_fu_359_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_630 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_2_17_fu_389_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_17_reg_635 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond2_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_19_fu_403_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_19_reg_640 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_43_cast_fu_417_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_43_cast_reg_645 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_fu_427_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_653 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond1_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_output_addr_reg_663 : STD_LOGIC_VECTOR (8 downto 0);
    signal D_load_reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_448_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_673 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_4_cast5_fu_453_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_cast5_reg_678 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_11_fu_501_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_683 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_12_fu_506_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_reg_688 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_fu_511_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_reg_693 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal C_2_addr_reg_708 : STD_LOGIC_VECTOR (5 downto 0);
    signal C_3_addr_reg_713 : STD_LOGIC_VECTOR (5 downto 0);
    signal C_4_addr_reg_718 : STD_LOGIC_VECTOR (5 downto 0);
    signal C_5_addr_reg_723 : STD_LOGIC_VECTOR (5 downto 0);
    signal C_6_addr_reg_728 : STD_LOGIC_VECTOR (5 downto 0);
    signal C_7_addr_reg_733 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_0_load_reg_748 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal C_0_load_reg_753 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_load_reg_758 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_1_load_reg_763 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_532_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_23_reg_768 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_536_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_1_reg_773 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_addr_reg_778 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_3_addr_reg_783 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_addr_reg_788 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_addr_reg_793 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_1_1_fu_553_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_1_reg_808 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_8_7_fu_571_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_8_7_reg_817 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_2_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_load_reg_822 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal C_6_load_reg_827 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_load_reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_7_load_reg_837 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_load_reg_842 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal C_2_load_reg_847 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_load_reg_852 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_3_load_reg_857 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_load_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_4_load_reg_867 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_load_reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_5_load_reg_877 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_577_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_6_reg_882 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_581_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_7_reg_887 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_585_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_2_reg_892 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_589_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_3_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_593_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_4_reg_902 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_5_reg_907 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_601_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_605_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_917 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp3_fu_613_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_922 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_7_fu_622_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal i_reg_309 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal j_reg_320 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal k_reg_332 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum1_reg_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_cast_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_cast_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_cast_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_cast_fu_540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_16_fu_377_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_369_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_385_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_18_fu_395_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_fu_365_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_20_fu_409_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_cast_fu_433_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_22_fu_437_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_448_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal newIndex_fu_457_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_471_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_483_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl3_cast_fu_479_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_cast_fu_491_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_495_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal newIndex6_cast_fu_467_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_fu_549_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_8_s_fu_559_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp4_fu_609_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_618_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);

    component kernel_2mm_wrappedEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_2mm_wrappecud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    kernel_2mm_wrappedEe_U90 : component kernel_2mm_wrappedEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 10,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => D_load_reg_668,
        din1 => grp_fu_448_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_448_p2);

    kernel_2mm_wrappecud_U91 : component kernel_2mm_wrappecud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => C_0_load_reg_753,
        din1 => tmp_0_load_reg_748,
        ce => ap_const_logic_1,
        dout => grp_fu_532_p2);

    kernel_2mm_wrappecud_U92 : component kernel_2mm_wrappecud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => C_1_load_reg_763,
        din1 => tmp_1_load_reg_758,
        ce => ap_const_logic_1,
        dout => grp_fu_536_p2);

    kernel_2mm_wrappecud_U93 : component kernel_2mm_wrappecud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_6_load_reg_822,
        din1 => C_6_load_reg_827,
        ce => ap_const_logic_1,
        dout => grp_fu_577_p2);

    kernel_2mm_wrappecud_U94 : component kernel_2mm_wrappecud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_load_reg_832,
        din1 => C_7_load_reg_837,
        ce => ap_const_logic_1,
        dout => grp_fu_581_p2);

    kernel_2mm_wrappecud_U95 : component kernel_2mm_wrappecud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_load_reg_842,
        din1 => C_2_load_reg_847,
        ce => ap_const_logic_1,
        dout => grp_fu_585_p2);

    kernel_2mm_wrappecud_U96 : component kernel_2mm_wrappecud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_3_load_reg_852,
        din1 => C_3_load_reg_857,
        ce => ap_const_logic_1,
        dout => grp_fu_589_p2);

    kernel_2mm_wrappecud_U97 : component kernel_2mm_wrappecud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_load_reg_862,
        din1 => C_4_load_reg_867,
        ce => ap_const_logic_1,
        dout => grp_fu_593_p2);

    kernel_2mm_wrappecud_U98 : component kernel_2mm_wrappecud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_5_load_reg_872,
        din1 => C_5_load_reg_877,
        ce => ap_const_logic_1,
        dout => grp_fu_597_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_353_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_421_p2 = ap_const_lv1_1))) then 
                i_reg_309 <= i_1_reg_630;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_309 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_353_p2 = ap_const_lv1_0))) then 
                j_reg_320 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                j_reg_320 <= j_1_reg_653;
            end if; 
        end if;
    end process;

    k_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                k_reg_332 <= k_8_7_reg_817;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                k_reg_332 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    sum1_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                sum1_reg_344 <= sum_1_7_fu_622_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum1_reg_344 <= sum_reg_673;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                C_0_load_reg_753 <= C_0_q0;
                C_1_load_reg_763 <= C_1_q0;
                tmp_0_load_reg_748 <= tmp_0_q0;
                tmp_1_load_reg_758 <= tmp_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                C_2_addr_reg_708 <= tmp_48_cast_fu_516_p1(6 - 1 downto 0);
                C_3_addr_reg_713 <= tmp_48_cast_fu_516_p1(6 - 1 downto 0);
                C_4_addr_reg_718 <= tmp_48_cast_fu_516_p1(6 - 1 downto 0);
                C_5_addr_reg_723 <= tmp_48_cast_fu_516_p1(6 - 1 downto 0);
                C_6_addr_reg_728 <= tmp_48_cast_fu_516_p1(6 - 1 downto 0);
                C_7_addr_reg_733 <= tmp_48_cast_fu_516_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                C_2_load_reg_847 <= C_2_q0;
                C_3_load_reg_857 <= C_3_q0;
                C_4_load_reg_867 <= C_4_q0;
                C_5_load_reg_877 <= C_5_q0;
                tmp_2_load_reg_842 <= tmp_2_q0;
                tmp_3_load_reg_852 <= tmp_3_q0;
                tmp_4_load_reg_862 <= tmp_4_q0;
                tmp_5_load_reg_872 <= tmp_5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                C_6_load_reg_827 <= C_6_q0;
                C_7_load_reg_837 <= C_7_q0;
                tmp_6_load_reg_822 <= tmp_6_q0;
                tmp_7_load_reg_832 <= tmp_7_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                D_load_reg_668 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_421_p2 = ap_const_lv1_0))) then
                D_output_addr_reg_663 <= tmp_44_cast_fu_442_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_630 <= i_1_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_653 <= j_1_fu_427_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond_2_fu_565_p2 = ap_const_lv1_0))) then
                k_8_7_reg_817 <= k_8_7_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                sum_1_1_reg_808 <= sum_1_1_fu_553_p2;
                tmp_2_addr_reg_778 <= tmp_50_cast_fu_540_p1(5 - 1 downto 0);
                tmp_3_addr_reg_783 <= tmp_50_cast_fu_540_p1(5 - 1 downto 0);
                tmp_4_addr_reg_788 <= tmp_50_cast_fu_540_p1(5 - 1 downto 0);
                tmp_5_addr_reg_793 <= tmp_50_cast_fu_540_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                sum_reg_673 <= grp_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                tmp2_reg_917 <= tmp2_fu_605_p2;
                tmp3_reg_922 <= tmp3_fu_613_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp5_reg_912 <= tmp5_fu_601_p2;
                tmp_6_2_reg_892 <= grp_fu_585_p2;
                tmp_6_3_reg_897 <= grp_fu_589_p2;
                tmp_6_4_reg_902 <= grp_fu_593_p2;
                tmp_6_5_reg_907 <= grp_fu_597_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_11_reg_683 <= tmp_11_fu_501_p2;
                tmp_12_reg_688 <= tmp_12_fu_506_p2;
                tmp_13_reg_693 <= tmp_13_fu_511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_353_p2 = ap_const_lv1_0))) then
                    tmp_2_17_reg_635(9 downto 3) <= tmp_2_17_fu_389_p2(9 downto 3);
                    tmp_43_cast_reg_645(5 downto 1) <= tmp_43_cast_fu_417_p1(5 downto 1);
                tmp_4_19_reg_640 <= tmp_4_19_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    tmp_4_cast5_reg_678(4 downto 0) <= tmp_4_cast5_fu_453_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_6_1_reg_773 <= grp_fu_536_p2;
                tmp_6_23_reg_768 <= grp_fu_532_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_6_6_reg_882 <= grp_fu_577_p2;
                tmp_6_7_reg_887 <= grp_fu_581_p2;
            end if;
        end if;
    end process;
    tmp_2_17_reg_635(2 downto 0) <= "000";
    tmp_43_cast_reg_645(0) <= '0';
    tmp_43_cast_reg_645(6) <= '0';
    tmp_4_cast5_reg_678(7 downto 5) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_353_p2, ap_CS_fsm_state3, exitcond1_fu_421_p2, ap_CS_fsm_state19, exitcond_2_fu_565_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_353_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_421_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((exitcond_2_fu_565_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    C_0_address0 <= tmp_48_cast_fu_516_p1(7 - 1 downto 0);

    C_0_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            C_0_ce0 <= ap_const_logic_1;
        else 
            C_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_1_address0 <= tmp_48_cast_fu_516_p1(7 - 1 downto 0);

    C_1_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            C_1_ce0 <= ap_const_logic_1;
        else 
            C_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_2_address0 <= C_2_addr_reg_708;

    C_2_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            C_2_ce0 <= ap_const_logic_1;
        else 
            C_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_3_address0 <= C_3_addr_reg_713;

    C_3_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            C_3_ce0 <= ap_const_logic_1;
        else 
            C_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_4_address0 <= C_4_addr_reg_718;

    C_4_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            C_4_ce0 <= ap_const_logic_1;
        else 
            C_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_5_address0 <= C_5_addr_reg_723;

    C_5_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            C_5_ce0 <= ap_const_logic_1;
        else 
            C_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_6_address0 <= C_6_addr_reg_728;

    C_6_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            C_6_ce0 <= ap_const_logic_1;
        else 
            C_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_7_address0 <= C_7_addr_reg_733;

    C_7_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            C_7_ce0 <= ap_const_logic_1;
        else 
            C_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_address0 <= tmp_44_cast_fu_442_p1(9 - 1 downto 0);

    D_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            D_ce0 <= ap_const_logic_1;
        else 
            D_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_output_address0 <= D_output_addr_reg_663;

    D_output_ce0_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            D_output_ce0 <= ap_const_logic_1;
        else 
            D_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_output_d0 <= sum_1_1_reg_808;

    D_output_we0_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            D_output_we0 <= ap_const_logic_1;
        else 
            D_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, exitcond2_fu_353_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_353_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_353_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_353_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_421_p2 <= "1" when (j_reg_320 = ap_const_lv5_18) else "0";
    exitcond2_fu_353_p2 <= "1" when (i_reg_309 = ap_const_lv5_10) else "0";
    exitcond_2_fu_565_p2 <= "1" when (k_8_s_fu_559_p2 = ap_const_lv5_12) else "0";
    grp_fu_448_p1 <= ap_const_lv32_141(10 - 1 downto 0);
    i_1_fu_359_p2 <= std_logic_vector(unsigned(i_reg_309) + unsigned(ap_const_lv5_1));
    j_1_fu_427_p2 <= std_logic_vector(unsigned(j_reg_320) + unsigned(ap_const_lv5_1));
    k_8_7_fu_571_p2 <= std_logic_vector(unsigned(k_reg_332) + unsigned(ap_const_lv5_8));
    k_8_s_fu_559_p2 <= (k_reg_332 or ap_const_lv5_2);
    newIndex6_cast_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex_fu_457_p4),7));
    newIndex_fu_457_p4 <= k_reg_332(4 downto 3);
    p_shl2_cast_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_16_fu_377_p3),10));
    p_shl3_cast_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_471_p3),8));
    p_shl4_cast_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_483_p3),8));
    sum_1_1_fu_553_p2 <= std_logic_vector(unsigned(sum1_reg_344) + unsigned(tmp_fu_549_p2));
    sum_1_7_fu_622_p2 <= std_logic_vector(unsigned(tmp3_reg_922) + unsigned(tmp1_fu_618_p2));
    tmp1_fu_618_p2 <= std_logic_vector(unsigned(tmp2_reg_917) + unsigned(sum_1_1_reg_808));
    tmp2_fu_605_p2 <= std_logic_vector(unsigned(tmp_6_2_reg_892) + unsigned(tmp_6_3_reg_897));
    tmp3_fu_613_p2 <= std_logic_vector(unsigned(tmp5_reg_912) + unsigned(tmp4_fu_609_p2));
    tmp4_fu_609_p2 <= std_logic_vector(unsigned(tmp_6_4_reg_902) + unsigned(tmp_6_5_reg_907));
    tmp5_fu_601_p2 <= std_logic_vector(unsigned(tmp_6_6_reg_882) + unsigned(tmp_6_7_reg_887));
    tmp_0_address0 <= tmp_49_cast_fu_527_p1(6 - 1 downto 0);

    tmp_0_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            tmp_0_ce0 <= ap_const_logic_1;
        else 
            tmp_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_495_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_479_p1) - unsigned(p_shl4_cast_fu_491_p1));
    tmp_11_fu_501_p2 <= std_logic_vector(unsigned(tmp_10_fu_495_p2) + unsigned(tmp_4_cast5_reg_678));
    tmp_12_fu_506_p2 <= std_logic_vector(unsigned(tmp_4_19_reg_640) + unsigned(newIndex6_cast_fu_467_p1));
    tmp_13_fu_511_p2 <= std_logic_vector(unsigned(tmp_43_cast_reg_645) + unsigned(newIndex6_cast_fu_467_p1));
    tmp_1_16_fu_377_p3 <= (i_reg_309 & ap_const_lv3_0);
    tmp_1_address0 <= tmp_49_cast_fu_527_p1(6 - 1 downto 0);

    tmp_1_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            tmp_1_ce0 <= ap_const_logic_1;
        else 
            tmp_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_17_fu_389_p2 <= std_logic_vector(unsigned(tmp_s_fu_369_p3) - unsigned(p_shl2_cast_fu_385_p1));
    tmp_2_address0 <= tmp_2_addr_reg_778;

    tmp_2_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            tmp_2_ce0 <= ap_const_logic_1;
        else 
            tmp_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_18_fu_395_p3 <= (i_reg_309 & ap_const_lv2_0);
    tmp_3_address0 <= tmp_3_addr_reg_783;

    tmp_3_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            tmp_3_ce0 <= ap_const_logic_1;
        else 
            tmp_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_43_cast_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_20_fu_409_p3),7));
        tmp_44_cast_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_22_fu_437_p2),64));

        tmp_48_cast_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_reg_683),64));

        tmp_49_cast_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_reg_688),64));

    tmp_4_19_fu_403_p2 <= std_logic_vector(unsigned(tmp_3_18_fu_395_p3) - unsigned(tmp_cast_fu_365_p1));
    tmp_4_address0 <= tmp_4_addr_reg_788;
    tmp_4_cast5_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_320),8));
    tmp_4_cast_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_320),10));

    tmp_4_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            tmp_4_ce0 <= ap_const_logic_1;
        else 
            tmp_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_50_cast_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_reg_693),64));
    tmp_5_20_fu_409_p3 <= (i_reg_309 & ap_const_lv1_0);
    tmp_5_address0 <= tmp_5_addr_reg_793;

    tmp_5_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            tmp_5_ce0 <= ap_const_logic_1;
        else 
            tmp_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_6_address0 <= tmp_50_cast_fu_540_p1(5 - 1 downto 0);

    tmp_6_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            tmp_6_ce0 <= ap_const_logic_1;
        else 
            tmp_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_7_22_fu_437_p2 <= std_logic_vector(unsigned(tmp_2_17_reg_635) + unsigned(tmp_4_cast_fu_433_p1));
    tmp_7_address0 <= tmp_50_cast_fu_540_p1(5 - 1 downto 0);

    tmp_7_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            tmp_7_ce0 <= ap_const_logic_1;
        else 
            tmp_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_8_fu_471_p3 <= (newIndex_fu_457_p4 & ap_const_lv5_0);
    tmp_9_fu_483_p3 <= (newIndex_fu_457_p4 & ap_const_lv3_0);
    tmp_cast_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_309),7));
    tmp_fu_549_p2 <= std_logic_vector(unsigned(tmp_6_1_reg_773) + unsigned(tmp_6_23_reg_768));
    tmp_s_fu_369_p3 <= (i_reg_309 & ap_const_lv5_0);
end behav;
