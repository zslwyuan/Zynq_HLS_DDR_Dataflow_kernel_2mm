// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module writeData (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_D_output_AXI_AWVALID,
        m_axi_D_output_AXI_AWREADY,
        m_axi_D_output_AXI_AWADDR,
        m_axi_D_output_AXI_AWID,
        m_axi_D_output_AXI_AWLEN,
        m_axi_D_output_AXI_AWSIZE,
        m_axi_D_output_AXI_AWBURST,
        m_axi_D_output_AXI_AWLOCK,
        m_axi_D_output_AXI_AWCACHE,
        m_axi_D_output_AXI_AWPROT,
        m_axi_D_output_AXI_AWQOS,
        m_axi_D_output_AXI_AWREGION,
        m_axi_D_output_AXI_AWUSER,
        m_axi_D_output_AXI_WVALID,
        m_axi_D_output_AXI_WREADY,
        m_axi_D_output_AXI_WDATA,
        m_axi_D_output_AXI_WSTRB,
        m_axi_D_output_AXI_WLAST,
        m_axi_D_output_AXI_WID,
        m_axi_D_output_AXI_WUSER,
        m_axi_D_output_AXI_ARVALID,
        m_axi_D_output_AXI_ARREADY,
        m_axi_D_output_AXI_ARADDR,
        m_axi_D_output_AXI_ARID,
        m_axi_D_output_AXI_ARLEN,
        m_axi_D_output_AXI_ARSIZE,
        m_axi_D_output_AXI_ARBURST,
        m_axi_D_output_AXI_ARLOCK,
        m_axi_D_output_AXI_ARCACHE,
        m_axi_D_output_AXI_ARPROT,
        m_axi_D_output_AXI_ARQOS,
        m_axi_D_output_AXI_ARREGION,
        m_axi_D_output_AXI_ARUSER,
        m_axi_D_output_AXI_RVALID,
        m_axi_D_output_AXI_RREADY,
        m_axi_D_output_AXI_RDATA,
        m_axi_D_output_AXI_RLAST,
        m_axi_D_output_AXI_RID,
        m_axi_D_output_AXI_RUSER,
        m_axi_D_output_AXI_RRESP,
        m_axi_D_output_AXI_BVALID,
        m_axi_D_output_AXI_BREADY,
        m_axi_D_output_AXI_BRESP,
        m_axi_D_output_AXI_BID,
        m_axi_D_output_AXI_BUSER,
        D_output_AXI_offset_dout,
        D_output_AXI_offset_empty_n,
        D_output_AXI_offset_read,
        D_output_address0,
        D_output_ce0,
        D_output_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state11 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_D_output_AXI_AWVALID;
input   m_axi_D_output_AXI_AWREADY;
output  [31:0] m_axi_D_output_AXI_AWADDR;
output  [0:0] m_axi_D_output_AXI_AWID;
output  [31:0] m_axi_D_output_AXI_AWLEN;
output  [2:0] m_axi_D_output_AXI_AWSIZE;
output  [1:0] m_axi_D_output_AXI_AWBURST;
output  [1:0] m_axi_D_output_AXI_AWLOCK;
output  [3:0] m_axi_D_output_AXI_AWCACHE;
output  [2:0] m_axi_D_output_AXI_AWPROT;
output  [3:0] m_axi_D_output_AXI_AWQOS;
output  [3:0] m_axi_D_output_AXI_AWREGION;
output  [0:0] m_axi_D_output_AXI_AWUSER;
output   m_axi_D_output_AXI_WVALID;
input   m_axi_D_output_AXI_WREADY;
output  [31:0] m_axi_D_output_AXI_WDATA;
output  [3:0] m_axi_D_output_AXI_WSTRB;
output   m_axi_D_output_AXI_WLAST;
output  [0:0] m_axi_D_output_AXI_WID;
output  [0:0] m_axi_D_output_AXI_WUSER;
output   m_axi_D_output_AXI_ARVALID;
input   m_axi_D_output_AXI_ARREADY;
output  [31:0] m_axi_D_output_AXI_ARADDR;
output  [0:0] m_axi_D_output_AXI_ARID;
output  [31:0] m_axi_D_output_AXI_ARLEN;
output  [2:0] m_axi_D_output_AXI_ARSIZE;
output  [1:0] m_axi_D_output_AXI_ARBURST;
output  [1:0] m_axi_D_output_AXI_ARLOCK;
output  [3:0] m_axi_D_output_AXI_ARCACHE;
output  [2:0] m_axi_D_output_AXI_ARPROT;
output  [3:0] m_axi_D_output_AXI_ARQOS;
output  [3:0] m_axi_D_output_AXI_ARREGION;
output  [0:0] m_axi_D_output_AXI_ARUSER;
input   m_axi_D_output_AXI_RVALID;
output   m_axi_D_output_AXI_RREADY;
input  [31:0] m_axi_D_output_AXI_RDATA;
input   m_axi_D_output_AXI_RLAST;
input  [0:0] m_axi_D_output_AXI_RID;
input  [0:0] m_axi_D_output_AXI_RUSER;
input  [1:0] m_axi_D_output_AXI_RRESP;
input   m_axi_D_output_AXI_BVALID;
output   m_axi_D_output_AXI_BREADY;
input  [1:0] m_axi_D_output_AXI_BRESP;
input  [0:0] m_axi_D_output_AXI_BID;
input  [0:0] m_axi_D_output_AXI_BUSER;
input  [31:0] D_output_AXI_offset_dout;
input   D_output_AXI_offset_empty_n;
output   D_output_AXI_offset_read;
output  [8:0] D_output_address0;
output   D_output_ce0;
input  [31:0] D_output_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_D_output_AXI_AWVALID;
reg m_axi_D_output_AXI_WVALID;
reg m_axi_D_output_AXI_BREADY;
reg D_output_AXI_offset_read;
reg D_output_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    D_output_AXI_blk_n_AW;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_i_reg_273;
reg   [0:0] exitcond_flatten_i_reg_273_pp0_iter1_reg;
reg    D_output_AXI_blk_n_W;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] exitcond_flatten_i_reg_273_pp0_iter2_reg;
reg    D_output_AXI_blk_n_B;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] exitcond_flatten_i_reg_273_pp0_iter7_reg;
reg    D_output_AXI_offset_blk_n;
reg   [8:0] indvar_flatten_i_reg_109;
reg   [4:0] i_i_reg_120;
reg   [4:0] j_i_reg_131;
wire   [31:0] sext_cast_i_fu_152_p1;
reg   [31:0] sext_cast_i_reg_268;
reg    ap_block_state1;
wire   [0:0] exitcond_flatten_i_fu_156_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_sig_ioackin_m_axi_D_output_AXI_AWREADY;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_sig_ioackin_m_axi_D_output_AXI_WREADY;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
reg    ap_block_state10_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_i_reg_273_pp0_iter3_reg;
reg   [0:0] exitcond_flatten_i_reg_273_pp0_iter4_reg;
reg   [0:0] exitcond_flatten_i_reg_273_pp0_iter5_reg;
reg   [0:0] exitcond_flatten_i_reg_273_pp0_iter6_reg;
wire   [8:0] indvar_flatten_next_s_fu_162_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] j_mid2_i_fu_180_p3;
reg   [4:0] j_mid2_i_reg_282;
wire   [4:0] tmp_mid2_v_i_fu_188_p3;
reg   [4:0] tmp_mid2_v_i_reg_287;
wire   [10:0] tmp_4_i_fu_220_p2;
reg   [10:0] tmp_4_i_reg_292;
wire   [4:0] j_fu_226_p2;
wire   [31:0] sum_i_fu_253_p2;
reg   [31:0] sum_i_reg_302;
reg   [31:0] D_output_load_reg_318;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg   [4:0] ap_phi_mux_i_i_phi_fu_124_p4;
wire  signed [63:0] tmp_5_cast_i_fu_248_p1;
wire  signed [63:0] sum_cast_i_fu_258_p1;
reg    ap_reg_ioackin_m_axi_D_output_AXI_AWREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_m_axi_D_output_AXI_WREADY;
wire   [29:0] tmp_fu_142_p4;
wire   [0:0] exitcond9_i_fu_174_p2;
wire   [4:0] i_1_i_fu_168_p2;
wire   [9:0] tmp_i_fu_196_p3;
wire   [7:0] tmp_3_i_fu_208_p3;
wire   [10:0] p_shl_cast_i_fu_204_p1;
wire   [10:0] p_shl2_cast_i_fu_216_p1;
wire  signed [11:0] tmp_4_cast_i_fu_232_p1;
wire   [11:0] tmp_2_cast_i_fu_235_p1;
wire  signed [11:0] tmp_5_i_fu_238_p2;
wire  signed [31:0] tmp_5_cast10_i_fu_244_p1;
wire    ap_CS_fsm_state11;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_reg_ioackin_m_axi_D_output_AXI_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_D_output_AXI_WREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((1'b0 == D_output_AXI_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if ((~((1'b0 == D_output_AXI_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_D_output_AXI_AWREADY <= 1'b0;
    end else begin
        if (((exitcond_flatten_i_reg_273_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_D_output_AXI_AWREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_D_output_AXI_AWREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_D_output_AXI_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_D_output_AXI_WREADY <= 1'b0;
    end else begin
        if (((exitcond_flatten_i_reg_273_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_D_output_AXI_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_D_output_AXI_WREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_D_output_AXI_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_i_reg_273 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_i_reg_120 <= tmp_mid2_v_i_reg_287;
    end else if ((~((1'b0 == D_output_AXI_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_reg_120 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_i_fu_156_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_i_reg_109 <= indvar_flatten_next_s_fu_162_p2;
    end else if ((~((1'b0 == D_output_AXI_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_i_reg_109 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_i_fu_156_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_i_reg_131 <= j_fu_226_p2;
    end else if ((~((1'b0 == D_output_AXI_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_i_reg_131 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_i_reg_273_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        D_output_load_reg_318 <= D_output_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_i_reg_273 <= exitcond_flatten_i_fu_156_p2;
        exitcond_flatten_i_reg_273_pp0_iter1_reg <= exitcond_flatten_i_reg_273;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_flatten_i_reg_273_pp0_iter2_reg <= exitcond_flatten_i_reg_273_pp0_iter1_reg;
        exitcond_flatten_i_reg_273_pp0_iter3_reg <= exitcond_flatten_i_reg_273_pp0_iter2_reg;
        exitcond_flatten_i_reg_273_pp0_iter4_reg <= exitcond_flatten_i_reg_273_pp0_iter3_reg;
        exitcond_flatten_i_reg_273_pp0_iter5_reg <= exitcond_flatten_i_reg_273_pp0_iter4_reg;
        exitcond_flatten_i_reg_273_pp0_iter6_reg <= exitcond_flatten_i_reg_273_pp0_iter5_reg;
        exitcond_flatten_i_reg_273_pp0_iter7_reg <= exitcond_flatten_i_reg_273_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_i_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_mid2_i_reg_282 <= j_mid2_i_fu_180_p3;
        tmp_4_i_reg_292[10 : 3] <= tmp_4_i_fu_220_p2[10 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == D_output_AXI_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sext_cast_i_reg_268[29 : 0] <= sext_cast_i_fu_152_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_i_reg_273 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_i_reg_302 <= sum_i_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_i_fu_156_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_mid2_v_i_reg_287 <= tmp_mid2_v_i_fu_188_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_i_reg_273_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        D_output_AXI_blk_n_AW = m_axi_D_output_AXI_AWREADY;
    end else begin
        D_output_AXI_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_i_reg_273_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        D_output_AXI_blk_n_B = m_axi_D_output_AXI_BVALID;
    end else begin
        D_output_AXI_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_i_reg_273_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        D_output_AXI_blk_n_W = m_axi_D_output_AXI_WREADY;
    end else begin
        D_output_AXI_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        D_output_AXI_offset_blk_n = D_output_AXI_offset_empty_n;
    end else begin
        D_output_AXI_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == D_output_AXI_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        D_output_AXI_offset_read = 1'b1;
    end else begin
        D_output_AXI_offset_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        D_output_ce0 = 1'b1;
    end else begin
        D_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_i_fu_156_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_i_reg_273 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_i_phi_fu_124_p4 = tmp_mid2_v_i_reg_287;
    end else begin
        ap_phi_mux_i_i_phi_fu_124_p4 = i_i_reg_120;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_D_output_AXI_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_D_output_AXI_AWREADY = m_axi_D_output_AXI_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_D_output_AXI_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_D_output_AXI_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_D_output_AXI_WREADY = m_axi_D_output_AXI_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_D_output_AXI_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_i_reg_273_pp0_iter1_reg == 1'd0) & (ap_reg_ioackin_m_axi_D_output_AXI_AWREADY == 1'b0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_D_output_AXI_AWVALID = 1'b1;
    end else begin
        m_axi_D_output_AXI_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_i_reg_273_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_D_output_AXI_BREADY = 1'b1;
    end else begin
        m_axi_D_output_AXI_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_i_reg_273_pp0_iter2_reg == 1'd0) & (ap_reg_ioackin_m_axi_D_output_AXI_WREADY == 1'b0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        m_axi_D_output_AXI_WVALID = 1'b1;
    end else begin
        m_axi_D_output_AXI_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == D_output_AXI_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_i_fu_156_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_i_fu_156_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign D_output_address0 = tmp_5_cast_i_fu_248_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_flatten_i_reg_273_pp0_iter7_reg == 1'd0) & (m_axi_D_output_AXI_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((exitcond_flatten_i_reg_273_pp0_iter7_reg == 1'd0) & (m_axi_D_output_AXI_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((exitcond_flatten_i_reg_273_pp0_iter7_reg == 1'd0) & (m_axi_D_output_AXI_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == D_output_AXI_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter8 = ((exitcond_flatten_i_reg_273_pp0_iter7_reg == 1'd0) & (m_axi_D_output_AXI_BVALID == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((exitcond_flatten_i_reg_273_pp0_iter1_reg == 1'd0) & (ap_sig_ioackin_m_axi_D_output_AXI_AWREADY == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((exitcond_flatten_i_reg_273_pp0_iter2_reg == 1'd0) & (ap_sig_ioackin_m_axi_D_output_AXI_WREADY == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond9_i_fu_174_p2 = ((j_i_reg_131 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond_flatten_i_fu_156_p2 = ((indvar_flatten_i_reg_109 == 9'd384) ? 1'b1 : 1'b0);

assign i_1_i_fu_168_p2 = (ap_phi_mux_i_i_phi_fu_124_p4 + 5'd1);

assign indvar_flatten_next_s_fu_162_p2 = (indvar_flatten_i_reg_109 + 9'd1);

assign j_fu_226_p2 = (j_mid2_i_fu_180_p3 + 5'd1);

assign j_mid2_i_fu_180_p3 = ((exitcond9_i_fu_174_p2[0:0] === 1'b1) ? 5'd0 : j_i_reg_131);

assign m_axi_D_output_AXI_ARADDR = 32'd0;

assign m_axi_D_output_AXI_ARBURST = 2'd0;

assign m_axi_D_output_AXI_ARCACHE = 4'd0;

assign m_axi_D_output_AXI_ARID = 1'd0;

assign m_axi_D_output_AXI_ARLEN = 32'd0;

assign m_axi_D_output_AXI_ARLOCK = 2'd0;

assign m_axi_D_output_AXI_ARPROT = 3'd0;

assign m_axi_D_output_AXI_ARQOS = 4'd0;

assign m_axi_D_output_AXI_ARREGION = 4'd0;

assign m_axi_D_output_AXI_ARSIZE = 3'd0;

assign m_axi_D_output_AXI_ARUSER = 1'd0;

assign m_axi_D_output_AXI_ARVALID = 1'b0;

assign m_axi_D_output_AXI_AWADDR = sum_cast_i_fu_258_p1;

assign m_axi_D_output_AXI_AWBURST = 2'd0;

assign m_axi_D_output_AXI_AWCACHE = 4'd0;

assign m_axi_D_output_AXI_AWID = 1'd0;

assign m_axi_D_output_AXI_AWLEN = 32'd1;

assign m_axi_D_output_AXI_AWLOCK = 2'd0;

assign m_axi_D_output_AXI_AWPROT = 3'd0;

assign m_axi_D_output_AXI_AWQOS = 4'd0;

assign m_axi_D_output_AXI_AWREGION = 4'd0;

assign m_axi_D_output_AXI_AWSIZE = 3'd0;

assign m_axi_D_output_AXI_AWUSER = 1'd0;

assign m_axi_D_output_AXI_RREADY = 1'b0;

assign m_axi_D_output_AXI_WDATA = D_output_load_reg_318;

assign m_axi_D_output_AXI_WID = 1'd0;

assign m_axi_D_output_AXI_WLAST = 1'b0;

assign m_axi_D_output_AXI_WSTRB = 4'd15;

assign m_axi_D_output_AXI_WUSER = 1'd0;

assign p_shl2_cast_i_fu_216_p1 = tmp_3_i_fu_208_p3;

assign p_shl_cast_i_fu_204_p1 = tmp_i_fu_196_p3;

assign sext_cast_i_fu_152_p1 = tmp_fu_142_p4;

assign sum_cast_i_fu_258_p1 = $signed(sum_i_reg_302);

assign sum_i_fu_253_p2 = ($signed(sext_cast_i_reg_268) + $signed(tmp_5_cast10_i_fu_244_p1));

assign tmp_2_cast_i_fu_235_p1 = j_mid2_i_reg_282;

assign tmp_3_i_fu_208_p3 = {{tmp_mid2_v_i_fu_188_p3}, {3'd0}};

assign tmp_4_cast_i_fu_232_p1 = $signed(tmp_4_i_reg_292);

assign tmp_4_i_fu_220_p2 = (p_shl_cast_i_fu_204_p1 - p_shl2_cast_i_fu_216_p1);

assign tmp_5_cast10_i_fu_244_p1 = tmp_5_i_fu_238_p2;

assign tmp_5_cast_i_fu_248_p1 = tmp_5_i_fu_238_p2;

assign tmp_5_i_fu_238_p2 = ($signed(tmp_4_cast_i_fu_232_p1) + $signed(tmp_2_cast_i_fu_235_p1));

assign tmp_fu_142_p4 = {{D_output_AXI_offset_dout[31:2]}};

assign tmp_i_fu_196_p3 = {{tmp_mid2_v_i_fu_188_p3}, {5'd0}};

assign tmp_mid2_v_i_fu_188_p3 = ((exitcond9_i_fu_174_p2[0:0] === 1'b1) ? i_1_i_fu_168_p2 : ap_phi_mux_i_i_phi_fu_124_p4);

always @ (posedge ap_clk) begin
    sext_cast_i_reg_268[31:30] <= 2'b00;
    tmp_4_i_reg_292[2:0] <= 3'b000;
end

endmodule //writeData
