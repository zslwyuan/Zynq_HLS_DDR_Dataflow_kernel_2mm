// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module func24 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        C_0_address0,
        C_0_ce0,
        C_0_q0,
        C_1_address0,
        C_1_ce0,
        C_1_q0,
        C_2_address0,
        C_2_ce0,
        C_2_q0,
        C_3_address0,
        C_3_ce0,
        C_3_q0,
        C_4_address0,
        C_4_ce0,
        C_4_q0,
        C_5_address0,
        C_5_ce0,
        C_5_q0,
        C_6_address0,
        C_6_ce0,
        C_6_q0,
        C_7_address0,
        C_7_ce0,
        C_7_q0,
        D_address0,
        D_ce0,
        D_q0,
        tmp_0_address0,
        tmp_0_ce0,
        tmp_0_q0,
        tmp_1_address0,
        tmp_1_ce0,
        tmp_1_q0,
        tmp_2_address0,
        tmp_2_ce0,
        tmp_2_q0,
        tmp_3_address0,
        tmp_3_ce0,
        tmp_3_q0,
        tmp_4_address0,
        tmp_4_ce0,
        tmp_4_q0,
        tmp_5_address0,
        tmp_5_ce0,
        tmp_5_q0,
        tmp_6_address0,
        tmp_6_ce0,
        tmp_6_q0,
        tmp_7_address0,
        tmp_7_ce0,
        tmp_7_q0,
        D_output_address0,
        D_output_ce0,
        D_output_we0,
        D_output_d0
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_state10 = 29'd512;
parameter    ap_ST_fsm_state11 = 29'd1024;
parameter    ap_ST_fsm_state12 = 29'd2048;
parameter    ap_ST_fsm_state13 = 29'd4096;
parameter    ap_ST_fsm_state14 = 29'd8192;
parameter    ap_ST_fsm_state15 = 29'd16384;
parameter    ap_ST_fsm_state16 = 29'd32768;
parameter    ap_ST_fsm_state17 = 29'd65536;
parameter    ap_ST_fsm_state18 = 29'd131072;
parameter    ap_ST_fsm_state19 = 29'd262144;
parameter    ap_ST_fsm_state20 = 29'd524288;
parameter    ap_ST_fsm_state21 = 29'd1048576;
parameter    ap_ST_fsm_state22 = 29'd2097152;
parameter    ap_ST_fsm_state23 = 29'd4194304;
parameter    ap_ST_fsm_state24 = 29'd8388608;
parameter    ap_ST_fsm_state25 = 29'd16777216;
parameter    ap_ST_fsm_state26 = 29'd33554432;
parameter    ap_ST_fsm_state27 = 29'd67108864;
parameter    ap_ST_fsm_state28 = 29'd134217728;
parameter    ap_ST_fsm_state29 = 29'd268435456;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [6:0] C_0_address0;
output   C_0_ce0;
input  [31:0] C_0_q0;
output  [6:0] C_1_address0;
output   C_1_ce0;
input  [31:0] C_1_q0;
output  [5:0] C_2_address0;
output   C_2_ce0;
input  [31:0] C_2_q0;
output  [5:0] C_3_address0;
output   C_3_ce0;
input  [31:0] C_3_q0;
output  [5:0] C_4_address0;
output   C_4_ce0;
input  [31:0] C_4_q0;
output  [5:0] C_5_address0;
output   C_5_ce0;
input  [31:0] C_5_q0;
output  [5:0] C_6_address0;
output   C_6_ce0;
input  [31:0] C_6_q0;
output  [5:0] C_7_address0;
output   C_7_ce0;
input  [31:0] C_7_q0;
output  [8:0] D_address0;
output   D_ce0;
input  [31:0] D_q0;
output  [5:0] tmp_0_address0;
output   tmp_0_ce0;
input  [31:0] tmp_0_q0;
output  [5:0] tmp_1_address0;
output   tmp_1_ce0;
input  [31:0] tmp_1_q0;
output  [4:0] tmp_2_address0;
output   tmp_2_ce0;
input  [31:0] tmp_2_q0;
output  [4:0] tmp_3_address0;
output   tmp_3_ce0;
input  [31:0] tmp_3_q0;
output  [4:0] tmp_4_address0;
output   tmp_4_ce0;
input  [31:0] tmp_4_q0;
output  [4:0] tmp_5_address0;
output   tmp_5_ce0;
input  [31:0] tmp_5_q0;
output  [4:0] tmp_6_address0;
output   tmp_6_ce0;
input  [31:0] tmp_6_q0;
output  [4:0] tmp_7_address0;
output   tmp_7_ce0;
input  [31:0] tmp_7_q0;
output  [8:0] D_output_address0;
output   D_output_ce0;
output   D_output_we0;
output  [31:0] D_output_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg C_0_ce0;
reg C_1_ce0;
reg C_2_ce0;
reg C_3_ce0;
reg C_4_ce0;
reg C_5_ce0;
reg C_6_ce0;
reg C_7_ce0;
reg D_ce0;
reg tmp_0_ce0;
reg tmp_1_ce0;
reg tmp_2_ce0;
reg tmp_3_ce0;
reg tmp_4_ce0;
reg tmp_5_ce0;
reg tmp_6_ce0;
reg tmp_7_ce0;
reg D_output_ce0;
reg D_output_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_1_fu_359_p2;
reg   [4:0] i_1_reg_630;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_2_17_fu_389_p2;
reg   [9:0] tmp_2_17_reg_635;
wire   [0:0] exitcond2_fu_353_p2;
wire   [6:0] tmp_4_19_fu_403_p2;
reg   [6:0] tmp_4_19_reg_640;
wire   [6:0] tmp_43_cast_fu_417_p1;
reg   [6:0] tmp_43_cast_reg_645;
wire   [4:0] j_1_fu_427_p2;
reg   [4:0] j_1_reg_653;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond1_fu_421_p2;
reg   [8:0] D_output_addr_reg_663;
reg  signed [31:0] D_load_reg_668;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_448_p2;
reg   [31:0] sum_reg_673;
wire    ap_CS_fsm_state9;
wire   [7:0] tmp_4_cast5_fu_453_p1;
reg   [7:0] tmp_4_cast5_reg_678;
wire    ap_CS_fsm_state10;
wire   [7:0] tmp_11_fu_501_p2;
reg   [7:0] tmp_11_reg_683;
wire    ap_CS_fsm_state11;
wire   [6:0] tmp_12_fu_506_p2;
reg   [6:0] tmp_12_reg_688;
wire   [6:0] tmp_13_fu_511_p2;
reg   [6:0] tmp_13_reg_693;
wire    ap_CS_fsm_state12;
reg   [5:0] C_2_addr_reg_708;
reg   [5:0] C_3_addr_reg_713;
reg   [5:0] C_4_addr_reg_718;
reg   [5:0] C_5_addr_reg_723;
reg   [5:0] C_6_addr_reg_728;
reg   [5:0] C_7_addr_reg_733;
reg  signed [31:0] tmp_0_load_reg_748;
wire    ap_CS_fsm_state13;
reg  signed [31:0] C_0_load_reg_753;
reg  signed [31:0] tmp_1_load_reg_758;
reg  signed [31:0] C_1_load_reg_763;
wire   [31:0] grp_fu_532_p2;
reg   [31:0] tmp_6_23_reg_768;
wire    ap_CS_fsm_state18;
wire   [31:0] grp_fu_536_p2;
reg   [31:0] tmp_6_1_reg_773;
reg   [4:0] tmp_2_addr_reg_778;
wire    ap_CS_fsm_state19;
reg   [4:0] tmp_3_addr_reg_783;
reg   [4:0] tmp_4_addr_reg_788;
reg   [4:0] tmp_5_addr_reg_793;
wire   [31:0] sum_1_1_fu_553_p2;
reg   [31:0] sum_1_1_reg_808;
wire   [4:0] k_8_7_fu_571_p2;
reg   [4:0] k_8_7_reg_817;
wire   [0:0] exitcond_2_fu_565_p2;
reg  signed [31:0] tmp_6_load_reg_822;
wire    ap_CS_fsm_state20;
reg  signed [31:0] C_6_load_reg_827;
reg  signed [31:0] tmp_7_load_reg_832;
reg  signed [31:0] C_7_load_reg_837;
reg  signed [31:0] tmp_2_load_reg_842;
wire    ap_CS_fsm_state21;
reg  signed [31:0] C_2_load_reg_847;
reg  signed [31:0] tmp_3_load_reg_852;
reg  signed [31:0] C_3_load_reg_857;
reg  signed [31:0] tmp_4_load_reg_862;
reg  signed [31:0] C_4_load_reg_867;
reg  signed [31:0] tmp_5_load_reg_872;
reg  signed [31:0] C_5_load_reg_877;
wire   [31:0] grp_fu_577_p2;
reg   [31:0] tmp_6_6_reg_882;
wire    ap_CS_fsm_state25;
wire   [31:0] grp_fu_581_p2;
reg   [31:0] tmp_6_7_reg_887;
wire   [31:0] grp_fu_585_p2;
reg   [31:0] tmp_6_2_reg_892;
wire    ap_CS_fsm_state26;
wire   [31:0] grp_fu_589_p2;
reg   [31:0] tmp_6_3_reg_897;
wire   [31:0] grp_fu_593_p2;
reg   [31:0] tmp_6_4_reg_902;
wire   [31:0] grp_fu_597_p2;
reg   [31:0] tmp_6_5_reg_907;
wire   [31:0] tmp5_fu_601_p2;
reg   [31:0] tmp5_reg_912;
wire   [31:0] tmp2_fu_605_p2;
reg   [31:0] tmp2_reg_917;
wire    ap_CS_fsm_state27;
wire   [31:0] tmp3_fu_613_p2;
reg   [31:0] tmp3_reg_922;
wire   [31:0] sum_1_7_fu_622_p2;
wire    ap_CS_fsm_state28;
reg   [4:0] i_reg_309;
reg    ap_block_state1;
reg   [4:0] j_reg_320;
wire    ap_CS_fsm_state29;
reg   [4:0] k_reg_332;
reg   [31:0] sum1_reg_344;
wire  signed [63:0] tmp_44_cast_fu_442_p1;
wire  signed [63:0] tmp_48_cast_fu_516_p1;
wire  signed [63:0] tmp_49_cast_fu_527_p1;
wire   [63:0] tmp_50_cast_fu_540_p1;
wire   [7:0] tmp_1_16_fu_377_p3;
wire   [9:0] tmp_s_fu_369_p3;
wire   [9:0] p_shl2_cast_fu_385_p1;
wire   [6:0] tmp_3_18_fu_395_p3;
wire   [6:0] tmp_cast_fu_365_p1;
wire   [5:0] tmp_5_20_fu_409_p3;
wire   [9:0] tmp_4_cast_fu_433_p1;
wire   [9:0] tmp_7_22_fu_437_p2;
wire   [9:0] grp_fu_448_p1;
wire    ap_CS_fsm_state5;
wire   [1:0] newIndex_fu_457_p4;
wire   [6:0] tmp_8_fu_471_p3;
wire   [4:0] tmp_9_fu_483_p3;
wire   [7:0] p_shl3_cast_fu_479_p1;
wire   [7:0] p_shl4_cast_fu_491_p1;
wire   [7:0] tmp_10_fu_495_p2;
wire   [6:0] newIndex6_cast_fu_467_p1;
wire    ap_CS_fsm_state14;
wire   [31:0] tmp_fu_549_p2;
wire   [4:0] k_8_s_fu_559_p2;
wire    ap_CS_fsm_state22;
wire   [31:0] tmp4_fu_609_p2;
wire   [31:0] tmp1_fu_618_p2;
reg   [28:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 29'd1;
end

kernel_2mm_wrappedEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 32 ))
kernel_2mm_wrappedEe_U90(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(D_load_reg_668),
    .din1(grp_fu_448_p1),
    .ce(1'b1),
    .dout(grp_fu_448_p2)
);

kernel_2mm_wrappecud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_2mm_wrappecud_U91(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(C_0_load_reg_753),
    .din1(tmp_0_load_reg_748),
    .ce(1'b1),
    .dout(grp_fu_532_p2)
);

kernel_2mm_wrappecud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_2mm_wrappecud_U92(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(C_1_load_reg_763),
    .din1(tmp_1_load_reg_758),
    .ce(1'b1),
    .dout(grp_fu_536_p2)
);

kernel_2mm_wrappecud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_2mm_wrappecud_U93(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_6_load_reg_822),
    .din1(C_6_load_reg_827),
    .ce(1'b1),
    .dout(grp_fu_577_p2)
);

kernel_2mm_wrappecud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_2mm_wrappecud_U94(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_7_load_reg_832),
    .din1(C_7_load_reg_837),
    .ce(1'b1),
    .dout(grp_fu_581_p2)
);

kernel_2mm_wrappecud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_2mm_wrappecud_U95(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_2_load_reg_842),
    .din1(C_2_load_reg_847),
    .ce(1'b1),
    .dout(grp_fu_585_p2)
);

kernel_2mm_wrappecud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_2mm_wrappecud_U96(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_3_load_reg_852),
    .din1(C_3_load_reg_857),
    .ce(1'b1),
    .dout(grp_fu_589_p2)
);

kernel_2mm_wrappecud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_2mm_wrappecud_U97(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_load_reg_862),
    .din1(C_4_load_reg_867),
    .ce(1'b1),
    .dout(grp_fu_593_p2)
);

kernel_2mm_wrappecud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_2mm_wrappecud_U98(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_load_reg_872),
    .din1(C_5_load_reg_877),
    .ce(1'b1),
    .dout(grp_fu_597_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_353_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_421_p2 == 1'd1))) begin
        i_reg_309 <= i_1_reg_630;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_309 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_353_p2 == 1'd0))) begin
        j_reg_320 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        j_reg_320 <= j_1_reg_653;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        k_reg_332 <= k_8_7_reg_817;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        k_reg_332 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        sum1_reg_344 <= sum_1_7_fu_622_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        sum1_reg_344 <= sum_reg_673;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        C_0_load_reg_753 <= C_0_q0;
        C_1_load_reg_763 <= C_1_q0;
        tmp_0_load_reg_748 <= tmp_0_q0;
        tmp_1_load_reg_758 <= tmp_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        C_2_addr_reg_708 <= tmp_48_cast_fu_516_p1;
        C_3_addr_reg_713 <= tmp_48_cast_fu_516_p1;
        C_4_addr_reg_718 <= tmp_48_cast_fu_516_p1;
        C_5_addr_reg_723 <= tmp_48_cast_fu_516_p1;
        C_6_addr_reg_728 <= tmp_48_cast_fu_516_p1;
        C_7_addr_reg_733 <= tmp_48_cast_fu_516_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        C_2_load_reg_847 <= C_2_q0;
        C_3_load_reg_857 <= C_3_q0;
        C_4_load_reg_867 <= C_4_q0;
        C_5_load_reg_877 <= C_5_q0;
        tmp_2_load_reg_842 <= tmp_2_q0;
        tmp_3_load_reg_852 <= tmp_3_q0;
        tmp_4_load_reg_862 <= tmp_4_q0;
        tmp_5_load_reg_872 <= tmp_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        C_6_load_reg_827 <= C_6_q0;
        C_7_load_reg_837 <= C_7_q0;
        tmp_6_load_reg_822 <= tmp_6_q0;
        tmp_7_load_reg_832 <= tmp_7_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        D_load_reg_668 <= D_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_421_p2 == 1'd0))) begin
        D_output_addr_reg_663 <= tmp_44_cast_fu_442_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_630 <= i_1_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_653 <= j_1_fu_427_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (exitcond_2_fu_565_p2 == 1'd0))) begin
        k_8_7_reg_817 <= k_8_7_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        sum_1_1_reg_808 <= sum_1_1_fu_553_p2;
        tmp_2_addr_reg_778 <= tmp_50_cast_fu_540_p1;
        tmp_3_addr_reg_783 <= tmp_50_cast_fu_540_p1;
        tmp_4_addr_reg_788 <= tmp_50_cast_fu_540_p1;
        tmp_5_addr_reg_793 <= tmp_50_cast_fu_540_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sum_reg_673 <= grp_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp2_reg_917 <= tmp2_fu_605_p2;
        tmp3_reg_922 <= tmp3_fu_613_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp5_reg_912 <= tmp5_fu_601_p2;
        tmp_6_2_reg_892 <= grp_fu_585_p2;
        tmp_6_3_reg_897 <= grp_fu_589_p2;
        tmp_6_4_reg_902 <= grp_fu_593_p2;
        tmp_6_5_reg_907 <= grp_fu_597_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_11_reg_683 <= tmp_11_fu_501_p2;
        tmp_12_reg_688 <= tmp_12_fu_506_p2;
        tmp_13_reg_693 <= tmp_13_fu_511_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_353_p2 == 1'd0))) begin
        tmp_2_17_reg_635[9 : 3] <= tmp_2_17_fu_389_p2[9 : 3];
        tmp_43_cast_reg_645[5 : 1] <= tmp_43_cast_fu_417_p1[5 : 1];
        tmp_4_19_reg_640 <= tmp_4_19_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_4_cast5_reg_678[4 : 0] <= tmp_4_cast5_fu_453_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_6_1_reg_773 <= grp_fu_536_p2;
        tmp_6_23_reg_768 <= grp_fu_532_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_6_6_reg_882 <= grp_fu_577_p2;
        tmp_6_7_reg_887 <= grp_fu_581_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        C_0_ce0 = 1'b1;
    end else begin
        C_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        C_1_ce0 = 1'b1;
    end else begin
        C_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        C_2_ce0 = 1'b1;
    end else begin
        C_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        C_3_ce0 = 1'b1;
    end else begin
        C_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        C_4_ce0 = 1'b1;
    end else begin
        C_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        C_5_ce0 = 1'b1;
    end else begin
        C_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        C_6_ce0 = 1'b1;
    end else begin
        C_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        C_7_ce0 = 1'b1;
    end else begin
        C_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        D_ce0 = 1'b1;
    end else begin
        D_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        D_output_ce0 = 1'b1;
    end else begin
        D_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        D_output_we0 = 1'b1;
    end else begin
        D_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_353_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_353_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_0_ce0 = 1'b1;
    end else begin
        tmp_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_1_ce0 = 1'b1;
    end else begin
        tmp_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_2_ce0 = 1'b1;
    end else begin
        tmp_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_3_ce0 = 1'b1;
    end else begin
        tmp_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_4_ce0 = 1'b1;
    end else begin
        tmp_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_5_ce0 = 1'b1;
    end else begin
        tmp_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_6_ce0 = 1'b1;
    end else begin
        tmp_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_7_ce0 = 1'b1;
    end else begin
        tmp_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_353_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_421_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((exitcond_2_fu_565_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_0_address0 = tmp_48_cast_fu_516_p1;

assign C_1_address0 = tmp_48_cast_fu_516_p1;

assign C_2_address0 = C_2_addr_reg_708;

assign C_3_address0 = C_3_addr_reg_713;

assign C_4_address0 = C_4_addr_reg_718;

assign C_5_address0 = C_5_addr_reg_723;

assign C_6_address0 = C_6_addr_reg_728;

assign C_7_address0 = C_7_addr_reg_733;

assign D_address0 = tmp_44_cast_fu_442_p1;

assign D_output_address0 = D_output_addr_reg_663;

assign D_output_d0 = sum_1_1_reg_808;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign exitcond1_fu_421_p2 = ((j_reg_320 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond2_fu_353_p2 = ((i_reg_309 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_2_fu_565_p2 = ((k_8_s_fu_559_p2 == 5'd18) ? 1'b1 : 1'b0);

assign grp_fu_448_p1 = 32'd321;

assign i_1_fu_359_p2 = (i_reg_309 + 5'd1);

assign j_1_fu_427_p2 = (j_reg_320 + 5'd1);

assign k_8_7_fu_571_p2 = (k_reg_332 + 5'd8);

assign k_8_s_fu_559_p2 = (k_reg_332 | 5'd2);

assign newIndex6_cast_fu_467_p1 = newIndex_fu_457_p4;

assign newIndex_fu_457_p4 = {{k_reg_332[4:3]}};

assign p_shl2_cast_fu_385_p1 = tmp_1_16_fu_377_p3;

assign p_shl3_cast_fu_479_p1 = tmp_8_fu_471_p3;

assign p_shl4_cast_fu_491_p1 = tmp_9_fu_483_p3;

assign sum_1_1_fu_553_p2 = (sum1_reg_344 + tmp_fu_549_p2);

assign sum_1_7_fu_622_p2 = (tmp3_reg_922 + tmp1_fu_618_p2);

assign tmp1_fu_618_p2 = (tmp2_reg_917 + sum_1_1_reg_808);

assign tmp2_fu_605_p2 = (tmp_6_2_reg_892 + tmp_6_3_reg_897);

assign tmp3_fu_613_p2 = (tmp5_reg_912 + tmp4_fu_609_p2);

assign tmp4_fu_609_p2 = (tmp_6_4_reg_902 + tmp_6_5_reg_907);

assign tmp5_fu_601_p2 = (tmp_6_6_reg_882 + tmp_6_7_reg_887);

assign tmp_0_address0 = tmp_49_cast_fu_527_p1;

assign tmp_10_fu_495_p2 = (p_shl3_cast_fu_479_p1 - p_shl4_cast_fu_491_p1);

assign tmp_11_fu_501_p2 = (tmp_10_fu_495_p2 + tmp_4_cast5_reg_678);

assign tmp_12_fu_506_p2 = (tmp_4_19_reg_640 + newIndex6_cast_fu_467_p1);

assign tmp_13_fu_511_p2 = (tmp_43_cast_reg_645 + newIndex6_cast_fu_467_p1);

assign tmp_1_16_fu_377_p3 = {{i_reg_309}, {3'd0}};

assign tmp_1_address0 = tmp_49_cast_fu_527_p1;

assign tmp_2_17_fu_389_p2 = (tmp_s_fu_369_p3 - p_shl2_cast_fu_385_p1);

assign tmp_2_address0 = tmp_2_addr_reg_778;

assign tmp_3_18_fu_395_p3 = {{i_reg_309}, {2'd0}};

assign tmp_3_address0 = tmp_3_addr_reg_783;

assign tmp_43_cast_fu_417_p1 = tmp_5_20_fu_409_p3;

assign tmp_44_cast_fu_442_p1 = $signed(tmp_7_22_fu_437_p2);

assign tmp_48_cast_fu_516_p1 = $signed(tmp_11_reg_683);

assign tmp_49_cast_fu_527_p1 = $signed(tmp_12_reg_688);

assign tmp_4_19_fu_403_p2 = (tmp_3_18_fu_395_p3 - tmp_cast_fu_365_p1);

assign tmp_4_address0 = tmp_4_addr_reg_788;

assign tmp_4_cast5_fu_453_p1 = j_reg_320;

assign tmp_4_cast_fu_433_p1 = j_reg_320;

assign tmp_50_cast_fu_540_p1 = tmp_13_reg_693;

assign tmp_5_20_fu_409_p3 = {{i_reg_309}, {1'd0}};

assign tmp_5_address0 = tmp_5_addr_reg_793;

assign tmp_6_address0 = tmp_50_cast_fu_540_p1;

assign tmp_7_22_fu_437_p2 = (tmp_2_17_reg_635 + tmp_4_cast_fu_433_p1);

assign tmp_7_address0 = tmp_50_cast_fu_540_p1;

assign tmp_8_fu_471_p3 = {{newIndex_fu_457_p4}, {5'd0}};

assign tmp_9_fu_483_p3 = {{newIndex_fu_457_p4}, {3'd0}};

assign tmp_cast_fu_365_p1 = i_reg_309;

assign tmp_fu_549_p2 = (tmp_6_1_reg_773 + tmp_6_23_reg_768);

assign tmp_s_fu_369_p3 = {{i_reg_309}, {5'd0}};

always @ (posedge ap_clk) begin
    tmp_2_17_reg_635[2:0] <= 3'b000;
    tmp_43_cast_reg_645[0] <= 1'b0;
    tmp_43_cast_reg_645[6] <= 1'b0;
    tmp_4_cast5_reg_678[7:5] <= 3'b000;
end

endmodule //func24
