-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity buffer_func1_C7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_input_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_input_0_ce0 : OUT STD_LOGIC;
    C_input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_input_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_input_1_ce0 : OUT STD_LOGIC;
    C_input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_input_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_input_2_ce0 : OUT STD_LOGIC;
    C_input_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_input_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_input_3_ce0 : OUT STD_LOGIC;
    C_input_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_input_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_input_4_ce0 : OUT STD_LOGIC;
    C_input_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_input_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_input_5_ce0 : OUT STD_LOGIC;
    C_input_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_input_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_input_6_ce0 : OUT STD_LOGIC;
    C_input_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_input_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_input_7_ce0 : OUT STD_LOGIC;
    C_input_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_mid_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_mid_0_ce0 : OUT STD_LOGIC;
    C_mid_0_we0 : OUT STD_LOGIC;
    C_mid_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_mid_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_mid_1_ce0 : OUT STD_LOGIC;
    C_mid_1_we0 : OUT STD_LOGIC;
    C_mid_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_mid_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_mid_2_ce0 : OUT STD_LOGIC;
    C_mid_2_we0 : OUT STD_LOGIC;
    C_mid_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_mid_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_mid_3_ce0 : OUT STD_LOGIC;
    C_mid_3_we0 : OUT STD_LOGIC;
    C_mid_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_mid_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_mid_4_ce0 : OUT STD_LOGIC;
    C_mid_4_we0 : OUT STD_LOGIC;
    C_mid_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_mid_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_mid_5_ce0 : OUT STD_LOGIC;
    C_mid_5_we0 : OUT STD_LOGIC;
    C_mid_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_mid_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_mid_6_ce0 : OUT STD_LOGIC;
    C_mid_6_we0 : OUT STD_LOGIC;
    C_mid_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_mid_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_mid_7_ce0 : OUT STD_LOGIC;
    C_mid_7_we0 : OUT STD_LOGIC;
    C_mid_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of buffer_func1_C7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_4_fu_295_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_4_reg_376 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_cast_fu_301_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_reg_381 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_345_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_reg_386 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_70_cast_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_cast_reg_391 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal C_input_0_load_reg_419 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal C_input_1_load_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal C_mid_2_addr_reg_459 : STD_LOGIC_VECTOR (5 downto 0);
    signal C_mid_3_addr_reg_464 : STD_LOGIC_VECTOR (5 downto 0);
    signal C_mid_4_addr_reg_469 : STD_LOGIC_VECTOR (5 downto 0);
    signal C_mid_5_addr_reg_474 : STD_LOGIC_VECTOR (5 downto 0);
    signal C_mid_6_addr_reg_479 : STD_LOGIC_VECTOR (5 downto 0);
    signal C_mid_7_addr_reg_484 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_10_7_fu_367_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_10_7_reg_492 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_2_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_input_2_load_reg_497 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal C_input_3_load_reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_input_4_load_reg_507 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_input_5_load_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_input_6_load_reg_517 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_input_7_load_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_266 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_277 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal newIndex_fu_305_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_315_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_26_fu_327_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_323_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_cast_fu_335_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_339_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_10_s_fu_355_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_2_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_reg_266 <= j_4_reg_376;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_266 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_289_p2 = ap_const_lv1_0))) then 
                k_reg_277 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                k_reg_277 <= k_10_7_reg_492;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                C_input_0_load_reg_419 <= C_input_0_q0;
                C_input_1_load_reg_424 <= C_input_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                C_input_2_load_reg_497 <= C_input_2_q0;
                C_input_3_load_reg_502 <= C_input_3_q0;
                C_input_4_load_reg_507 <= C_input_4_q0;
                C_input_5_load_reg_512 <= C_input_5_q0;
                C_input_6_load_reg_517 <= C_input_6_q0;
                C_input_7_load_reg_522 <= C_input_7_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                C_mid_2_addr_reg_459 <= tmp_70_cast_reg_391(6 - 1 downto 0);
                C_mid_3_addr_reg_464 <= tmp_70_cast_reg_391(6 - 1 downto 0);
                C_mid_4_addr_reg_469 <= tmp_70_cast_reg_391(6 - 1 downto 0);
                C_mid_5_addr_reg_474 <= tmp_70_cast_reg_391(6 - 1 downto 0);
                C_mid_6_addr_reg_479 <= tmp_70_cast_reg_391(6 - 1 downto 0);
                C_mid_7_addr_reg_484 <= tmp_70_cast_reg_391(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_4_reg_376 <= j_4_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_2_fu_361_p2 = ap_const_lv1_0))) then
                k_10_7_reg_492 <= k_10_7_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_28_reg_386 <= tmp_28_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_70_cast_reg_391 <= tmp_70_cast_fu_350_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_289_p2 = ap_const_lv1_0))) then
                    tmp_cast_reg_381(4 downto 0) <= tmp_cast_fu_301_p1(4 downto 0);
            end if;
        end if;
    end process;
    tmp_cast_reg_381(7 downto 5) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_289_p2, ap_CS_fsm_state6, exitcond_2_fu_361_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_289_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((exitcond_2_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    C_input_0_address0 <= tmp_70_cast_fu_350_p1(7 - 1 downto 0);

    C_input_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            C_input_0_ce0 <= ap_const_logic_1;
        else 
            C_input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_input_1_address0 <= tmp_70_cast_fu_350_p1(7 - 1 downto 0);

    C_input_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            C_input_1_ce0 <= ap_const_logic_1;
        else 
            C_input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_input_2_address0 <= tmp_70_cast_reg_391(6 - 1 downto 0);

    C_input_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_input_2_ce0 <= ap_const_logic_1;
        else 
            C_input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_input_3_address0 <= tmp_70_cast_reg_391(6 - 1 downto 0);

    C_input_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_input_3_ce0 <= ap_const_logic_1;
        else 
            C_input_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_input_4_address0 <= tmp_70_cast_reg_391(6 - 1 downto 0);

    C_input_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_input_4_ce0 <= ap_const_logic_1;
        else 
            C_input_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_input_5_address0 <= tmp_70_cast_reg_391(6 - 1 downto 0);

    C_input_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_input_5_ce0 <= ap_const_logic_1;
        else 
            C_input_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_input_6_address0 <= tmp_70_cast_reg_391(6 - 1 downto 0);

    C_input_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_input_6_ce0 <= ap_const_logic_1;
        else 
            C_input_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_input_7_address0 <= tmp_70_cast_reg_391(6 - 1 downto 0);

    C_input_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_input_7_ce0 <= ap_const_logic_1;
        else 
            C_input_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_mid_0_address0 <= tmp_70_cast_reg_391(7 - 1 downto 0);

    C_mid_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_mid_0_ce0 <= ap_const_logic_1;
        else 
            C_mid_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_mid_0_d0 <= C_input_0_load_reg_419;

    C_mid_0_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_mid_0_we0 <= ap_const_logic_1;
        else 
            C_mid_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_mid_1_address0 <= tmp_70_cast_reg_391(7 - 1 downto 0);

    C_mid_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_mid_1_ce0 <= ap_const_logic_1;
        else 
            C_mid_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_mid_1_d0 <= C_input_1_load_reg_424;

    C_mid_1_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_mid_1_we0 <= ap_const_logic_1;
        else 
            C_mid_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_mid_2_address0 <= C_mid_2_addr_reg_459;

    C_mid_2_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_mid_2_ce0 <= ap_const_logic_1;
        else 
            C_mid_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_mid_2_d0 <= C_input_2_load_reg_497;

    C_mid_2_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_mid_2_we0 <= ap_const_logic_1;
        else 
            C_mid_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_mid_3_address0 <= C_mid_3_addr_reg_464;

    C_mid_3_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_mid_3_ce0 <= ap_const_logic_1;
        else 
            C_mid_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_mid_3_d0 <= C_input_3_load_reg_502;

    C_mid_3_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_mid_3_we0 <= ap_const_logic_1;
        else 
            C_mid_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_mid_4_address0 <= C_mid_4_addr_reg_469;

    C_mid_4_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_mid_4_ce0 <= ap_const_logic_1;
        else 
            C_mid_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_mid_4_d0 <= C_input_4_load_reg_507;

    C_mid_4_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_mid_4_we0 <= ap_const_logic_1;
        else 
            C_mid_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_mid_5_address0 <= C_mid_5_addr_reg_474;

    C_mid_5_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_mid_5_ce0 <= ap_const_logic_1;
        else 
            C_mid_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_mid_5_d0 <= C_input_5_load_reg_512;

    C_mid_5_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_mid_5_we0 <= ap_const_logic_1;
        else 
            C_mid_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_mid_6_address0 <= C_mid_6_addr_reg_479;

    C_mid_6_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_mid_6_ce0 <= ap_const_logic_1;
        else 
            C_mid_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_mid_6_d0 <= C_input_6_load_reg_517;

    C_mid_6_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_mid_6_we0 <= ap_const_logic_1;
        else 
            C_mid_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_mid_7_address0 <= C_mid_7_addr_reg_484;

    C_mid_7_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_mid_7_ce0 <= ap_const_logic_1;
        else 
            C_mid_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_mid_7_d0 <= C_input_7_load_reg_522;

    C_mid_7_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_mid_7_we0 <= ap_const_logic_1;
        else 
            C_mid_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_289_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_289_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_289_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_289_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_289_p2 <= "1" when (j_reg_266 = ap_const_lv5_18) else "0";
    exitcond_2_fu_361_p2 <= "1" when (k_10_s_fu_355_p2 = ap_const_lv5_12) else "0";
    j_4_fu_295_p2 <= std_logic_vector(unsigned(j_reg_266) + unsigned(ap_const_lv5_1));
    k_10_7_fu_367_p2 <= std_logic_vector(unsigned(k_reg_277) + unsigned(ap_const_lv5_8));
    k_10_s_fu_355_p2 <= (k_reg_277 or ap_const_lv5_2);
    newIndex_fu_305_p4 <= k_reg_277(4 downto 3);
    p_shl1_cast_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_327_p3),8));
    p_shl_cast_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_315_p3),8));
    tmp_26_fu_327_p3 <= (newIndex_fu_305_p4 & ap_const_lv3_0);
    tmp_27_fu_339_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_323_p1) - unsigned(p_shl1_cast_fu_335_p1));
    tmp_28_fu_345_p2 <= std_logic_vector(unsigned(tmp_27_fu_339_p2) + unsigned(tmp_cast_reg_381));
        tmp_70_cast_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_reg_386),64));

    tmp_cast_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_266),8));
    tmp_s_fu_315_p3 <= (newIndex_fu_305_p4 & ap_const_lv5_0);
end behav;
