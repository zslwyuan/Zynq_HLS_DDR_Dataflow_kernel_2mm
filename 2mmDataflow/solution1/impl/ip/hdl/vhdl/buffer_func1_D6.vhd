-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity buffer_func1_D6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    D_input_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    D_input_ce0 : OUT STD_LOGIC;
    D_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    D_mid_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    D_mid_ce0 : OUT STD_LOGIC;
    D_mid_we0 : OUT STD_LOGIC;
    D_mid_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of buffer_func1_D6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_3_fu_80_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_141 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_24_fu_106_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_reg_146 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond1_fu_74_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_118_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_3_reg_154 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_66_cast_fu_133_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_cast_reg_159 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_input_load_reg_169 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_reg_52 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_63 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_s_fu_94_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_86_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_102_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_fu_124_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_25_fu_128_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_112_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_52 <= i_3_reg_141;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_52 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_63_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_74_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_63 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_reg_63 <= j_3_reg_154;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                D_input_load_reg_169 <= D_input_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_3_reg_141 <= i_3_fu_80_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_3_reg_154 <= j_3_fu_118_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_74_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_24_reg_146(9 downto 3) <= tmp_24_fu_106_p2(9 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_112_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_66_cast_reg_159 <= tmp_66_cast_fu_133_p1;
            end if;
        end if;
    end process;
    tmp_24_reg_146(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_74_p2, ap_CS_fsm_state3, exitcond_fu_112_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_74_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_fu_112_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    D_input_address0 <= tmp_66_cast_fu_133_p1(9 - 1 downto 0);

    D_input_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            D_input_ce0 <= ap_const_logic_1;
        else 
            D_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_mid_address0 <= tmp_66_cast_reg_159(9 - 1 downto 0);

    D_mid_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            D_mid_ce0 <= ap_const_logic_1;
        else 
            D_mid_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_mid_d0 <= D_input_load_reg_169;

    D_mid_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            D_mid_we0 <= ap_const_logic_1;
        else 
            D_mid_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_74_p2)
    begin
        if ((((exitcond1_fu_74_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_74_p2)
    begin
        if (((exitcond1_fu_74_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_74_p2 <= "1" when (i_reg_52 = ap_const_lv5_10) else "0";
    exitcond_fu_112_p2 <= "1" when (j_reg_63 = ap_const_lv5_18) else "0";
    i_3_fu_80_p2 <= std_logic_vector(unsigned(i_reg_52) + unsigned(ap_const_lv5_1));
    j_3_fu_118_p2 <= std_logic_vector(unsigned(j_reg_63) + unsigned(ap_const_lv5_1));
    p_shl1_cast_fu_102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_94_p3),10));
    tmp_24_fu_106_p2 <= std_logic_vector(unsigned(tmp_fu_86_p3) - unsigned(p_shl1_cast_fu_102_p1));
    tmp_25_fu_128_p2 <= std_logic_vector(unsigned(tmp_24_reg_146) + unsigned(tmp_cast_fu_124_p1));
        tmp_66_cast_fu_133_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_25_fu_128_p2),64));

    tmp_cast_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_63),10));
    tmp_fu_86_p3 <= (i_reg_52 & ap_const_lv5_0);
    tmp_s_fu_94_p3 <= (i_reg_52 & ap_const_lv3_0);
end behav;
