// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module buffer_func1_D6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        D_input_address0,
        D_input_ce0,
        D_input_q0,
        D_mid_address0,
        D_mid_ce0,
        D_mid_we0,
        D_mid_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] D_input_address0;
output   D_input_ce0;
input  [31:0] D_input_q0;
output  [8:0] D_mid_address0;
output   D_mid_ce0;
output   D_mid_we0;
output  [31:0] D_mid_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg D_input_ce0;
reg D_mid_ce0;
reg D_mid_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_3_fu_80_p2;
reg   [4:0] i_3_reg_141;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_24_fu_106_p2;
reg   [9:0] tmp_24_reg_146;
wire   [0:0] exitcond1_fu_74_p2;
wire   [4:0] j_3_fu_118_p2;
reg   [4:0] j_3_reg_154;
wire    ap_CS_fsm_state3;
wire  signed [63:0] tmp_66_cast_fu_133_p1;
reg  signed [63:0] tmp_66_cast_reg_159;
wire   [0:0] exitcond_fu_112_p2;
reg   [31:0] D_input_load_reg_169;
wire    ap_CS_fsm_state4;
reg   [4:0] i_reg_52;
reg   [4:0] j_reg_63;
wire    ap_CS_fsm_state5;
wire   [7:0] tmp_s_fu_94_p3;
wire   [9:0] tmp_fu_86_p3;
wire   [9:0] p_shl1_cast_fu_102_p1;
wire   [9:0] tmp_cast_fu_124_p1;
wire   [9:0] tmp_25_fu_128_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_52 <= i_3_reg_141;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_52 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_74_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_63 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_63 <= j_3_reg_154;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        D_input_load_reg_169 <= D_input_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_141 <= i_3_fu_80_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_3_reg_154 <= j_3_fu_118_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_74_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_24_reg_146[9 : 3] <= tmp_24_fu_106_p2[9 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_112_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_66_cast_reg_159 <= tmp_66_cast_fu_133_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        D_input_ce0 = 1'b1;
    end else begin
        D_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        D_mid_ce0 = 1'b1;
    end else begin
        D_mid_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        D_mid_we0 = 1'b1;
    end else begin
        D_mid_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond1_fu_74_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_74_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_74_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_fu_112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign D_input_address0 = tmp_66_cast_fu_133_p1;

assign D_mid_address0 = tmp_66_cast_reg_159;

assign D_mid_d0 = D_input_load_reg_169;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign exitcond1_fu_74_p2 = ((i_reg_52 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_fu_112_p2 = ((j_reg_63 == 5'd24) ? 1'b1 : 1'b0);

assign i_3_fu_80_p2 = (i_reg_52 + 5'd1);

assign j_3_fu_118_p2 = (j_reg_63 + 5'd1);

assign p_shl1_cast_fu_102_p1 = tmp_s_fu_94_p3;

assign tmp_24_fu_106_p2 = (tmp_fu_86_p3 - p_shl1_cast_fu_102_p1);

assign tmp_25_fu_128_p2 = (tmp_24_reg_146 + tmp_cast_fu_124_p1);

assign tmp_66_cast_fu_133_p1 = $signed(tmp_25_fu_128_p2);

assign tmp_cast_fu_124_p1 = j_reg_63;

assign tmp_fu_86_p3 = {{i_reg_52}, {5'd0}};

assign tmp_s_fu_94_p3 = {{i_reg_52}, {3'd0}};

always @ (posedge ap_clk) begin
    tmp_24_reg_146[2:0] <= 3'b000;
end

endmodule //buffer_func1_D6
