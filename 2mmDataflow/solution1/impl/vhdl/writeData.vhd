-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity writeData is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_D_output_AXI_AWVALID : OUT STD_LOGIC;
    m_axi_D_output_AXI_AWREADY : IN STD_LOGIC;
    m_axi_D_output_AXI_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_D_output_AXI_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_D_output_AXI_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_D_output_AXI_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_D_output_AXI_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_D_output_AXI_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_D_output_AXI_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_D_output_AXI_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_D_output_AXI_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_D_output_AXI_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_D_output_AXI_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_D_output_AXI_WVALID : OUT STD_LOGIC;
    m_axi_D_output_AXI_WREADY : IN STD_LOGIC;
    m_axi_D_output_AXI_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_D_output_AXI_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_D_output_AXI_WLAST : OUT STD_LOGIC;
    m_axi_D_output_AXI_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_D_output_AXI_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_D_output_AXI_ARVALID : OUT STD_LOGIC;
    m_axi_D_output_AXI_ARREADY : IN STD_LOGIC;
    m_axi_D_output_AXI_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_D_output_AXI_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_D_output_AXI_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_D_output_AXI_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_D_output_AXI_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_D_output_AXI_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_D_output_AXI_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_D_output_AXI_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_D_output_AXI_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_D_output_AXI_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_D_output_AXI_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_D_output_AXI_RVALID : IN STD_LOGIC;
    m_axi_D_output_AXI_RREADY : OUT STD_LOGIC;
    m_axi_D_output_AXI_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_D_output_AXI_RLAST : IN STD_LOGIC;
    m_axi_D_output_AXI_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_D_output_AXI_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_D_output_AXI_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_D_output_AXI_BVALID : IN STD_LOGIC;
    m_axi_D_output_AXI_BREADY : OUT STD_LOGIC;
    m_axi_D_output_AXI_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_D_output_AXI_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_D_output_AXI_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    D_output_AXI_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    D_output_AXI_offset_empty_n : IN STD_LOGIC;
    D_output_AXI_offset_read : OUT STD_LOGIC;
    D_output_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    D_output_ce0 : OUT STD_LOGIC;
    D_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of writeData is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_180 : STD_LOGIC_VECTOR (8 downto 0) := "110000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal D_output_AXI_blk_n_AW : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten_i_reg_273 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_i_reg_273_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal D_output_AXI_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal exitcond_flatten_i_reg_273_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal D_output_AXI_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal exitcond_flatten_i_reg_273_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal D_output_AXI_offset_blk_n : STD_LOGIC;
    signal indvar_flatten_i_reg_109 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_i_reg_120 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_i_reg_131 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_cast_i_fu_152_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_cast_i_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal exitcond_flatten_i_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_D_output_AXI_AWREADY : STD_LOGIC;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_D_output_AXI_WREADY : STD_LOGIC;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_i_reg_273_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_i_reg_273_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_i_reg_273_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_i_reg_273_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_s_fu_162_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal j_mid2_i_fu_180_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid2_i_reg_282 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_v_i_fu_188_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_v_i_reg_287 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_i_fu_220_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_i_reg_292 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_fu_226_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_i_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_i_reg_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_output_load_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_phi_mux_i_i_phi_fu_124_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_cast_i_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_i_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_D_output_AXI_AWREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_m_axi_D_output_AXI_WREADY : STD_LOGIC := '0';
    signal tmp_fu_142_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal exitcond9_i_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_i_fu_168_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i_fu_196_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_i_fu_208_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_i_fu_204_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_i_fu_216_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_cast_i_fu_232_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_cast_i_fu_235_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_i_fu_238_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_cast10_i_fu_244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_const_logic_0 = D_output_AXI_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif ((not(((ap_const_logic_0 = D_output_AXI_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_D_output_AXI_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_D_output_AXI_AWREADY <= ap_const_logic_0;
            else
                if (((exitcond_flatten_i_reg_273_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_m_axi_D_output_AXI_AWREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_axi_D_output_AXI_AWREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_D_output_AXI_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_D_output_AXI_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_D_output_AXI_WREADY <= ap_const_logic_0;
            else
                if (((exitcond_flatten_i_reg_273_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_m_axi_D_output_AXI_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_axi_D_output_AXI_WREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_D_output_AXI_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_i_reg_273 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_i_reg_120 <= tmp_mid2_v_i_reg_287;
            elsif ((not(((ap_const_logic_0 = D_output_AXI_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_reg_120 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_i_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_i_fu_156_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_i_reg_109 <= indvar_flatten_next_s_fu_162_p2;
            elsif ((not(((ap_const_logic_0 = D_output_AXI_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_i_reg_109 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_i_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_i_fu_156_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_i_reg_131 <= j_fu_226_p2;
            elsif ((not(((ap_const_logic_0 = D_output_AXI_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_i_reg_131 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_i_reg_273_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                D_output_load_reg_318 <= D_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_i_reg_273 <= exitcond_flatten_i_fu_156_p2;
                exitcond_flatten_i_reg_273_pp0_iter1_reg <= exitcond_flatten_i_reg_273;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_flatten_i_reg_273_pp0_iter2_reg <= exitcond_flatten_i_reg_273_pp0_iter1_reg;
                exitcond_flatten_i_reg_273_pp0_iter3_reg <= exitcond_flatten_i_reg_273_pp0_iter2_reg;
                exitcond_flatten_i_reg_273_pp0_iter4_reg <= exitcond_flatten_i_reg_273_pp0_iter3_reg;
                exitcond_flatten_i_reg_273_pp0_iter5_reg <= exitcond_flatten_i_reg_273_pp0_iter4_reg;
                exitcond_flatten_i_reg_273_pp0_iter6_reg <= exitcond_flatten_i_reg_273_pp0_iter5_reg;
                exitcond_flatten_i_reg_273_pp0_iter7_reg <= exitcond_flatten_i_reg_273_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_i_fu_156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                j_mid2_i_reg_282 <= j_mid2_i_fu_180_p3;
                    tmp_4_i_reg_292(10 downto 3) <= tmp_4_i_fu_220_p2(10 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = D_output_AXI_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    sext_cast_i_reg_268(29 downto 0) <= sext_cast_i_fu_152_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_i_reg_273 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sum_i_reg_302 <= sum_i_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_i_fu_156_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_mid2_v_i_reg_287 <= tmp_mid2_v_i_fu_188_p3;
            end if;
        end if;
    end process;
    sext_cast_i_reg_268(31 downto 30) <= "00";
    tmp_4_i_reg_292(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, D_output_AXI_offset_empty_n, ap_enable_reg_pp0_iter8, exitcond_flatten_i_fu_156_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = D_output_AXI_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_i_fu_156_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_i_fu_156_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    D_output_AXI_blk_n_AW_assign_proc : process(m_axi_D_output_AXI_AWREADY, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, exitcond_flatten_i_reg_273_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten_i_reg_273_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            D_output_AXI_blk_n_AW <= m_axi_D_output_AXI_AWREADY;
        else 
            D_output_AXI_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    D_output_AXI_blk_n_B_assign_proc : process(m_axi_D_output_AXI_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, exitcond_flatten_i_reg_273_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten_i_reg_273_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            D_output_AXI_blk_n_B <= m_axi_D_output_AXI_BVALID;
        else 
            D_output_AXI_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    D_output_AXI_blk_n_W_assign_proc : process(m_axi_D_output_AXI_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, exitcond_flatten_i_reg_273_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten_i_reg_273_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            D_output_AXI_blk_n_W <= m_axi_D_output_AXI_WREADY;
        else 
            D_output_AXI_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    D_output_AXI_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, D_output_AXI_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            D_output_AXI_offset_blk_n <= D_output_AXI_offset_empty_n;
        else 
            D_output_AXI_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    D_output_AXI_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, D_output_AXI_offset_empty_n)
    begin
        if ((not(((ap_const_logic_0 = D_output_AXI_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            D_output_AXI_offset_read <= ap_const_logic_1;
        else 
            D_output_AXI_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    D_output_address0 <= tmp_5_cast_i_fu_248_p1(9 - 1 downto 0);

    D_output_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            D_output_ce0 <= ap_const_logic_1;
        else 
            D_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_D_output_AXI_BVALID, ap_enable_reg_pp0_iter8, exitcond_flatten_i_reg_273_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((exitcond_flatten_i_reg_273_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_D_output_AXI_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_D_output_AXI_BVALID, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, exitcond_flatten_i_reg_273_pp0_iter7_reg, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((exitcond_flatten_i_reg_273_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_D_output_AXI_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_D_output_AXI_BVALID, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, exitcond_flatten_i_reg_273_pp0_iter7_reg, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((exitcond_flatten_i_reg_273_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_D_output_AXI_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, D_output_AXI_offset_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = D_output_AXI_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter8_assign_proc : process(m_axi_D_output_AXI_BVALID, exitcond_flatten_i_reg_273_pp0_iter7_reg)
    begin
                ap_block_state10_pp0_stage0_iter8 <= ((exitcond_flatten_i_reg_273_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_D_output_AXI_BVALID = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(exitcond_flatten_i_reg_273_pp0_iter1_reg, ap_sig_ioackin_m_axi_D_output_AXI_AWREADY)
    begin
                ap_block_state4_io <= ((exitcond_flatten_i_reg_273_pp0_iter1_reg = ap_const_lv1_0) and (ap_sig_ioackin_m_axi_D_output_AXI_AWREADY = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(exitcond_flatten_i_reg_273_pp0_iter2_reg, ap_sig_ioackin_m_axi_D_output_AXI_WREADY)
    begin
                ap_block_state5_io <= ((exitcond_flatten_i_reg_273_pp0_iter2_reg = ap_const_lv1_0) and (ap_sig_ioackin_m_axi_D_output_AXI_WREADY = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_i_fu_156_p2)
    begin
        if ((exitcond_flatten_i_fu_156_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_i_phi_fu_124_p4_assign_proc : process(ap_block_pp0_stage0, exitcond_flatten_i_reg_273, i_i_reg_120, ap_CS_fsm_pp0_stage0, tmp_mid2_v_i_reg_287, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten_i_reg_273 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_i_phi_fu_124_p4 <= tmp_mid2_v_i_reg_287;
        else 
            ap_phi_mux_i_i_phi_fu_124_p4 <= i_i_reg_120;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_D_output_AXI_AWREADY_assign_proc : process(m_axi_D_output_AXI_AWREADY, ap_reg_ioackin_m_axi_D_output_AXI_AWREADY)
    begin
        if ((ap_reg_ioackin_m_axi_D_output_AXI_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_D_output_AXI_AWREADY <= m_axi_D_output_AXI_AWREADY;
        else 
            ap_sig_ioackin_m_axi_D_output_AXI_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_D_output_AXI_WREADY_assign_proc : process(m_axi_D_output_AXI_WREADY, ap_reg_ioackin_m_axi_D_output_AXI_WREADY)
    begin
        if ((ap_reg_ioackin_m_axi_D_output_AXI_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_D_output_AXI_WREADY <= m_axi_D_output_AXI_WREADY;
        else 
            ap_sig_ioackin_m_axi_D_output_AXI_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond9_i_fu_174_p2 <= "1" when (j_i_reg_131 = ap_const_lv5_18) else "0";
    exitcond_flatten_i_fu_156_p2 <= "1" when (indvar_flatten_i_reg_109 = ap_const_lv9_180) else "0";
    i_1_i_fu_168_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_i_phi_fu_124_p4) + unsigned(ap_const_lv5_1));
    indvar_flatten_next_s_fu_162_p2 <= std_logic_vector(unsigned(indvar_flatten_i_reg_109) + unsigned(ap_const_lv9_1));
    j_fu_226_p2 <= std_logic_vector(unsigned(j_mid2_i_fu_180_p3) + unsigned(ap_const_lv5_1));
    j_mid2_i_fu_180_p3 <= 
        ap_const_lv5_0 when (exitcond9_i_fu_174_p2(0) = '1') else 
        j_i_reg_131;
    m_axi_D_output_AXI_ARADDR <= ap_const_lv32_0;
    m_axi_D_output_AXI_ARBURST <= ap_const_lv2_0;
    m_axi_D_output_AXI_ARCACHE <= ap_const_lv4_0;
    m_axi_D_output_AXI_ARID <= ap_const_lv1_0;
    m_axi_D_output_AXI_ARLEN <= ap_const_lv32_0;
    m_axi_D_output_AXI_ARLOCK <= ap_const_lv2_0;
    m_axi_D_output_AXI_ARPROT <= ap_const_lv3_0;
    m_axi_D_output_AXI_ARQOS <= ap_const_lv4_0;
    m_axi_D_output_AXI_ARREGION <= ap_const_lv4_0;
    m_axi_D_output_AXI_ARSIZE <= ap_const_lv3_0;
    m_axi_D_output_AXI_ARUSER <= ap_const_lv1_0;
    m_axi_D_output_AXI_ARVALID <= ap_const_logic_0;
    m_axi_D_output_AXI_AWADDR <= sum_cast_i_fu_258_p1(32 - 1 downto 0);
    m_axi_D_output_AXI_AWBURST <= ap_const_lv2_0;
    m_axi_D_output_AXI_AWCACHE <= ap_const_lv4_0;
    m_axi_D_output_AXI_AWID <= ap_const_lv1_0;
    m_axi_D_output_AXI_AWLEN <= ap_const_lv32_1;
    m_axi_D_output_AXI_AWLOCK <= ap_const_lv2_0;
    m_axi_D_output_AXI_AWPROT <= ap_const_lv3_0;
    m_axi_D_output_AXI_AWQOS <= ap_const_lv4_0;
    m_axi_D_output_AXI_AWREGION <= ap_const_lv4_0;
    m_axi_D_output_AXI_AWSIZE <= ap_const_lv3_0;
    m_axi_D_output_AXI_AWUSER <= ap_const_lv1_0;

    m_axi_D_output_AXI_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter2, exitcond_flatten_i_reg_273_pp0_iter1_reg, ap_reg_ioackin_m_axi_D_output_AXI_AWREADY, ap_block_pp0_stage0_01001)
    begin
        if (((exitcond_flatten_i_reg_273_pp0_iter1_reg = ap_const_lv1_0) and (ap_reg_ioackin_m_axi_D_output_AXI_AWREADY = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            m_axi_D_output_AXI_AWVALID <= ap_const_logic_1;
        else 
            m_axi_D_output_AXI_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_D_output_AXI_BREADY_assign_proc : process(ap_enable_reg_pp0_iter8, exitcond_flatten_i_reg_273_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_i_reg_273_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_D_output_AXI_BREADY <= ap_const_logic_1;
        else 
            m_axi_D_output_AXI_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_D_output_AXI_RREADY <= ap_const_logic_0;
    m_axi_D_output_AXI_WDATA <= D_output_load_reg_318;
    m_axi_D_output_AXI_WID <= ap_const_lv1_0;
    m_axi_D_output_AXI_WLAST <= ap_const_logic_0;
    m_axi_D_output_AXI_WSTRB <= ap_const_lv4_F;
    m_axi_D_output_AXI_WUSER <= ap_const_lv1_0;

    m_axi_D_output_AXI_WVALID_assign_proc : process(ap_enable_reg_pp0_iter3, exitcond_flatten_i_reg_273_pp0_iter2_reg, ap_block_pp0_stage0_01001, ap_reg_ioackin_m_axi_D_output_AXI_WREADY)
    begin
        if (((exitcond_flatten_i_reg_273_pp0_iter2_reg = ap_const_lv1_0) and (ap_reg_ioackin_m_axi_D_output_AXI_WREADY = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            m_axi_D_output_AXI_WVALID <= ap_const_logic_1;
        else 
            m_axi_D_output_AXI_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    p_shl2_cast_i_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_i_fu_208_p3),11));
    p_shl_cast_i_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_fu_196_p3),11));
    sext_cast_i_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_142_p4),32));
        sum_cast_i_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_i_reg_302),64));

    sum_i_fu_253_p2 <= std_logic_vector(unsigned(sext_cast_i_reg_268) + unsigned(tmp_5_cast10_i_fu_244_p1));
    tmp_2_cast_i_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_i_reg_282),12));
    tmp_3_i_fu_208_p3 <= (tmp_mid2_v_i_fu_188_p3 & ap_const_lv3_0);
        tmp_4_cast_i_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_i_reg_292),12));

    tmp_4_i_fu_220_p2 <= std_logic_vector(unsigned(p_shl_cast_i_fu_204_p1) - unsigned(p_shl2_cast_i_fu_216_p1));
        tmp_5_cast10_i_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_i_fu_238_p2),32));

        tmp_5_cast_i_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_i_fu_238_p2),64));

    tmp_5_i_fu_238_p2 <= std_logic_vector(signed(tmp_4_cast_i_fu_232_p1) + signed(tmp_2_cast_i_fu_235_p1));
    tmp_fu_142_p4 <= D_output_AXI_offset_dout(31 downto 2);
    tmp_i_fu_196_p3 <= (tmp_mid2_v_i_fu_188_p3 & ap_const_lv5_0);
    tmp_mid2_v_i_fu_188_p3 <= 
        i_1_i_fu_168_p2 when (exitcond9_i_fu_174_p2(0) = '1') else 
        ap_phi_mux_i_i_phi_fu_124_p4;
end behav;
