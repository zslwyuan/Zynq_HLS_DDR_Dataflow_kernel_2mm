-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_2mm_wrapper is
generic (
    C_S_AXI_FOR_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_FOR_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM4_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM4_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM2_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM3_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM3_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM4_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM4_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM4_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_for_control_AWVALID : IN STD_LOGIC;
    s_axi_for_control_AWREADY : OUT STD_LOGIC;
    s_axi_for_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_FOR_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_for_control_WVALID : IN STD_LOGIC;
    s_axi_for_control_WREADY : OUT STD_LOGIC;
    s_axi_for_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_FOR_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_for_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_FOR_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_for_control_ARVALID : IN STD_LOGIC;
    s_axi_for_control_ARREADY : OUT STD_LOGIC;
    s_axi_for_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_FOR_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_for_control_RVALID : OUT STD_LOGIC;
    s_axi_for_control_RREADY : IN STD_LOGIC;
    s_axi_for_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_FOR_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_for_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_for_control_BVALID : OUT STD_LOGIC;
    s_axi_for_control_BREADY : IN STD_LOGIC;
    s_axi_for_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_BUSER_WIDTH-1 downto 0);
    m_axi_gmem3_AWVALID : OUT STD_LOGIC;
    m_axi_gmem3_AWREADY : IN STD_LOGIC;
    m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem3_WVALID : OUT STD_LOGIC;
    m_axi_gmem3_WREADY : IN STD_LOGIC;
    m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem3_WLAST : OUT STD_LOGIC;
    m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_WUSER_WIDTH-1 downto 0);
    m_axi_gmem3_ARVALID : OUT STD_LOGIC;
    m_axi_gmem3_ARREADY : IN STD_LOGIC;
    m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RVALID : IN STD_LOGIC;
    m_axi_gmem3_RREADY : OUT STD_LOGIC;
    m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_RLAST : IN STD_LOGIC;
    m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_RUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BVALID : IN STD_LOGIC;
    m_axi_gmem3_BREADY : OUT STD_LOGIC;
    m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_BUSER_WIDTH-1 downto 0);
    m_axi_gmem4_AWVALID : OUT STD_LOGIC;
    m_axi_gmem4_AWREADY : IN STD_LOGIC;
    m_axi_gmem4_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ADDR_WIDTH-1 downto 0);
    m_axi_gmem4_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ID_WIDTH-1 downto 0);
    m_axi_gmem4_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem4_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem4_WVALID : OUT STD_LOGIC;
    m_axi_gmem4_WREADY : IN STD_LOGIC;
    m_axi_gmem4_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_DATA_WIDTH-1 downto 0);
    m_axi_gmem4_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem4_WLAST : OUT STD_LOGIC;
    m_axi_gmem4_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ID_WIDTH-1 downto 0);
    m_axi_gmem4_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_WUSER_WIDTH-1 downto 0);
    m_axi_gmem4_ARVALID : OUT STD_LOGIC;
    m_axi_gmem4_ARREADY : IN STD_LOGIC;
    m_axi_gmem4_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ADDR_WIDTH-1 downto 0);
    m_axi_gmem4_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ID_WIDTH-1 downto 0);
    m_axi_gmem4_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem4_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem4_RVALID : IN STD_LOGIC;
    m_axi_gmem4_RREADY : OUT STD_LOGIC;
    m_axi_gmem4_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM4_DATA_WIDTH-1 downto 0);
    m_axi_gmem4_RLAST : IN STD_LOGIC;
    m_axi_gmem4_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ID_WIDTH-1 downto 0);
    m_axi_gmem4_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM4_RUSER_WIDTH-1 downto 0);
    m_axi_gmem4_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_BVALID : IN STD_LOGIC;
    m_axi_gmem4_BREADY : OUT STD_LOGIC;
    m_axi_gmem4_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ID_WIDTH-1 downto 0);
    m_axi_gmem4_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM4_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of kernel_2mm_wrapper is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel_2mm_wrapper,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.879000,HLS_SYN_LAT=41564,HLS_SYN_TPT=20770,HLS_SYN_MEM=41,HLS_SYN_DSP=52,HLS_SYN_FF=9805,HLS_SYN_LUT=7618,HLS_VERSION=2018_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal A_AXI : STD_LOGIC_VECTOR (31 downto 0);
    signal B_AXI : STD_LOGIC_VECTOR (31 downto 0);
    signal C_AXI : STD_LOGIC_VECTOR (31 downto 0);
    signal D_input_AXI : STD_LOGIC_VECTOR (31 downto 0);
    signal D_output_AXI : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_RLAST : STD_LOGIC;
    signal gmem0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem1_RLAST : STD_LOGIC;
    signal gmem1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_AWREADY : STD_LOGIC;
    signal gmem2_WREADY : STD_LOGIC;
    signal gmem2_ARREADY : STD_LOGIC;
    signal gmem2_RVALID : STD_LOGIC;
    signal gmem2_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem2_RLAST : STD_LOGIC;
    signal gmem2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BVALID : STD_LOGIC;
    signal gmem2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_AWREADY : STD_LOGIC;
    signal gmem3_WREADY : STD_LOGIC;
    signal gmem3_ARREADY : STD_LOGIC;
    signal gmem3_RVALID : STD_LOGIC;
    signal gmem3_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_RLAST : STD_LOGIC;
    signal gmem3_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem3_BVALID : STD_LOGIC;
    signal gmem3_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem3_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem4_AWREADY : STD_LOGIC;
    signal gmem4_WREADY : STD_LOGIC;
    signal gmem4_ARREADY : STD_LOGIC;
    signal gmem4_RVALID : STD_LOGIC;
    signal gmem4_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem4_RLAST : STD_LOGIC;
    signal gmem4_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem4_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem4_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem4_BVALID : STD_LOGIC;
    signal gmem4_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem4_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem4_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal A_0_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_0_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_0_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_0_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_0_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_2_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_2_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_3_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_3_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_4_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_4_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_5_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_5_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_6_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_6_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_7_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_7_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_output_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_output_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_ap_start : STD_LOGIC;
    signal readData32_U0_ap_done : STD_LOGIC;
    signal readData32_U0_ap_continue : STD_LOGIC;
    signal readData32_U0_ap_idle : STD_LOGIC;
    signal readData32_U0_ap_ready : STD_LOGIC;
    signal readData32_U0_m_axi_A_AXI_AWVALID : STD_LOGIC;
    signal readData32_U0_m_axi_A_AXI_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_m_axi_A_AXI_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_A_AXI_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_m_axi_A_AXI_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readData32_U0_m_axi_A_AXI_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readData32_U0_m_axi_A_AXI_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readData32_U0_m_axi_A_AXI_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_A_AXI_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readData32_U0_m_axi_A_AXI_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_A_AXI_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_A_AXI_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_A_AXI_WVALID : STD_LOGIC;
    signal readData32_U0_m_axi_A_AXI_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_m_axi_A_AXI_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_A_AXI_WLAST : STD_LOGIC;
    signal readData32_U0_m_axi_A_AXI_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_A_AXI_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_A_AXI_ARVALID : STD_LOGIC;
    signal readData32_U0_m_axi_A_AXI_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_m_axi_A_AXI_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_A_AXI_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_m_axi_A_AXI_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readData32_U0_m_axi_A_AXI_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readData32_U0_m_axi_A_AXI_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readData32_U0_m_axi_A_AXI_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_A_AXI_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readData32_U0_m_axi_A_AXI_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_A_AXI_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_A_AXI_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_A_AXI_RREADY : STD_LOGIC;
    signal readData32_U0_m_axi_A_AXI_BREADY : STD_LOGIC;
    signal readData32_U0_m_axi_B_AXI_AWVALID : STD_LOGIC;
    signal readData32_U0_m_axi_B_AXI_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_m_axi_B_AXI_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_B_AXI_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_m_axi_B_AXI_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readData32_U0_m_axi_B_AXI_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readData32_U0_m_axi_B_AXI_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readData32_U0_m_axi_B_AXI_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_B_AXI_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readData32_U0_m_axi_B_AXI_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_B_AXI_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_B_AXI_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_B_AXI_WVALID : STD_LOGIC;
    signal readData32_U0_m_axi_B_AXI_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_m_axi_B_AXI_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_B_AXI_WLAST : STD_LOGIC;
    signal readData32_U0_m_axi_B_AXI_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_B_AXI_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_B_AXI_ARVALID : STD_LOGIC;
    signal readData32_U0_m_axi_B_AXI_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_m_axi_B_AXI_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_B_AXI_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_m_axi_B_AXI_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readData32_U0_m_axi_B_AXI_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readData32_U0_m_axi_B_AXI_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readData32_U0_m_axi_B_AXI_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_B_AXI_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readData32_U0_m_axi_B_AXI_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_B_AXI_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_B_AXI_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_B_AXI_RREADY : STD_LOGIC;
    signal readData32_U0_m_axi_B_AXI_BREADY : STD_LOGIC;
    signal readData32_U0_m_axi_C_AXI_AWVALID : STD_LOGIC;
    signal readData32_U0_m_axi_C_AXI_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_m_axi_C_AXI_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_C_AXI_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_m_axi_C_AXI_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readData32_U0_m_axi_C_AXI_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readData32_U0_m_axi_C_AXI_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readData32_U0_m_axi_C_AXI_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_C_AXI_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readData32_U0_m_axi_C_AXI_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_C_AXI_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_C_AXI_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_C_AXI_WVALID : STD_LOGIC;
    signal readData32_U0_m_axi_C_AXI_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_m_axi_C_AXI_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_C_AXI_WLAST : STD_LOGIC;
    signal readData32_U0_m_axi_C_AXI_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_C_AXI_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_C_AXI_ARVALID : STD_LOGIC;
    signal readData32_U0_m_axi_C_AXI_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_m_axi_C_AXI_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_C_AXI_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_m_axi_C_AXI_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readData32_U0_m_axi_C_AXI_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readData32_U0_m_axi_C_AXI_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readData32_U0_m_axi_C_AXI_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_C_AXI_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readData32_U0_m_axi_C_AXI_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_C_AXI_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_C_AXI_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_C_AXI_RREADY : STD_LOGIC;
    signal readData32_U0_m_axi_C_AXI_BREADY : STD_LOGIC;
    signal readData32_U0_m_axi_D_input_AXI_AWVALID : STD_LOGIC;
    signal readData32_U0_m_axi_D_input_AXI_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_WVALID : STD_LOGIC;
    signal readData32_U0_m_axi_D_input_AXI_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_WLAST : STD_LOGIC;
    signal readData32_U0_m_axi_D_input_AXI_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_ARVALID : STD_LOGIC;
    signal readData32_U0_m_axi_D_input_AXI_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readData32_U0_m_axi_D_input_AXI_RREADY : STD_LOGIC;
    signal readData32_U0_m_axi_D_input_AXI_BREADY : STD_LOGIC;
    signal readData32_U0_A_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal readData32_U0_A_0_ce0 : STD_LOGIC;
    signal readData32_U0_A_0_we0 : STD_LOGIC;
    signal readData32_U0_A_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_A_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal readData32_U0_A_1_ce0 : STD_LOGIC;
    signal readData32_U0_A_1_we0 : STD_LOGIC;
    signal readData32_U0_A_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_B_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal readData32_U0_B_0_ce0 : STD_LOGIC;
    signal readData32_U0_B_0_we0 : STD_LOGIC;
    signal readData32_U0_B_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_B_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal readData32_U0_B_1_ce0 : STD_LOGIC;
    signal readData32_U0_B_1_we0 : STD_LOGIC;
    signal readData32_U0_B_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_C_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal readData32_U0_C_0_ce0 : STD_LOGIC;
    signal readData32_U0_C_0_we0 : STD_LOGIC;
    signal readData32_U0_C_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_C_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal readData32_U0_C_1_ce0 : STD_LOGIC;
    signal readData32_U0_C_1_we0 : STD_LOGIC;
    signal readData32_U0_C_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_C_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal readData32_U0_C_2_ce0 : STD_LOGIC;
    signal readData32_U0_C_2_we0 : STD_LOGIC;
    signal readData32_U0_C_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_C_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal readData32_U0_C_3_ce0 : STD_LOGIC;
    signal readData32_U0_C_3_we0 : STD_LOGIC;
    signal readData32_U0_C_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_C_4_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal readData32_U0_C_4_ce0 : STD_LOGIC;
    signal readData32_U0_C_4_we0 : STD_LOGIC;
    signal readData32_U0_C_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_C_5_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal readData32_U0_C_5_ce0 : STD_LOGIC;
    signal readData32_U0_C_5_we0 : STD_LOGIC;
    signal readData32_U0_C_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_C_6_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal readData32_U0_C_6_ce0 : STD_LOGIC;
    signal readData32_U0_C_6_we0 : STD_LOGIC;
    signal readData32_U0_C_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_C_7_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal readData32_U0_C_7_ce0 : STD_LOGIC;
    signal readData32_U0_C_7_we0 : STD_LOGIC;
    signal readData32_U0_C_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_D_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal readData32_U0_D_ce0 : STD_LOGIC;
    signal readData32_U0_D_we0 : STD_LOGIC;
    signal readData32_U0_D_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_D_output_AXI_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal readData32_U0_D_output_AXI_out_write : STD_LOGIC;
    signal ap_channel_done_D : STD_LOGIC;
    signal readData32_U0_D_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_D : STD_LOGIC := '0';
    signal ap_sync_channel_write_D : STD_LOGIC;
    signal ap_channel_done_C_7 : STD_LOGIC;
    signal readData32_U0_C_7_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_C_7 : STD_LOGIC := '0';
    signal ap_sync_channel_write_C_7 : STD_LOGIC;
    signal ap_channel_done_C_6 : STD_LOGIC;
    signal readData32_U0_C_6_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_C_6 : STD_LOGIC := '0';
    signal ap_sync_channel_write_C_6 : STD_LOGIC;
    signal ap_channel_done_C_5 : STD_LOGIC;
    signal readData32_U0_C_5_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_C_5 : STD_LOGIC := '0';
    signal ap_sync_channel_write_C_5 : STD_LOGIC;
    signal ap_channel_done_C_4 : STD_LOGIC;
    signal readData32_U0_C_4_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_C_4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_C_4 : STD_LOGIC;
    signal ap_channel_done_C_3 : STD_LOGIC;
    signal readData32_U0_C_3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_C_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_C_3 : STD_LOGIC;
    signal ap_channel_done_C_2 : STD_LOGIC;
    signal readData32_U0_C_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_C_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_C_2 : STD_LOGIC;
    signal ap_channel_done_C_1 : STD_LOGIC;
    signal readData32_U0_C_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_C_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_C_1 : STD_LOGIC;
    signal ap_channel_done_C_0 : STD_LOGIC;
    signal readData32_U0_C_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_C_0 : STD_LOGIC := '0';
    signal ap_sync_channel_write_C_0 : STD_LOGIC;
    signal ap_channel_done_B_1 : STD_LOGIC;
    signal readData32_U0_B_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_B_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_B_1 : STD_LOGIC;
    signal ap_channel_done_B_0 : STD_LOGIC;
    signal readData32_U0_B_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_B_0 : STD_LOGIC := '0';
    signal ap_sync_channel_write_B_0 : STD_LOGIC;
    signal ap_channel_done_A_1 : STD_LOGIC;
    signal readData32_U0_A_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_A_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_A_1 : STD_LOGIC;
    signal ap_channel_done_A_0 : STD_LOGIC;
    signal readData32_U0_A_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_A_0 : STD_LOGIC := '0';
    signal ap_sync_channel_write_A_0 : STD_LOGIC;
    signal kernel_2mm_U0_A_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2mm_U0_A_0_ce0 : STD_LOGIC;
    signal kernel_2mm_U0_A_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_A_0_we0 : STD_LOGIC;
    signal kernel_2mm_U0_A_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2mm_U0_A_0_ce1 : STD_LOGIC;
    signal kernel_2mm_U0_A_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_A_0_we1 : STD_LOGIC;
    signal kernel_2mm_U0_A_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2mm_U0_A_1_ce0 : STD_LOGIC;
    signal kernel_2mm_U0_A_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_A_1_we0 : STD_LOGIC;
    signal kernel_2mm_U0_A_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2mm_U0_A_1_ce1 : STD_LOGIC;
    signal kernel_2mm_U0_A_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_A_1_we1 : STD_LOGIC;
    signal kernel_2mm_U0_B_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2mm_U0_B_0_ce0 : STD_LOGIC;
    signal kernel_2mm_U0_B_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_B_0_we0 : STD_LOGIC;
    signal kernel_2mm_U0_B_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2mm_U0_B_0_ce1 : STD_LOGIC;
    signal kernel_2mm_U0_B_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_B_0_we1 : STD_LOGIC;
    signal kernel_2mm_U0_B_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2mm_U0_B_1_ce0 : STD_LOGIC;
    signal kernel_2mm_U0_B_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_B_1_we0 : STD_LOGIC;
    signal kernel_2mm_U0_B_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2mm_U0_B_1_ce1 : STD_LOGIC;
    signal kernel_2mm_U0_B_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_B_1_we1 : STD_LOGIC;
    signal kernel_2mm_U0_C_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_2mm_U0_C_0_ce0 : STD_LOGIC;
    signal kernel_2mm_U0_C_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_C_0_we0 : STD_LOGIC;
    signal kernel_2mm_U0_C_0_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_2mm_U0_C_0_ce1 : STD_LOGIC;
    signal kernel_2mm_U0_C_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_C_0_we1 : STD_LOGIC;
    signal kernel_2mm_U0_C_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_2mm_U0_C_1_ce0 : STD_LOGIC;
    signal kernel_2mm_U0_C_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_C_1_we0 : STD_LOGIC;
    signal kernel_2mm_U0_C_1_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_2mm_U0_C_1_ce1 : STD_LOGIC;
    signal kernel_2mm_U0_C_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_C_1_we1 : STD_LOGIC;
    signal kernel_2mm_U0_C_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernel_2mm_U0_C_2_ce0 : STD_LOGIC;
    signal kernel_2mm_U0_C_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_C_2_we0 : STD_LOGIC;
    signal kernel_2mm_U0_C_2_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernel_2mm_U0_C_2_ce1 : STD_LOGIC;
    signal kernel_2mm_U0_C_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_C_2_we1 : STD_LOGIC;
    signal kernel_2mm_U0_C_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernel_2mm_U0_C_3_ce0 : STD_LOGIC;
    signal kernel_2mm_U0_C_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_C_3_we0 : STD_LOGIC;
    signal kernel_2mm_U0_C_3_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernel_2mm_U0_C_3_ce1 : STD_LOGIC;
    signal kernel_2mm_U0_C_3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_C_3_we1 : STD_LOGIC;
    signal kernel_2mm_U0_C_4_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernel_2mm_U0_C_4_ce0 : STD_LOGIC;
    signal kernel_2mm_U0_C_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_C_4_we0 : STD_LOGIC;
    signal kernel_2mm_U0_C_4_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernel_2mm_U0_C_4_ce1 : STD_LOGIC;
    signal kernel_2mm_U0_C_4_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_C_4_we1 : STD_LOGIC;
    signal kernel_2mm_U0_C_5_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernel_2mm_U0_C_5_ce0 : STD_LOGIC;
    signal kernel_2mm_U0_C_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_C_5_we0 : STD_LOGIC;
    signal kernel_2mm_U0_C_5_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernel_2mm_U0_C_5_ce1 : STD_LOGIC;
    signal kernel_2mm_U0_C_5_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_C_5_we1 : STD_LOGIC;
    signal kernel_2mm_U0_C_6_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernel_2mm_U0_C_6_ce0 : STD_LOGIC;
    signal kernel_2mm_U0_C_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_C_6_we0 : STD_LOGIC;
    signal kernel_2mm_U0_C_6_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernel_2mm_U0_C_6_ce1 : STD_LOGIC;
    signal kernel_2mm_U0_C_6_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_C_6_we1 : STD_LOGIC;
    signal kernel_2mm_U0_C_7_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernel_2mm_U0_C_7_ce0 : STD_LOGIC;
    signal kernel_2mm_U0_C_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_C_7_we0 : STD_LOGIC;
    signal kernel_2mm_U0_C_7_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernel_2mm_U0_C_7_ce1 : STD_LOGIC;
    signal kernel_2mm_U0_C_7_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_C_7_we1 : STD_LOGIC;
    signal kernel_2mm_U0_D_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal kernel_2mm_U0_D_ce0 : STD_LOGIC;
    signal kernel_2mm_U0_D_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_D_we0 : STD_LOGIC;
    signal kernel_2mm_U0_D_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal kernel_2mm_U0_D_ce1 : STD_LOGIC;
    signal kernel_2mm_U0_D_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_D_we1 : STD_LOGIC;
    signal kernel_2mm_U0_D_output_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal kernel_2mm_U0_D_output_ce0 : STD_LOGIC;
    signal kernel_2mm_U0_D_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_D_output_we0 : STD_LOGIC;
    signal kernel_2mm_U0_D_output_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal kernel_2mm_U0_D_output_ce1 : STD_LOGIC;
    signal kernel_2mm_U0_D_output_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2mm_U0_D_output_we1 : STD_LOGIC;
    signal kernel_2mm_U0_A_0_read : STD_LOGIC;
    signal kernel_2mm_U0_A_1_read : STD_LOGIC;
    signal kernel_2mm_U0_B_0_read : STD_LOGIC;
    signal kernel_2mm_U0_B_1_read : STD_LOGIC;
    signal kernel_2mm_U0_C_0_read : STD_LOGIC;
    signal kernel_2mm_U0_C_1_read : STD_LOGIC;
    signal kernel_2mm_U0_C_2_read : STD_LOGIC;
    signal kernel_2mm_U0_C_3_read : STD_LOGIC;
    signal kernel_2mm_U0_C_4_read : STD_LOGIC;
    signal kernel_2mm_U0_C_5_read : STD_LOGIC;
    signal kernel_2mm_U0_C_6_read : STD_LOGIC;
    signal kernel_2mm_U0_C_7_read : STD_LOGIC;
    signal kernel_2mm_U0_D_read : STD_LOGIC;
    signal kernel_2mm_U0_D_output_full_n : STD_LOGIC;
    signal kernel_2mm_U0_D_output_write : STD_LOGIC;
    signal kernel_2mm_U0_ap_done : STD_LOGIC;
    signal kernel_2mm_U0_ap_start : STD_LOGIC;
    signal kernel_2mm_U0_ap_ready : STD_LOGIC;
    signal kernel_2mm_U0_ap_idle : STD_LOGIC;
    signal kernel_2mm_U0_ap_continue : STD_LOGIC;
    signal ap_channel_done_D_output : STD_LOGIC;
    signal writeData_U0_ap_start : STD_LOGIC;
    signal writeData_U0_ap_done : STD_LOGIC;
    signal writeData_U0_ap_continue : STD_LOGIC;
    signal writeData_U0_ap_idle : STD_LOGIC;
    signal writeData_U0_ap_ready : STD_LOGIC;
    signal writeData_U0_m_axi_D_output_AXI_AWVALID : STD_LOGIC;
    signal writeData_U0_m_axi_D_output_AXI_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_WVALID : STD_LOGIC;
    signal writeData_U0_m_axi_D_output_AXI_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_WLAST : STD_LOGIC;
    signal writeData_U0_m_axi_D_output_AXI_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_ARVALID : STD_LOGIC;
    signal writeData_U0_m_axi_D_output_AXI_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeData_U0_m_axi_D_output_AXI_RREADY : STD_LOGIC;
    signal writeData_U0_m_axi_D_output_AXI_BREADY : STD_LOGIC;
    signal writeData_U0_D_output_AXI_offset_read : STD_LOGIC;
    signal writeData_U0_D_output_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal writeData_U0_D_output_ce0 : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal A_0_i_full_n : STD_LOGIC;
    signal A_0_t_empty_n : STD_LOGIC;
    signal A_1_i_full_n : STD_LOGIC;
    signal A_1_t_empty_n : STD_LOGIC;
    signal B_0_i_full_n : STD_LOGIC;
    signal B_0_t_empty_n : STD_LOGIC;
    signal B_1_i_full_n : STD_LOGIC;
    signal B_1_t_empty_n : STD_LOGIC;
    signal C_0_i_full_n : STD_LOGIC;
    signal C_0_t_empty_n : STD_LOGIC;
    signal C_1_i_full_n : STD_LOGIC;
    signal C_1_t_empty_n : STD_LOGIC;
    signal C_2_i_full_n : STD_LOGIC;
    signal C_2_t_empty_n : STD_LOGIC;
    signal C_3_i_full_n : STD_LOGIC;
    signal C_3_t_empty_n : STD_LOGIC;
    signal C_4_i_full_n : STD_LOGIC;
    signal C_4_t_empty_n : STD_LOGIC;
    signal C_5_i_full_n : STD_LOGIC;
    signal C_5_t_empty_n : STD_LOGIC;
    signal C_6_i_full_n : STD_LOGIC;
    signal C_6_t_empty_n : STD_LOGIC;
    signal C_7_i_full_n : STD_LOGIC;
    signal C_7_t_empty_n : STD_LOGIC;
    signal D_i_full_n : STD_LOGIC;
    signal D_t_empty_n : STD_LOGIC;
    signal D_output_i_full_n : STD_LOGIC;
    signal D_output_t_empty_n : STD_LOGIC;
    signal D_output_AXI_c_full_n : STD_LOGIC;
    signal D_output_AXI_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal D_output_AXI_c_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal readData32_U0_start_full_n : STD_LOGIC;
    signal readData32_U0_start_write : STD_LOGIC;
    signal kernel_2mm_U0_start_full_n : STD_LOGIC;
    signal kernel_2mm_U0_start_write : STD_LOGIC;
    signal writeData_U0_start_full_n : STD_LOGIC;
    signal writeData_U0_start_write : STD_LOGIC;

    component readData32 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_A_AXI_AWVALID : OUT STD_LOGIC;
        m_axi_A_AXI_AWREADY : IN STD_LOGIC;
        m_axi_A_AXI_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_AXI_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_AXI_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_AXI_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_AXI_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_AXI_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_AXI_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_AXI_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_AXI_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_AXI_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_AXI_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_AXI_WVALID : OUT STD_LOGIC;
        m_axi_A_AXI_WREADY : IN STD_LOGIC;
        m_axi_A_AXI_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_AXI_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_AXI_WLAST : OUT STD_LOGIC;
        m_axi_A_AXI_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_AXI_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_AXI_ARVALID : OUT STD_LOGIC;
        m_axi_A_AXI_ARREADY : IN STD_LOGIC;
        m_axi_A_AXI_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_AXI_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_AXI_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_AXI_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_AXI_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_AXI_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_AXI_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_AXI_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_AXI_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_AXI_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_AXI_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_AXI_RVALID : IN STD_LOGIC;
        m_axi_A_AXI_RREADY : OUT STD_LOGIC;
        m_axi_A_AXI_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_AXI_RLAST : IN STD_LOGIC;
        m_axi_A_AXI_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_AXI_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_AXI_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_AXI_BVALID : IN STD_LOGIC;
        m_axi_A_AXI_BREADY : OUT STD_LOGIC;
        m_axi_A_AXI_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_AXI_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_AXI_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        A_AXI_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_B_AXI_AWVALID : OUT STD_LOGIC;
        m_axi_B_AXI_AWREADY : IN STD_LOGIC;
        m_axi_B_AXI_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_B_AXI_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_AXI_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_B_AXI_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_B_AXI_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_AXI_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_AXI_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_AXI_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_B_AXI_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_AXI_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_AXI_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_AXI_WVALID : OUT STD_LOGIC;
        m_axi_B_AXI_WREADY : IN STD_LOGIC;
        m_axi_B_AXI_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_B_AXI_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_AXI_WLAST : OUT STD_LOGIC;
        m_axi_B_AXI_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_AXI_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_AXI_ARVALID : OUT STD_LOGIC;
        m_axi_B_AXI_ARREADY : IN STD_LOGIC;
        m_axi_B_AXI_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_B_AXI_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_AXI_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_B_AXI_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_B_AXI_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_AXI_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_AXI_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_AXI_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_B_AXI_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_AXI_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_AXI_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_AXI_RVALID : IN STD_LOGIC;
        m_axi_B_AXI_RREADY : OUT STD_LOGIC;
        m_axi_B_AXI_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_B_AXI_RLAST : IN STD_LOGIC;
        m_axi_B_AXI_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_AXI_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_AXI_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_AXI_BVALID : IN STD_LOGIC;
        m_axi_B_AXI_BREADY : OUT STD_LOGIC;
        m_axi_B_AXI_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_AXI_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_AXI_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        B_AXI_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_C_AXI_AWVALID : OUT STD_LOGIC;
        m_axi_C_AXI_AWREADY : IN STD_LOGIC;
        m_axi_C_AXI_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_C_AXI_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_AXI_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_C_AXI_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_C_AXI_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_C_AXI_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_C_AXI_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_AXI_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_C_AXI_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_AXI_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_AXI_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_AXI_WVALID : OUT STD_LOGIC;
        m_axi_C_AXI_WREADY : IN STD_LOGIC;
        m_axi_C_AXI_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_C_AXI_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_AXI_WLAST : OUT STD_LOGIC;
        m_axi_C_AXI_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_AXI_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_AXI_ARVALID : OUT STD_LOGIC;
        m_axi_C_AXI_ARREADY : IN STD_LOGIC;
        m_axi_C_AXI_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_C_AXI_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_AXI_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_C_AXI_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_C_AXI_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_C_AXI_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_C_AXI_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_AXI_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_C_AXI_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_AXI_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_AXI_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_AXI_RVALID : IN STD_LOGIC;
        m_axi_C_AXI_RREADY : OUT STD_LOGIC;
        m_axi_C_AXI_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_C_AXI_RLAST : IN STD_LOGIC;
        m_axi_C_AXI_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_AXI_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_AXI_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_C_AXI_BVALID : IN STD_LOGIC;
        m_axi_C_AXI_BREADY : OUT STD_LOGIC;
        m_axi_C_AXI_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_C_AXI_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_AXI_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        C_AXI_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_D_input_AXI_AWVALID : OUT STD_LOGIC;
        m_axi_D_input_AXI_AWREADY : IN STD_LOGIC;
        m_axi_D_input_AXI_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_D_input_AXI_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_D_input_AXI_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_D_input_AXI_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_D_input_AXI_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_D_input_AXI_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_D_input_AXI_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_D_input_AXI_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_D_input_AXI_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_D_input_AXI_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_D_input_AXI_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_D_input_AXI_WVALID : OUT STD_LOGIC;
        m_axi_D_input_AXI_WREADY : IN STD_LOGIC;
        m_axi_D_input_AXI_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_D_input_AXI_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_D_input_AXI_WLAST : OUT STD_LOGIC;
        m_axi_D_input_AXI_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_D_input_AXI_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_D_input_AXI_ARVALID : OUT STD_LOGIC;
        m_axi_D_input_AXI_ARREADY : IN STD_LOGIC;
        m_axi_D_input_AXI_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_D_input_AXI_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_D_input_AXI_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_D_input_AXI_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_D_input_AXI_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_D_input_AXI_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_D_input_AXI_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_D_input_AXI_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_D_input_AXI_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_D_input_AXI_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_D_input_AXI_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_D_input_AXI_RVALID : IN STD_LOGIC;
        m_axi_D_input_AXI_RREADY : OUT STD_LOGIC;
        m_axi_D_input_AXI_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_D_input_AXI_RLAST : IN STD_LOGIC;
        m_axi_D_input_AXI_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_D_input_AXI_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_D_input_AXI_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_D_input_AXI_BVALID : IN STD_LOGIC;
        m_axi_D_input_AXI_BREADY : OUT STD_LOGIC;
        m_axi_D_input_AXI_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_D_input_AXI_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_D_input_AXI_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        D_input_AXI_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_0_ce0 : OUT STD_LOGIC;
        A_0_we0 : OUT STD_LOGIC;
        A_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_1_ce0 : OUT STD_LOGIC;
        A_1_we0 : OUT STD_LOGIC;
        A_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_0_ce0 : OUT STD_LOGIC;
        B_0_we0 : OUT STD_LOGIC;
        B_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_1_ce0 : OUT STD_LOGIC;
        B_1_we0 : OUT STD_LOGIC;
        B_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        C_0_ce0 : OUT STD_LOGIC;
        C_0_we0 : OUT STD_LOGIC;
        C_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        C_1_ce0 : OUT STD_LOGIC;
        C_1_we0 : OUT STD_LOGIC;
        C_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_2_ce0 : OUT STD_LOGIC;
        C_2_we0 : OUT STD_LOGIC;
        C_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_3_ce0 : OUT STD_LOGIC;
        C_3_we0 : OUT STD_LOGIC;
        C_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_4_ce0 : OUT STD_LOGIC;
        C_4_we0 : OUT STD_LOGIC;
        C_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_5_ce0 : OUT STD_LOGIC;
        C_5_we0 : OUT STD_LOGIC;
        C_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_6_ce0 : OUT STD_LOGIC;
        C_6_we0 : OUT STD_LOGIC;
        C_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_7_ce0 : OUT STD_LOGIC;
        C_7_we0 : OUT STD_LOGIC;
        C_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        D_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        D_ce0 : OUT STD_LOGIC;
        D_we0 : OUT STD_LOGIC;
        D_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        D_output_AXI : IN STD_LOGIC_VECTOR (31 downto 0);
        D_output_AXI_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        D_output_AXI_out_full_n : IN STD_LOGIC;
        D_output_AXI_out_write : OUT STD_LOGIC );
    end component;


    component kernel_2mm IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        A_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_0_ce0 : OUT STD_LOGIC;
        A_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_we0 : OUT STD_LOGIC;
        A_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_0_ce1 : OUT STD_LOGIC;
        A_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_we1 : OUT STD_LOGIC;
        A_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_1_ce0 : OUT STD_LOGIC;
        A_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_we0 : OUT STD_LOGIC;
        A_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_1_ce1 : OUT STD_LOGIC;
        A_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_we1 : OUT STD_LOGIC;
        B_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_0_ce0 : OUT STD_LOGIC;
        B_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_0_we0 : OUT STD_LOGIC;
        B_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_0_ce1 : OUT STD_LOGIC;
        B_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_0_we1 : OUT STD_LOGIC;
        B_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_1_ce0 : OUT STD_LOGIC;
        B_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_1_we0 : OUT STD_LOGIC;
        B_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_1_ce1 : OUT STD_LOGIC;
        B_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_1_we1 : OUT STD_LOGIC;
        C_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        C_0_ce0 : OUT STD_LOGIC;
        C_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_0_we0 : OUT STD_LOGIC;
        C_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        C_0_ce1 : OUT STD_LOGIC;
        C_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_0_we1 : OUT STD_LOGIC;
        C_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        C_1_ce0 : OUT STD_LOGIC;
        C_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_1_we0 : OUT STD_LOGIC;
        C_1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        C_1_ce1 : OUT STD_LOGIC;
        C_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_1_we1 : OUT STD_LOGIC;
        C_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_2_ce0 : OUT STD_LOGIC;
        C_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_2_we0 : OUT STD_LOGIC;
        C_2_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_2_ce1 : OUT STD_LOGIC;
        C_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_2_we1 : OUT STD_LOGIC;
        C_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_3_ce0 : OUT STD_LOGIC;
        C_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_3_we0 : OUT STD_LOGIC;
        C_3_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_3_ce1 : OUT STD_LOGIC;
        C_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_3_we1 : OUT STD_LOGIC;
        C_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_4_ce0 : OUT STD_LOGIC;
        C_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_4_we0 : OUT STD_LOGIC;
        C_4_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_4_ce1 : OUT STD_LOGIC;
        C_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_4_we1 : OUT STD_LOGIC;
        C_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_5_ce0 : OUT STD_LOGIC;
        C_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_5_we0 : OUT STD_LOGIC;
        C_5_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_5_ce1 : OUT STD_LOGIC;
        C_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_5_we1 : OUT STD_LOGIC;
        C_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_6_ce0 : OUT STD_LOGIC;
        C_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_6_we0 : OUT STD_LOGIC;
        C_6_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_6_ce1 : OUT STD_LOGIC;
        C_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_6_we1 : OUT STD_LOGIC;
        C_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_7_ce0 : OUT STD_LOGIC;
        C_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_7_we0 : OUT STD_LOGIC;
        C_7_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_7_ce1 : OUT STD_LOGIC;
        C_7_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_7_we1 : OUT STD_LOGIC;
        D_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        D_ce0 : OUT STD_LOGIC;
        D_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        D_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        D_we0 : OUT STD_LOGIC;
        D_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        D_ce1 : OUT STD_LOGIC;
        D_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        D_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        D_we1 : OUT STD_LOGIC;
        D_output_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        D_output_ce0 : OUT STD_LOGIC;
        D_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        D_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        D_output_we0 : OUT STD_LOGIC;
        D_output_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        D_output_ce1 : OUT STD_LOGIC;
        D_output_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        D_output_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        D_output_we1 : OUT STD_LOGIC;
        A_0_empty_n : IN STD_LOGIC;
        A_0_read : OUT STD_LOGIC;
        A_1_empty_n : IN STD_LOGIC;
        A_1_read : OUT STD_LOGIC;
        B_0_empty_n : IN STD_LOGIC;
        B_0_read : OUT STD_LOGIC;
        B_1_empty_n : IN STD_LOGIC;
        B_1_read : OUT STD_LOGIC;
        C_0_empty_n : IN STD_LOGIC;
        C_0_read : OUT STD_LOGIC;
        C_1_empty_n : IN STD_LOGIC;
        C_1_read : OUT STD_LOGIC;
        C_2_empty_n : IN STD_LOGIC;
        C_2_read : OUT STD_LOGIC;
        C_3_empty_n : IN STD_LOGIC;
        C_3_read : OUT STD_LOGIC;
        C_4_empty_n : IN STD_LOGIC;
        C_4_read : OUT STD_LOGIC;
        C_5_empty_n : IN STD_LOGIC;
        C_5_read : OUT STD_LOGIC;
        C_6_empty_n : IN STD_LOGIC;
        C_6_read : OUT STD_LOGIC;
        C_7_empty_n : IN STD_LOGIC;
        C_7_read : OUT STD_LOGIC;
        D_empty_n : IN STD_LOGIC;
        D_read : OUT STD_LOGIC;
        D_output_full_n : IN STD_LOGIC;
        D_output_write : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component writeData IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_D_output_AXI_AWVALID : OUT STD_LOGIC;
        m_axi_D_output_AXI_AWREADY : IN STD_LOGIC;
        m_axi_D_output_AXI_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_D_output_AXI_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_D_output_AXI_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_D_output_AXI_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_D_output_AXI_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_D_output_AXI_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_D_output_AXI_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_D_output_AXI_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_D_output_AXI_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_D_output_AXI_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_D_output_AXI_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_D_output_AXI_WVALID : OUT STD_LOGIC;
        m_axi_D_output_AXI_WREADY : IN STD_LOGIC;
        m_axi_D_output_AXI_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_D_output_AXI_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_D_output_AXI_WLAST : OUT STD_LOGIC;
        m_axi_D_output_AXI_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_D_output_AXI_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_D_output_AXI_ARVALID : OUT STD_LOGIC;
        m_axi_D_output_AXI_ARREADY : IN STD_LOGIC;
        m_axi_D_output_AXI_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_D_output_AXI_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_D_output_AXI_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_D_output_AXI_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_D_output_AXI_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_D_output_AXI_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_D_output_AXI_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_D_output_AXI_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_D_output_AXI_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_D_output_AXI_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_D_output_AXI_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_D_output_AXI_RVALID : IN STD_LOGIC;
        m_axi_D_output_AXI_RREADY : OUT STD_LOGIC;
        m_axi_D_output_AXI_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_D_output_AXI_RLAST : IN STD_LOGIC;
        m_axi_D_output_AXI_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_D_output_AXI_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_D_output_AXI_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_D_output_AXI_BVALID : IN STD_LOGIC;
        m_axi_D_output_AXI_BREADY : OUT STD_LOGIC;
        m_axi_D_output_AXI_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_D_output_AXI_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_D_output_AXI_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        D_output_AXI_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        D_output_AXI_offset_empty_n : IN STD_LOGIC;
        D_output_AXI_offset_read : OUT STD_LOGIC;
        D_output_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        D_output_ce0 : OUT STD_LOGIC;
        D_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_2mm_wrappemb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component kernel_2mm_wrappeocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component kernel_2mm_wrappeqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component kernel_2mm_wrappesc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component kernel_2mm_wrappeyd2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel_2mm_wrapper_for_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        A_AXI : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_AXI : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_AXI : OUT STD_LOGIC_VECTOR (31 downto 0);
        D_input_AXI : OUT STD_LOGIC_VECTOR (31 downto 0);
        D_output_AXI : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_2mm_wrapper_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kernel_2mm_wrapper_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kernel_2mm_wrapper_gmem2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kernel_2mm_wrapper_gmem3_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kernel_2mm_wrapper_gmem4_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    kernel_2mm_wrapper_for_control_s_axi_U : component kernel_2mm_wrapper_for_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_FOR_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_FOR_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_for_control_AWVALID,
        AWREADY => s_axi_for_control_AWREADY,
        AWADDR => s_axi_for_control_AWADDR,
        WVALID => s_axi_for_control_WVALID,
        WREADY => s_axi_for_control_WREADY,
        WDATA => s_axi_for_control_WDATA,
        WSTRB => s_axi_for_control_WSTRB,
        ARVALID => s_axi_for_control_ARVALID,
        ARREADY => s_axi_for_control_ARREADY,
        ARADDR => s_axi_for_control_ARADDR,
        RVALID => s_axi_for_control_RVALID,
        RREADY => s_axi_for_control_RREADY,
        RDATA => s_axi_for_control_RDATA,
        RRESP => s_axi_for_control_RRESP,
        BVALID => s_axi_for_control_BVALID,
        BREADY => s_axi_for_control_BREADY,
        BRESP => s_axi_for_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        A_AXI => A_AXI,
        B_AXI => B_AXI,
        C_AXI => C_AXI,
        D_input_AXI => D_input_AXI,
        D_output_AXI => D_output_AXI);

    kernel_2mm_wrapper_gmem0_m_axi_U : component kernel_2mm_wrapper_gmem0_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => readData32_U0_m_axi_A_AXI_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => readData32_U0_m_axi_A_AXI_ARADDR,
        I_ARID => readData32_U0_m_axi_A_AXI_ARID,
        I_ARLEN => readData32_U0_m_axi_A_AXI_ARLEN,
        I_ARSIZE => readData32_U0_m_axi_A_AXI_ARSIZE,
        I_ARLOCK => readData32_U0_m_axi_A_AXI_ARLOCK,
        I_ARCACHE => readData32_U0_m_axi_A_AXI_ARCACHE,
        I_ARQOS => readData32_U0_m_axi_A_AXI_ARQOS,
        I_ARPROT => readData32_U0_m_axi_A_AXI_ARPROT,
        I_ARUSER => readData32_U0_m_axi_A_AXI_ARUSER,
        I_ARBURST => readData32_U0_m_axi_A_AXI_ARBURST,
        I_ARREGION => readData32_U0_m_axi_A_AXI_ARREGION,
        I_RVALID => gmem0_RVALID,
        I_RREADY => readData32_U0_m_axi_A_AXI_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RID => gmem0_RID,
        I_RUSER => gmem0_RUSER,
        I_RRESP => gmem0_RRESP,
        I_RLAST => gmem0_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem0_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem0_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem0_BRESP,
        I_BID => gmem0_BID,
        I_BUSER => gmem0_BUSER);

    kernel_2mm_wrapper_gmem1_m_axi_U : component kernel_2mm_wrapper_gmem1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => readData32_U0_m_axi_B_AXI_ARVALID,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => readData32_U0_m_axi_B_AXI_ARADDR,
        I_ARID => readData32_U0_m_axi_B_AXI_ARID,
        I_ARLEN => readData32_U0_m_axi_B_AXI_ARLEN,
        I_ARSIZE => readData32_U0_m_axi_B_AXI_ARSIZE,
        I_ARLOCK => readData32_U0_m_axi_B_AXI_ARLOCK,
        I_ARCACHE => readData32_U0_m_axi_B_AXI_ARCACHE,
        I_ARQOS => readData32_U0_m_axi_B_AXI_ARQOS,
        I_ARPROT => readData32_U0_m_axi_B_AXI_ARPROT,
        I_ARUSER => readData32_U0_m_axi_B_AXI_ARUSER,
        I_ARBURST => readData32_U0_m_axi_B_AXI_ARBURST,
        I_ARREGION => readData32_U0_m_axi_B_AXI_ARREGION,
        I_RVALID => gmem1_RVALID,
        I_RREADY => readData32_U0_m_axi_B_AXI_RREADY,
        I_RDATA => gmem1_RDATA,
        I_RID => gmem1_RID,
        I_RUSER => gmem1_RUSER,
        I_RRESP => gmem1_RRESP,
        I_RLAST => gmem1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem1_BRESP,
        I_BID => gmem1_BID,
        I_BUSER => gmem1_BUSER);

    kernel_2mm_wrapper_gmem2_m_axi_U : component kernel_2mm_wrapper_gmem2_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem2_AWVALID,
        AWREADY => m_axi_gmem2_AWREADY,
        AWADDR => m_axi_gmem2_AWADDR,
        AWID => m_axi_gmem2_AWID,
        AWLEN => m_axi_gmem2_AWLEN,
        AWSIZE => m_axi_gmem2_AWSIZE,
        AWBURST => m_axi_gmem2_AWBURST,
        AWLOCK => m_axi_gmem2_AWLOCK,
        AWCACHE => m_axi_gmem2_AWCACHE,
        AWPROT => m_axi_gmem2_AWPROT,
        AWQOS => m_axi_gmem2_AWQOS,
        AWREGION => m_axi_gmem2_AWREGION,
        AWUSER => m_axi_gmem2_AWUSER,
        WVALID => m_axi_gmem2_WVALID,
        WREADY => m_axi_gmem2_WREADY,
        WDATA => m_axi_gmem2_WDATA,
        WSTRB => m_axi_gmem2_WSTRB,
        WLAST => m_axi_gmem2_WLAST,
        WID => m_axi_gmem2_WID,
        WUSER => m_axi_gmem2_WUSER,
        ARVALID => m_axi_gmem2_ARVALID,
        ARREADY => m_axi_gmem2_ARREADY,
        ARADDR => m_axi_gmem2_ARADDR,
        ARID => m_axi_gmem2_ARID,
        ARLEN => m_axi_gmem2_ARLEN,
        ARSIZE => m_axi_gmem2_ARSIZE,
        ARBURST => m_axi_gmem2_ARBURST,
        ARLOCK => m_axi_gmem2_ARLOCK,
        ARCACHE => m_axi_gmem2_ARCACHE,
        ARPROT => m_axi_gmem2_ARPROT,
        ARQOS => m_axi_gmem2_ARQOS,
        ARREGION => m_axi_gmem2_ARREGION,
        ARUSER => m_axi_gmem2_ARUSER,
        RVALID => m_axi_gmem2_RVALID,
        RREADY => m_axi_gmem2_RREADY,
        RDATA => m_axi_gmem2_RDATA,
        RLAST => m_axi_gmem2_RLAST,
        RID => m_axi_gmem2_RID,
        RUSER => m_axi_gmem2_RUSER,
        RRESP => m_axi_gmem2_RRESP,
        BVALID => m_axi_gmem2_BVALID,
        BREADY => m_axi_gmem2_BREADY,
        BRESP => m_axi_gmem2_BRESP,
        BID => m_axi_gmem2_BID,
        BUSER => m_axi_gmem2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => readData32_U0_m_axi_C_AXI_ARVALID,
        I_ARREADY => gmem2_ARREADY,
        I_ARADDR => readData32_U0_m_axi_C_AXI_ARADDR,
        I_ARID => readData32_U0_m_axi_C_AXI_ARID,
        I_ARLEN => readData32_U0_m_axi_C_AXI_ARLEN,
        I_ARSIZE => readData32_U0_m_axi_C_AXI_ARSIZE,
        I_ARLOCK => readData32_U0_m_axi_C_AXI_ARLOCK,
        I_ARCACHE => readData32_U0_m_axi_C_AXI_ARCACHE,
        I_ARQOS => readData32_U0_m_axi_C_AXI_ARQOS,
        I_ARPROT => readData32_U0_m_axi_C_AXI_ARPROT,
        I_ARUSER => readData32_U0_m_axi_C_AXI_ARUSER,
        I_ARBURST => readData32_U0_m_axi_C_AXI_ARBURST,
        I_ARREGION => readData32_U0_m_axi_C_AXI_ARREGION,
        I_RVALID => gmem2_RVALID,
        I_RREADY => readData32_U0_m_axi_C_AXI_RREADY,
        I_RDATA => gmem2_RDATA,
        I_RID => gmem2_RID,
        I_RUSER => gmem2_RUSER,
        I_RRESP => gmem2_RRESP,
        I_RLAST => gmem2_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem2_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem2_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem2_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem2_BRESP,
        I_BID => gmem2_BID,
        I_BUSER => gmem2_BUSER);

    kernel_2mm_wrapper_gmem3_m_axi_U : component kernel_2mm_wrapper_gmem3_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM3_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem3_AWVALID,
        AWREADY => m_axi_gmem3_AWREADY,
        AWADDR => m_axi_gmem3_AWADDR,
        AWID => m_axi_gmem3_AWID,
        AWLEN => m_axi_gmem3_AWLEN,
        AWSIZE => m_axi_gmem3_AWSIZE,
        AWBURST => m_axi_gmem3_AWBURST,
        AWLOCK => m_axi_gmem3_AWLOCK,
        AWCACHE => m_axi_gmem3_AWCACHE,
        AWPROT => m_axi_gmem3_AWPROT,
        AWQOS => m_axi_gmem3_AWQOS,
        AWREGION => m_axi_gmem3_AWREGION,
        AWUSER => m_axi_gmem3_AWUSER,
        WVALID => m_axi_gmem3_WVALID,
        WREADY => m_axi_gmem3_WREADY,
        WDATA => m_axi_gmem3_WDATA,
        WSTRB => m_axi_gmem3_WSTRB,
        WLAST => m_axi_gmem3_WLAST,
        WID => m_axi_gmem3_WID,
        WUSER => m_axi_gmem3_WUSER,
        ARVALID => m_axi_gmem3_ARVALID,
        ARREADY => m_axi_gmem3_ARREADY,
        ARADDR => m_axi_gmem3_ARADDR,
        ARID => m_axi_gmem3_ARID,
        ARLEN => m_axi_gmem3_ARLEN,
        ARSIZE => m_axi_gmem3_ARSIZE,
        ARBURST => m_axi_gmem3_ARBURST,
        ARLOCK => m_axi_gmem3_ARLOCK,
        ARCACHE => m_axi_gmem3_ARCACHE,
        ARPROT => m_axi_gmem3_ARPROT,
        ARQOS => m_axi_gmem3_ARQOS,
        ARREGION => m_axi_gmem3_ARREGION,
        ARUSER => m_axi_gmem3_ARUSER,
        RVALID => m_axi_gmem3_RVALID,
        RREADY => m_axi_gmem3_RREADY,
        RDATA => m_axi_gmem3_RDATA,
        RLAST => m_axi_gmem3_RLAST,
        RID => m_axi_gmem3_RID,
        RUSER => m_axi_gmem3_RUSER,
        RRESP => m_axi_gmem3_RRESP,
        BVALID => m_axi_gmem3_BVALID,
        BREADY => m_axi_gmem3_BREADY,
        BRESP => m_axi_gmem3_BRESP,
        BID => m_axi_gmem3_BID,
        BUSER => m_axi_gmem3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => readData32_U0_m_axi_D_input_AXI_ARVALID,
        I_ARREADY => gmem3_ARREADY,
        I_ARADDR => readData32_U0_m_axi_D_input_AXI_ARADDR,
        I_ARID => readData32_U0_m_axi_D_input_AXI_ARID,
        I_ARLEN => readData32_U0_m_axi_D_input_AXI_ARLEN,
        I_ARSIZE => readData32_U0_m_axi_D_input_AXI_ARSIZE,
        I_ARLOCK => readData32_U0_m_axi_D_input_AXI_ARLOCK,
        I_ARCACHE => readData32_U0_m_axi_D_input_AXI_ARCACHE,
        I_ARQOS => readData32_U0_m_axi_D_input_AXI_ARQOS,
        I_ARPROT => readData32_U0_m_axi_D_input_AXI_ARPROT,
        I_ARUSER => readData32_U0_m_axi_D_input_AXI_ARUSER,
        I_ARBURST => readData32_U0_m_axi_D_input_AXI_ARBURST,
        I_ARREGION => readData32_U0_m_axi_D_input_AXI_ARREGION,
        I_RVALID => gmem3_RVALID,
        I_RREADY => readData32_U0_m_axi_D_input_AXI_RREADY,
        I_RDATA => gmem3_RDATA,
        I_RID => gmem3_RID,
        I_RUSER => gmem3_RUSER,
        I_RRESP => gmem3_RRESP,
        I_RLAST => gmem3_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem3_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem3_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem3_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem3_BRESP,
        I_BID => gmem3_BID,
        I_BUSER => gmem3_BUSER);

    kernel_2mm_wrapper_gmem4_m_axi_U : component kernel_2mm_wrapper_gmem4_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM4_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM4_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM4_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM4_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM4_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM4_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM4_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM4_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM4_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM4_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM4_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem4_AWVALID,
        AWREADY => m_axi_gmem4_AWREADY,
        AWADDR => m_axi_gmem4_AWADDR,
        AWID => m_axi_gmem4_AWID,
        AWLEN => m_axi_gmem4_AWLEN,
        AWSIZE => m_axi_gmem4_AWSIZE,
        AWBURST => m_axi_gmem4_AWBURST,
        AWLOCK => m_axi_gmem4_AWLOCK,
        AWCACHE => m_axi_gmem4_AWCACHE,
        AWPROT => m_axi_gmem4_AWPROT,
        AWQOS => m_axi_gmem4_AWQOS,
        AWREGION => m_axi_gmem4_AWREGION,
        AWUSER => m_axi_gmem4_AWUSER,
        WVALID => m_axi_gmem4_WVALID,
        WREADY => m_axi_gmem4_WREADY,
        WDATA => m_axi_gmem4_WDATA,
        WSTRB => m_axi_gmem4_WSTRB,
        WLAST => m_axi_gmem4_WLAST,
        WID => m_axi_gmem4_WID,
        WUSER => m_axi_gmem4_WUSER,
        ARVALID => m_axi_gmem4_ARVALID,
        ARREADY => m_axi_gmem4_ARREADY,
        ARADDR => m_axi_gmem4_ARADDR,
        ARID => m_axi_gmem4_ARID,
        ARLEN => m_axi_gmem4_ARLEN,
        ARSIZE => m_axi_gmem4_ARSIZE,
        ARBURST => m_axi_gmem4_ARBURST,
        ARLOCK => m_axi_gmem4_ARLOCK,
        ARCACHE => m_axi_gmem4_ARCACHE,
        ARPROT => m_axi_gmem4_ARPROT,
        ARQOS => m_axi_gmem4_ARQOS,
        ARREGION => m_axi_gmem4_ARREGION,
        ARUSER => m_axi_gmem4_ARUSER,
        RVALID => m_axi_gmem4_RVALID,
        RREADY => m_axi_gmem4_RREADY,
        RDATA => m_axi_gmem4_RDATA,
        RLAST => m_axi_gmem4_RLAST,
        RID => m_axi_gmem4_RID,
        RUSER => m_axi_gmem4_RUSER,
        RRESP => m_axi_gmem4_RRESP,
        BVALID => m_axi_gmem4_BVALID,
        BREADY => m_axi_gmem4_BREADY,
        BRESP => m_axi_gmem4_BRESP,
        BID => m_axi_gmem4_BID,
        BUSER => m_axi_gmem4_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem4_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem4_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem4_RDATA,
        I_RID => gmem4_RID,
        I_RUSER => gmem4_RUSER,
        I_RRESP => gmem4_RRESP,
        I_RLAST => gmem4_RLAST,
        I_AWVALID => writeData_U0_m_axi_D_output_AXI_AWVALID,
        I_AWREADY => gmem4_AWREADY,
        I_AWADDR => writeData_U0_m_axi_D_output_AXI_AWADDR,
        I_AWID => writeData_U0_m_axi_D_output_AXI_AWID,
        I_AWLEN => writeData_U0_m_axi_D_output_AXI_AWLEN,
        I_AWSIZE => writeData_U0_m_axi_D_output_AXI_AWSIZE,
        I_AWLOCK => writeData_U0_m_axi_D_output_AXI_AWLOCK,
        I_AWCACHE => writeData_U0_m_axi_D_output_AXI_AWCACHE,
        I_AWQOS => writeData_U0_m_axi_D_output_AXI_AWQOS,
        I_AWPROT => writeData_U0_m_axi_D_output_AXI_AWPROT,
        I_AWUSER => writeData_U0_m_axi_D_output_AXI_AWUSER,
        I_AWBURST => writeData_U0_m_axi_D_output_AXI_AWBURST,
        I_AWREGION => writeData_U0_m_axi_D_output_AXI_AWREGION,
        I_WVALID => writeData_U0_m_axi_D_output_AXI_WVALID,
        I_WREADY => gmem4_WREADY,
        I_WDATA => writeData_U0_m_axi_D_output_AXI_WDATA,
        I_WID => writeData_U0_m_axi_D_output_AXI_WID,
        I_WUSER => writeData_U0_m_axi_D_output_AXI_WUSER,
        I_WLAST => writeData_U0_m_axi_D_output_AXI_WLAST,
        I_WSTRB => writeData_U0_m_axi_D_output_AXI_WSTRB,
        I_BVALID => gmem4_BVALID,
        I_BREADY => writeData_U0_m_axi_D_output_AXI_BREADY,
        I_BRESP => gmem4_BRESP,
        I_BID => gmem4_BID,
        I_BUSER => gmem4_BUSER);

    A_0_U : component kernel_2mm_wrappemb6
    generic map (
        DataWidth => 32,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => readData32_U0_A_0_address0,
        i_ce0 => readData32_U0_A_0_ce0,
        i_we0 => readData32_U0_A_0_we0,
        i_d0 => readData32_U0_A_0_d0,
        i_q0 => A_0_i_q0,
        t_address0 => kernel_2mm_U0_A_0_address0,
        t_ce0 => kernel_2mm_U0_A_0_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => A_0_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => A_0_i_full_n,
        i_write => ap_channel_done_A_0,
        t_empty_n => A_0_t_empty_n,
        t_read => kernel_2mm_U0_ap_ready);

    A_1_U : component kernel_2mm_wrappemb6
    generic map (
        DataWidth => 32,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => readData32_U0_A_1_address0,
        i_ce0 => readData32_U0_A_1_ce0,
        i_we0 => readData32_U0_A_1_we0,
        i_d0 => readData32_U0_A_1_d0,
        i_q0 => A_1_i_q0,
        t_address0 => kernel_2mm_U0_A_1_address0,
        t_ce0 => kernel_2mm_U0_A_1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => A_1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => A_1_i_full_n,
        i_write => ap_channel_done_A_1,
        t_empty_n => A_1_t_empty_n,
        t_read => kernel_2mm_U0_ap_ready);

    B_0_U : component kernel_2mm_wrappeocq
    generic map (
        DataWidth => 32,
        AddressRange => 216,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => readData32_U0_B_0_address0,
        i_ce0 => readData32_U0_B_0_ce0,
        i_we0 => readData32_U0_B_0_we0,
        i_d0 => readData32_U0_B_0_d0,
        i_q0 => B_0_i_q0,
        t_address0 => kernel_2mm_U0_B_0_address0,
        t_ce0 => kernel_2mm_U0_B_0_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => B_0_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => B_0_i_full_n,
        i_write => ap_channel_done_B_0,
        t_empty_n => B_0_t_empty_n,
        t_read => kernel_2mm_U0_ap_ready);

    B_1_U : component kernel_2mm_wrappeocq
    generic map (
        DataWidth => 32,
        AddressRange => 216,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => readData32_U0_B_1_address0,
        i_ce0 => readData32_U0_B_1_ce0,
        i_we0 => readData32_U0_B_1_we0,
        i_d0 => readData32_U0_B_1_d0,
        i_q0 => B_1_i_q0,
        t_address0 => kernel_2mm_U0_B_1_address0,
        t_ce0 => kernel_2mm_U0_B_1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => B_1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => B_1_i_full_n,
        i_write => ap_channel_done_B_1,
        t_empty_n => B_1_t_empty_n,
        t_read => kernel_2mm_U0_ap_ready);

    C_0_U : component kernel_2mm_wrappeqcK
    generic map (
        DataWidth => 32,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => readData32_U0_C_0_address0,
        i_ce0 => readData32_U0_C_0_ce0,
        i_we0 => readData32_U0_C_0_we0,
        i_d0 => readData32_U0_C_0_d0,
        i_q0 => C_0_i_q0,
        t_address0 => kernel_2mm_U0_C_0_address0,
        t_ce0 => kernel_2mm_U0_C_0_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => C_0_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => C_0_i_full_n,
        i_write => ap_channel_done_C_0,
        t_empty_n => C_0_t_empty_n,
        t_read => kernel_2mm_U0_ap_ready);

    C_1_U : component kernel_2mm_wrappeqcK
    generic map (
        DataWidth => 32,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => readData32_U0_C_1_address0,
        i_ce0 => readData32_U0_C_1_ce0,
        i_we0 => readData32_U0_C_1_we0,
        i_d0 => readData32_U0_C_1_d0,
        i_q0 => C_1_i_q0,
        t_address0 => kernel_2mm_U0_C_1_address0,
        t_ce0 => kernel_2mm_U0_C_1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => C_1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => C_1_i_full_n,
        i_write => ap_channel_done_C_1,
        t_empty_n => C_1_t_empty_n,
        t_read => kernel_2mm_U0_ap_ready);

    C_2_U : component kernel_2mm_wrappesc4
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => readData32_U0_C_2_address0,
        i_ce0 => readData32_U0_C_2_ce0,
        i_we0 => readData32_U0_C_2_we0,
        i_d0 => readData32_U0_C_2_d0,
        i_q0 => C_2_i_q0,
        t_address0 => kernel_2mm_U0_C_2_address0,
        t_ce0 => kernel_2mm_U0_C_2_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => C_2_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => C_2_i_full_n,
        i_write => ap_channel_done_C_2,
        t_empty_n => C_2_t_empty_n,
        t_read => kernel_2mm_U0_ap_ready);

    C_3_U : component kernel_2mm_wrappesc4
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => readData32_U0_C_3_address0,
        i_ce0 => readData32_U0_C_3_ce0,
        i_we0 => readData32_U0_C_3_we0,
        i_d0 => readData32_U0_C_3_d0,
        i_q0 => C_3_i_q0,
        t_address0 => kernel_2mm_U0_C_3_address0,
        t_ce0 => kernel_2mm_U0_C_3_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => C_3_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => C_3_i_full_n,
        i_write => ap_channel_done_C_3,
        t_empty_n => C_3_t_empty_n,
        t_read => kernel_2mm_U0_ap_ready);

    C_4_U : component kernel_2mm_wrappesc4
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => readData32_U0_C_4_address0,
        i_ce0 => readData32_U0_C_4_ce0,
        i_we0 => readData32_U0_C_4_we0,
        i_d0 => readData32_U0_C_4_d0,
        i_q0 => C_4_i_q0,
        t_address0 => kernel_2mm_U0_C_4_address0,
        t_ce0 => kernel_2mm_U0_C_4_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => C_4_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => C_4_i_full_n,
        i_write => ap_channel_done_C_4,
        t_empty_n => C_4_t_empty_n,
        t_read => kernel_2mm_U0_ap_ready);

    C_5_U : component kernel_2mm_wrappesc4
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => readData32_U0_C_5_address0,
        i_ce0 => readData32_U0_C_5_ce0,
        i_we0 => readData32_U0_C_5_we0,
        i_d0 => readData32_U0_C_5_d0,
        i_q0 => C_5_i_q0,
        t_address0 => kernel_2mm_U0_C_5_address0,
        t_ce0 => kernel_2mm_U0_C_5_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => C_5_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => C_5_i_full_n,
        i_write => ap_channel_done_C_5,
        t_empty_n => C_5_t_empty_n,
        t_read => kernel_2mm_U0_ap_ready);

    C_6_U : component kernel_2mm_wrappesc4
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => readData32_U0_C_6_address0,
        i_ce0 => readData32_U0_C_6_ce0,
        i_we0 => readData32_U0_C_6_we0,
        i_d0 => readData32_U0_C_6_d0,
        i_q0 => C_6_i_q0,
        t_address0 => kernel_2mm_U0_C_6_address0,
        t_ce0 => kernel_2mm_U0_C_6_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => C_6_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => C_6_i_full_n,
        i_write => ap_channel_done_C_6,
        t_empty_n => C_6_t_empty_n,
        t_read => kernel_2mm_U0_ap_ready);

    C_7_U : component kernel_2mm_wrappesc4
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => readData32_U0_C_7_address0,
        i_ce0 => readData32_U0_C_7_ce0,
        i_we0 => readData32_U0_C_7_we0,
        i_d0 => readData32_U0_C_7_d0,
        i_q0 => C_7_i_q0,
        t_address0 => kernel_2mm_U0_C_7_address0,
        t_ce0 => kernel_2mm_U0_C_7_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => C_7_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => C_7_i_full_n,
        i_write => ap_channel_done_C_7,
        t_empty_n => C_7_t_empty_n,
        t_read => kernel_2mm_U0_ap_ready);

    D_U : component kernel_2mm_wrappeyd2
    generic map (
        DataWidth => 32,
        AddressRange => 384,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => readData32_U0_D_address0,
        i_ce0 => readData32_U0_D_ce0,
        i_we0 => readData32_U0_D_we0,
        i_d0 => readData32_U0_D_d0,
        i_q0 => D_i_q0,
        t_address0 => kernel_2mm_U0_D_address0,
        t_ce0 => kernel_2mm_U0_D_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => D_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => D_i_full_n,
        i_write => ap_channel_done_D,
        t_empty_n => D_t_empty_n,
        t_read => kernel_2mm_U0_ap_ready);

    D_output_U : component kernel_2mm_wrappeyd2
    generic map (
        DataWidth => 32,
        AddressRange => 384,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => kernel_2mm_U0_D_output_address0,
        i_ce0 => kernel_2mm_U0_D_output_ce0,
        i_we0 => kernel_2mm_U0_D_output_we0,
        i_d0 => kernel_2mm_U0_D_output_d0,
        i_q0 => D_output_i_q0,
        t_address0 => writeData_U0_D_output_address0,
        t_ce0 => writeData_U0_D_output_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => D_output_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => D_output_i_full_n,
        i_write => kernel_2mm_U0_ap_done,
        t_empty_n => D_output_t_empty_n,
        t_read => writeData_U0_ap_ready);

    readData32_U0 : component readData32
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => readData32_U0_ap_start,
        ap_done => readData32_U0_ap_done,
        ap_continue => readData32_U0_ap_continue,
        ap_idle => readData32_U0_ap_idle,
        ap_ready => readData32_U0_ap_ready,
        m_axi_A_AXI_AWVALID => readData32_U0_m_axi_A_AXI_AWVALID,
        m_axi_A_AXI_AWREADY => ap_const_logic_0,
        m_axi_A_AXI_AWADDR => readData32_U0_m_axi_A_AXI_AWADDR,
        m_axi_A_AXI_AWID => readData32_U0_m_axi_A_AXI_AWID,
        m_axi_A_AXI_AWLEN => readData32_U0_m_axi_A_AXI_AWLEN,
        m_axi_A_AXI_AWSIZE => readData32_U0_m_axi_A_AXI_AWSIZE,
        m_axi_A_AXI_AWBURST => readData32_U0_m_axi_A_AXI_AWBURST,
        m_axi_A_AXI_AWLOCK => readData32_U0_m_axi_A_AXI_AWLOCK,
        m_axi_A_AXI_AWCACHE => readData32_U0_m_axi_A_AXI_AWCACHE,
        m_axi_A_AXI_AWPROT => readData32_U0_m_axi_A_AXI_AWPROT,
        m_axi_A_AXI_AWQOS => readData32_U0_m_axi_A_AXI_AWQOS,
        m_axi_A_AXI_AWREGION => readData32_U0_m_axi_A_AXI_AWREGION,
        m_axi_A_AXI_AWUSER => readData32_U0_m_axi_A_AXI_AWUSER,
        m_axi_A_AXI_WVALID => readData32_U0_m_axi_A_AXI_WVALID,
        m_axi_A_AXI_WREADY => ap_const_logic_0,
        m_axi_A_AXI_WDATA => readData32_U0_m_axi_A_AXI_WDATA,
        m_axi_A_AXI_WSTRB => readData32_U0_m_axi_A_AXI_WSTRB,
        m_axi_A_AXI_WLAST => readData32_U0_m_axi_A_AXI_WLAST,
        m_axi_A_AXI_WID => readData32_U0_m_axi_A_AXI_WID,
        m_axi_A_AXI_WUSER => readData32_U0_m_axi_A_AXI_WUSER,
        m_axi_A_AXI_ARVALID => readData32_U0_m_axi_A_AXI_ARVALID,
        m_axi_A_AXI_ARREADY => gmem0_ARREADY,
        m_axi_A_AXI_ARADDR => readData32_U0_m_axi_A_AXI_ARADDR,
        m_axi_A_AXI_ARID => readData32_U0_m_axi_A_AXI_ARID,
        m_axi_A_AXI_ARLEN => readData32_U0_m_axi_A_AXI_ARLEN,
        m_axi_A_AXI_ARSIZE => readData32_U0_m_axi_A_AXI_ARSIZE,
        m_axi_A_AXI_ARBURST => readData32_U0_m_axi_A_AXI_ARBURST,
        m_axi_A_AXI_ARLOCK => readData32_U0_m_axi_A_AXI_ARLOCK,
        m_axi_A_AXI_ARCACHE => readData32_U0_m_axi_A_AXI_ARCACHE,
        m_axi_A_AXI_ARPROT => readData32_U0_m_axi_A_AXI_ARPROT,
        m_axi_A_AXI_ARQOS => readData32_U0_m_axi_A_AXI_ARQOS,
        m_axi_A_AXI_ARREGION => readData32_U0_m_axi_A_AXI_ARREGION,
        m_axi_A_AXI_ARUSER => readData32_U0_m_axi_A_AXI_ARUSER,
        m_axi_A_AXI_RVALID => gmem0_RVALID,
        m_axi_A_AXI_RREADY => readData32_U0_m_axi_A_AXI_RREADY,
        m_axi_A_AXI_RDATA => gmem0_RDATA,
        m_axi_A_AXI_RLAST => gmem0_RLAST,
        m_axi_A_AXI_RID => gmem0_RID,
        m_axi_A_AXI_RUSER => gmem0_RUSER,
        m_axi_A_AXI_RRESP => gmem0_RRESP,
        m_axi_A_AXI_BVALID => ap_const_logic_0,
        m_axi_A_AXI_BREADY => readData32_U0_m_axi_A_AXI_BREADY,
        m_axi_A_AXI_BRESP => ap_const_lv2_0,
        m_axi_A_AXI_BID => ap_const_lv1_0,
        m_axi_A_AXI_BUSER => ap_const_lv1_0,
        A_AXI_offset => A_AXI,
        m_axi_B_AXI_AWVALID => readData32_U0_m_axi_B_AXI_AWVALID,
        m_axi_B_AXI_AWREADY => ap_const_logic_0,
        m_axi_B_AXI_AWADDR => readData32_U0_m_axi_B_AXI_AWADDR,
        m_axi_B_AXI_AWID => readData32_U0_m_axi_B_AXI_AWID,
        m_axi_B_AXI_AWLEN => readData32_U0_m_axi_B_AXI_AWLEN,
        m_axi_B_AXI_AWSIZE => readData32_U0_m_axi_B_AXI_AWSIZE,
        m_axi_B_AXI_AWBURST => readData32_U0_m_axi_B_AXI_AWBURST,
        m_axi_B_AXI_AWLOCK => readData32_U0_m_axi_B_AXI_AWLOCK,
        m_axi_B_AXI_AWCACHE => readData32_U0_m_axi_B_AXI_AWCACHE,
        m_axi_B_AXI_AWPROT => readData32_U0_m_axi_B_AXI_AWPROT,
        m_axi_B_AXI_AWQOS => readData32_U0_m_axi_B_AXI_AWQOS,
        m_axi_B_AXI_AWREGION => readData32_U0_m_axi_B_AXI_AWREGION,
        m_axi_B_AXI_AWUSER => readData32_U0_m_axi_B_AXI_AWUSER,
        m_axi_B_AXI_WVALID => readData32_U0_m_axi_B_AXI_WVALID,
        m_axi_B_AXI_WREADY => ap_const_logic_0,
        m_axi_B_AXI_WDATA => readData32_U0_m_axi_B_AXI_WDATA,
        m_axi_B_AXI_WSTRB => readData32_U0_m_axi_B_AXI_WSTRB,
        m_axi_B_AXI_WLAST => readData32_U0_m_axi_B_AXI_WLAST,
        m_axi_B_AXI_WID => readData32_U0_m_axi_B_AXI_WID,
        m_axi_B_AXI_WUSER => readData32_U0_m_axi_B_AXI_WUSER,
        m_axi_B_AXI_ARVALID => readData32_U0_m_axi_B_AXI_ARVALID,
        m_axi_B_AXI_ARREADY => gmem1_ARREADY,
        m_axi_B_AXI_ARADDR => readData32_U0_m_axi_B_AXI_ARADDR,
        m_axi_B_AXI_ARID => readData32_U0_m_axi_B_AXI_ARID,
        m_axi_B_AXI_ARLEN => readData32_U0_m_axi_B_AXI_ARLEN,
        m_axi_B_AXI_ARSIZE => readData32_U0_m_axi_B_AXI_ARSIZE,
        m_axi_B_AXI_ARBURST => readData32_U0_m_axi_B_AXI_ARBURST,
        m_axi_B_AXI_ARLOCK => readData32_U0_m_axi_B_AXI_ARLOCK,
        m_axi_B_AXI_ARCACHE => readData32_U0_m_axi_B_AXI_ARCACHE,
        m_axi_B_AXI_ARPROT => readData32_U0_m_axi_B_AXI_ARPROT,
        m_axi_B_AXI_ARQOS => readData32_U0_m_axi_B_AXI_ARQOS,
        m_axi_B_AXI_ARREGION => readData32_U0_m_axi_B_AXI_ARREGION,
        m_axi_B_AXI_ARUSER => readData32_U0_m_axi_B_AXI_ARUSER,
        m_axi_B_AXI_RVALID => gmem1_RVALID,
        m_axi_B_AXI_RREADY => readData32_U0_m_axi_B_AXI_RREADY,
        m_axi_B_AXI_RDATA => gmem1_RDATA,
        m_axi_B_AXI_RLAST => gmem1_RLAST,
        m_axi_B_AXI_RID => gmem1_RID,
        m_axi_B_AXI_RUSER => gmem1_RUSER,
        m_axi_B_AXI_RRESP => gmem1_RRESP,
        m_axi_B_AXI_BVALID => ap_const_logic_0,
        m_axi_B_AXI_BREADY => readData32_U0_m_axi_B_AXI_BREADY,
        m_axi_B_AXI_BRESP => ap_const_lv2_0,
        m_axi_B_AXI_BID => ap_const_lv1_0,
        m_axi_B_AXI_BUSER => ap_const_lv1_0,
        B_AXI_offset => B_AXI,
        m_axi_C_AXI_AWVALID => readData32_U0_m_axi_C_AXI_AWVALID,
        m_axi_C_AXI_AWREADY => ap_const_logic_0,
        m_axi_C_AXI_AWADDR => readData32_U0_m_axi_C_AXI_AWADDR,
        m_axi_C_AXI_AWID => readData32_U0_m_axi_C_AXI_AWID,
        m_axi_C_AXI_AWLEN => readData32_U0_m_axi_C_AXI_AWLEN,
        m_axi_C_AXI_AWSIZE => readData32_U0_m_axi_C_AXI_AWSIZE,
        m_axi_C_AXI_AWBURST => readData32_U0_m_axi_C_AXI_AWBURST,
        m_axi_C_AXI_AWLOCK => readData32_U0_m_axi_C_AXI_AWLOCK,
        m_axi_C_AXI_AWCACHE => readData32_U0_m_axi_C_AXI_AWCACHE,
        m_axi_C_AXI_AWPROT => readData32_U0_m_axi_C_AXI_AWPROT,
        m_axi_C_AXI_AWQOS => readData32_U0_m_axi_C_AXI_AWQOS,
        m_axi_C_AXI_AWREGION => readData32_U0_m_axi_C_AXI_AWREGION,
        m_axi_C_AXI_AWUSER => readData32_U0_m_axi_C_AXI_AWUSER,
        m_axi_C_AXI_WVALID => readData32_U0_m_axi_C_AXI_WVALID,
        m_axi_C_AXI_WREADY => ap_const_logic_0,
        m_axi_C_AXI_WDATA => readData32_U0_m_axi_C_AXI_WDATA,
        m_axi_C_AXI_WSTRB => readData32_U0_m_axi_C_AXI_WSTRB,
        m_axi_C_AXI_WLAST => readData32_U0_m_axi_C_AXI_WLAST,
        m_axi_C_AXI_WID => readData32_U0_m_axi_C_AXI_WID,
        m_axi_C_AXI_WUSER => readData32_U0_m_axi_C_AXI_WUSER,
        m_axi_C_AXI_ARVALID => readData32_U0_m_axi_C_AXI_ARVALID,
        m_axi_C_AXI_ARREADY => gmem2_ARREADY,
        m_axi_C_AXI_ARADDR => readData32_U0_m_axi_C_AXI_ARADDR,
        m_axi_C_AXI_ARID => readData32_U0_m_axi_C_AXI_ARID,
        m_axi_C_AXI_ARLEN => readData32_U0_m_axi_C_AXI_ARLEN,
        m_axi_C_AXI_ARSIZE => readData32_U0_m_axi_C_AXI_ARSIZE,
        m_axi_C_AXI_ARBURST => readData32_U0_m_axi_C_AXI_ARBURST,
        m_axi_C_AXI_ARLOCK => readData32_U0_m_axi_C_AXI_ARLOCK,
        m_axi_C_AXI_ARCACHE => readData32_U0_m_axi_C_AXI_ARCACHE,
        m_axi_C_AXI_ARPROT => readData32_U0_m_axi_C_AXI_ARPROT,
        m_axi_C_AXI_ARQOS => readData32_U0_m_axi_C_AXI_ARQOS,
        m_axi_C_AXI_ARREGION => readData32_U0_m_axi_C_AXI_ARREGION,
        m_axi_C_AXI_ARUSER => readData32_U0_m_axi_C_AXI_ARUSER,
        m_axi_C_AXI_RVALID => gmem2_RVALID,
        m_axi_C_AXI_RREADY => readData32_U0_m_axi_C_AXI_RREADY,
        m_axi_C_AXI_RDATA => gmem2_RDATA,
        m_axi_C_AXI_RLAST => gmem2_RLAST,
        m_axi_C_AXI_RID => gmem2_RID,
        m_axi_C_AXI_RUSER => gmem2_RUSER,
        m_axi_C_AXI_RRESP => gmem2_RRESP,
        m_axi_C_AXI_BVALID => ap_const_logic_0,
        m_axi_C_AXI_BREADY => readData32_U0_m_axi_C_AXI_BREADY,
        m_axi_C_AXI_BRESP => ap_const_lv2_0,
        m_axi_C_AXI_BID => ap_const_lv1_0,
        m_axi_C_AXI_BUSER => ap_const_lv1_0,
        C_AXI_offset => C_AXI,
        m_axi_D_input_AXI_AWVALID => readData32_U0_m_axi_D_input_AXI_AWVALID,
        m_axi_D_input_AXI_AWREADY => ap_const_logic_0,
        m_axi_D_input_AXI_AWADDR => readData32_U0_m_axi_D_input_AXI_AWADDR,
        m_axi_D_input_AXI_AWID => readData32_U0_m_axi_D_input_AXI_AWID,
        m_axi_D_input_AXI_AWLEN => readData32_U0_m_axi_D_input_AXI_AWLEN,
        m_axi_D_input_AXI_AWSIZE => readData32_U0_m_axi_D_input_AXI_AWSIZE,
        m_axi_D_input_AXI_AWBURST => readData32_U0_m_axi_D_input_AXI_AWBURST,
        m_axi_D_input_AXI_AWLOCK => readData32_U0_m_axi_D_input_AXI_AWLOCK,
        m_axi_D_input_AXI_AWCACHE => readData32_U0_m_axi_D_input_AXI_AWCACHE,
        m_axi_D_input_AXI_AWPROT => readData32_U0_m_axi_D_input_AXI_AWPROT,
        m_axi_D_input_AXI_AWQOS => readData32_U0_m_axi_D_input_AXI_AWQOS,
        m_axi_D_input_AXI_AWREGION => readData32_U0_m_axi_D_input_AXI_AWREGION,
        m_axi_D_input_AXI_AWUSER => readData32_U0_m_axi_D_input_AXI_AWUSER,
        m_axi_D_input_AXI_WVALID => readData32_U0_m_axi_D_input_AXI_WVALID,
        m_axi_D_input_AXI_WREADY => ap_const_logic_0,
        m_axi_D_input_AXI_WDATA => readData32_U0_m_axi_D_input_AXI_WDATA,
        m_axi_D_input_AXI_WSTRB => readData32_U0_m_axi_D_input_AXI_WSTRB,
        m_axi_D_input_AXI_WLAST => readData32_U0_m_axi_D_input_AXI_WLAST,
        m_axi_D_input_AXI_WID => readData32_U0_m_axi_D_input_AXI_WID,
        m_axi_D_input_AXI_WUSER => readData32_U0_m_axi_D_input_AXI_WUSER,
        m_axi_D_input_AXI_ARVALID => readData32_U0_m_axi_D_input_AXI_ARVALID,
        m_axi_D_input_AXI_ARREADY => gmem3_ARREADY,
        m_axi_D_input_AXI_ARADDR => readData32_U0_m_axi_D_input_AXI_ARADDR,
        m_axi_D_input_AXI_ARID => readData32_U0_m_axi_D_input_AXI_ARID,
        m_axi_D_input_AXI_ARLEN => readData32_U0_m_axi_D_input_AXI_ARLEN,
        m_axi_D_input_AXI_ARSIZE => readData32_U0_m_axi_D_input_AXI_ARSIZE,
        m_axi_D_input_AXI_ARBURST => readData32_U0_m_axi_D_input_AXI_ARBURST,
        m_axi_D_input_AXI_ARLOCK => readData32_U0_m_axi_D_input_AXI_ARLOCK,
        m_axi_D_input_AXI_ARCACHE => readData32_U0_m_axi_D_input_AXI_ARCACHE,
        m_axi_D_input_AXI_ARPROT => readData32_U0_m_axi_D_input_AXI_ARPROT,
        m_axi_D_input_AXI_ARQOS => readData32_U0_m_axi_D_input_AXI_ARQOS,
        m_axi_D_input_AXI_ARREGION => readData32_U0_m_axi_D_input_AXI_ARREGION,
        m_axi_D_input_AXI_ARUSER => readData32_U0_m_axi_D_input_AXI_ARUSER,
        m_axi_D_input_AXI_RVALID => gmem3_RVALID,
        m_axi_D_input_AXI_RREADY => readData32_U0_m_axi_D_input_AXI_RREADY,
        m_axi_D_input_AXI_RDATA => gmem3_RDATA,
        m_axi_D_input_AXI_RLAST => gmem3_RLAST,
        m_axi_D_input_AXI_RID => gmem3_RID,
        m_axi_D_input_AXI_RUSER => gmem3_RUSER,
        m_axi_D_input_AXI_RRESP => gmem3_RRESP,
        m_axi_D_input_AXI_BVALID => ap_const_logic_0,
        m_axi_D_input_AXI_BREADY => readData32_U0_m_axi_D_input_AXI_BREADY,
        m_axi_D_input_AXI_BRESP => ap_const_lv2_0,
        m_axi_D_input_AXI_BID => ap_const_lv1_0,
        m_axi_D_input_AXI_BUSER => ap_const_lv1_0,
        D_input_AXI_offset => D_input_AXI,
        A_0_address0 => readData32_U0_A_0_address0,
        A_0_ce0 => readData32_U0_A_0_ce0,
        A_0_we0 => readData32_U0_A_0_we0,
        A_0_d0 => readData32_U0_A_0_d0,
        A_1_address0 => readData32_U0_A_1_address0,
        A_1_ce0 => readData32_U0_A_1_ce0,
        A_1_we0 => readData32_U0_A_1_we0,
        A_1_d0 => readData32_U0_A_1_d0,
        B_0_address0 => readData32_U0_B_0_address0,
        B_0_ce0 => readData32_U0_B_0_ce0,
        B_0_we0 => readData32_U0_B_0_we0,
        B_0_d0 => readData32_U0_B_0_d0,
        B_1_address0 => readData32_U0_B_1_address0,
        B_1_ce0 => readData32_U0_B_1_ce0,
        B_1_we0 => readData32_U0_B_1_we0,
        B_1_d0 => readData32_U0_B_1_d0,
        C_0_address0 => readData32_U0_C_0_address0,
        C_0_ce0 => readData32_U0_C_0_ce0,
        C_0_we0 => readData32_U0_C_0_we0,
        C_0_d0 => readData32_U0_C_0_d0,
        C_1_address0 => readData32_U0_C_1_address0,
        C_1_ce0 => readData32_U0_C_1_ce0,
        C_1_we0 => readData32_U0_C_1_we0,
        C_1_d0 => readData32_U0_C_1_d0,
        C_2_address0 => readData32_U0_C_2_address0,
        C_2_ce0 => readData32_U0_C_2_ce0,
        C_2_we0 => readData32_U0_C_2_we0,
        C_2_d0 => readData32_U0_C_2_d0,
        C_3_address0 => readData32_U0_C_3_address0,
        C_3_ce0 => readData32_U0_C_3_ce0,
        C_3_we0 => readData32_U0_C_3_we0,
        C_3_d0 => readData32_U0_C_3_d0,
        C_4_address0 => readData32_U0_C_4_address0,
        C_4_ce0 => readData32_U0_C_4_ce0,
        C_4_we0 => readData32_U0_C_4_we0,
        C_4_d0 => readData32_U0_C_4_d0,
        C_5_address0 => readData32_U0_C_5_address0,
        C_5_ce0 => readData32_U0_C_5_ce0,
        C_5_we0 => readData32_U0_C_5_we0,
        C_5_d0 => readData32_U0_C_5_d0,
        C_6_address0 => readData32_U0_C_6_address0,
        C_6_ce0 => readData32_U0_C_6_ce0,
        C_6_we0 => readData32_U0_C_6_we0,
        C_6_d0 => readData32_U0_C_6_d0,
        C_7_address0 => readData32_U0_C_7_address0,
        C_7_ce0 => readData32_U0_C_7_ce0,
        C_7_we0 => readData32_U0_C_7_we0,
        C_7_d0 => readData32_U0_C_7_d0,
        D_address0 => readData32_U0_D_address0,
        D_ce0 => readData32_U0_D_ce0,
        D_we0 => readData32_U0_D_we0,
        D_d0 => readData32_U0_D_d0,
        D_output_AXI => D_output_AXI,
        D_output_AXI_out_din => readData32_U0_D_output_AXI_out_din,
        D_output_AXI_out_full_n => D_output_AXI_c_full_n,
        D_output_AXI_out_write => readData32_U0_D_output_AXI_out_write);

    kernel_2mm_U0 : component kernel_2mm
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        A_0_address0 => kernel_2mm_U0_A_0_address0,
        A_0_ce0 => kernel_2mm_U0_A_0_ce0,
        A_0_d0 => kernel_2mm_U0_A_0_d0,
        A_0_q0 => A_0_t_q0,
        A_0_we0 => kernel_2mm_U0_A_0_we0,
        A_0_address1 => kernel_2mm_U0_A_0_address1,
        A_0_ce1 => kernel_2mm_U0_A_0_ce1,
        A_0_d1 => kernel_2mm_U0_A_0_d1,
        A_0_q1 => ap_const_lv32_0,
        A_0_we1 => kernel_2mm_U0_A_0_we1,
        A_1_address0 => kernel_2mm_U0_A_1_address0,
        A_1_ce0 => kernel_2mm_U0_A_1_ce0,
        A_1_d0 => kernel_2mm_U0_A_1_d0,
        A_1_q0 => A_1_t_q0,
        A_1_we0 => kernel_2mm_U0_A_1_we0,
        A_1_address1 => kernel_2mm_U0_A_1_address1,
        A_1_ce1 => kernel_2mm_U0_A_1_ce1,
        A_1_d1 => kernel_2mm_U0_A_1_d1,
        A_1_q1 => ap_const_lv32_0,
        A_1_we1 => kernel_2mm_U0_A_1_we1,
        B_0_address0 => kernel_2mm_U0_B_0_address0,
        B_0_ce0 => kernel_2mm_U0_B_0_ce0,
        B_0_d0 => kernel_2mm_U0_B_0_d0,
        B_0_q0 => B_0_t_q0,
        B_0_we0 => kernel_2mm_U0_B_0_we0,
        B_0_address1 => kernel_2mm_U0_B_0_address1,
        B_0_ce1 => kernel_2mm_U0_B_0_ce1,
        B_0_d1 => kernel_2mm_U0_B_0_d1,
        B_0_q1 => ap_const_lv32_0,
        B_0_we1 => kernel_2mm_U0_B_0_we1,
        B_1_address0 => kernel_2mm_U0_B_1_address0,
        B_1_ce0 => kernel_2mm_U0_B_1_ce0,
        B_1_d0 => kernel_2mm_U0_B_1_d0,
        B_1_q0 => B_1_t_q0,
        B_1_we0 => kernel_2mm_U0_B_1_we0,
        B_1_address1 => kernel_2mm_U0_B_1_address1,
        B_1_ce1 => kernel_2mm_U0_B_1_ce1,
        B_1_d1 => kernel_2mm_U0_B_1_d1,
        B_1_q1 => ap_const_lv32_0,
        B_1_we1 => kernel_2mm_U0_B_1_we1,
        C_0_address0 => kernel_2mm_U0_C_0_address0,
        C_0_ce0 => kernel_2mm_U0_C_0_ce0,
        C_0_d0 => kernel_2mm_U0_C_0_d0,
        C_0_q0 => C_0_t_q0,
        C_0_we0 => kernel_2mm_U0_C_0_we0,
        C_0_address1 => kernel_2mm_U0_C_0_address1,
        C_0_ce1 => kernel_2mm_U0_C_0_ce1,
        C_0_d1 => kernel_2mm_U0_C_0_d1,
        C_0_q1 => ap_const_lv32_0,
        C_0_we1 => kernel_2mm_U0_C_0_we1,
        C_1_address0 => kernel_2mm_U0_C_1_address0,
        C_1_ce0 => kernel_2mm_U0_C_1_ce0,
        C_1_d0 => kernel_2mm_U0_C_1_d0,
        C_1_q0 => C_1_t_q0,
        C_1_we0 => kernel_2mm_U0_C_1_we0,
        C_1_address1 => kernel_2mm_U0_C_1_address1,
        C_1_ce1 => kernel_2mm_U0_C_1_ce1,
        C_1_d1 => kernel_2mm_U0_C_1_d1,
        C_1_q1 => ap_const_lv32_0,
        C_1_we1 => kernel_2mm_U0_C_1_we1,
        C_2_address0 => kernel_2mm_U0_C_2_address0,
        C_2_ce0 => kernel_2mm_U0_C_2_ce0,
        C_2_d0 => kernel_2mm_U0_C_2_d0,
        C_2_q0 => C_2_t_q0,
        C_2_we0 => kernel_2mm_U0_C_2_we0,
        C_2_address1 => kernel_2mm_U0_C_2_address1,
        C_2_ce1 => kernel_2mm_U0_C_2_ce1,
        C_2_d1 => kernel_2mm_U0_C_2_d1,
        C_2_q1 => ap_const_lv32_0,
        C_2_we1 => kernel_2mm_U0_C_2_we1,
        C_3_address0 => kernel_2mm_U0_C_3_address0,
        C_3_ce0 => kernel_2mm_U0_C_3_ce0,
        C_3_d0 => kernel_2mm_U0_C_3_d0,
        C_3_q0 => C_3_t_q0,
        C_3_we0 => kernel_2mm_U0_C_3_we0,
        C_3_address1 => kernel_2mm_U0_C_3_address1,
        C_3_ce1 => kernel_2mm_U0_C_3_ce1,
        C_3_d1 => kernel_2mm_U0_C_3_d1,
        C_3_q1 => ap_const_lv32_0,
        C_3_we1 => kernel_2mm_U0_C_3_we1,
        C_4_address0 => kernel_2mm_U0_C_4_address0,
        C_4_ce0 => kernel_2mm_U0_C_4_ce0,
        C_4_d0 => kernel_2mm_U0_C_4_d0,
        C_4_q0 => C_4_t_q0,
        C_4_we0 => kernel_2mm_U0_C_4_we0,
        C_4_address1 => kernel_2mm_U0_C_4_address1,
        C_4_ce1 => kernel_2mm_U0_C_4_ce1,
        C_4_d1 => kernel_2mm_U0_C_4_d1,
        C_4_q1 => ap_const_lv32_0,
        C_4_we1 => kernel_2mm_U0_C_4_we1,
        C_5_address0 => kernel_2mm_U0_C_5_address0,
        C_5_ce0 => kernel_2mm_U0_C_5_ce0,
        C_5_d0 => kernel_2mm_U0_C_5_d0,
        C_5_q0 => C_5_t_q0,
        C_5_we0 => kernel_2mm_U0_C_5_we0,
        C_5_address1 => kernel_2mm_U0_C_5_address1,
        C_5_ce1 => kernel_2mm_U0_C_5_ce1,
        C_5_d1 => kernel_2mm_U0_C_5_d1,
        C_5_q1 => ap_const_lv32_0,
        C_5_we1 => kernel_2mm_U0_C_5_we1,
        C_6_address0 => kernel_2mm_U0_C_6_address0,
        C_6_ce0 => kernel_2mm_U0_C_6_ce0,
        C_6_d0 => kernel_2mm_U0_C_6_d0,
        C_6_q0 => C_6_t_q0,
        C_6_we0 => kernel_2mm_U0_C_6_we0,
        C_6_address1 => kernel_2mm_U0_C_6_address1,
        C_6_ce1 => kernel_2mm_U0_C_6_ce1,
        C_6_d1 => kernel_2mm_U0_C_6_d1,
        C_6_q1 => ap_const_lv32_0,
        C_6_we1 => kernel_2mm_U0_C_6_we1,
        C_7_address0 => kernel_2mm_U0_C_7_address0,
        C_7_ce0 => kernel_2mm_U0_C_7_ce0,
        C_7_d0 => kernel_2mm_U0_C_7_d0,
        C_7_q0 => C_7_t_q0,
        C_7_we0 => kernel_2mm_U0_C_7_we0,
        C_7_address1 => kernel_2mm_U0_C_7_address1,
        C_7_ce1 => kernel_2mm_U0_C_7_ce1,
        C_7_d1 => kernel_2mm_U0_C_7_d1,
        C_7_q1 => ap_const_lv32_0,
        C_7_we1 => kernel_2mm_U0_C_7_we1,
        D_address0 => kernel_2mm_U0_D_address0,
        D_ce0 => kernel_2mm_U0_D_ce0,
        D_d0 => kernel_2mm_U0_D_d0,
        D_q0 => D_t_q0,
        D_we0 => kernel_2mm_U0_D_we0,
        D_address1 => kernel_2mm_U0_D_address1,
        D_ce1 => kernel_2mm_U0_D_ce1,
        D_d1 => kernel_2mm_U0_D_d1,
        D_q1 => ap_const_lv32_0,
        D_we1 => kernel_2mm_U0_D_we1,
        D_output_address0 => kernel_2mm_U0_D_output_address0,
        D_output_ce0 => kernel_2mm_U0_D_output_ce0,
        D_output_d0 => kernel_2mm_U0_D_output_d0,
        D_output_q0 => ap_const_lv32_0,
        D_output_we0 => kernel_2mm_U0_D_output_we0,
        D_output_address1 => kernel_2mm_U0_D_output_address1,
        D_output_ce1 => kernel_2mm_U0_D_output_ce1,
        D_output_d1 => kernel_2mm_U0_D_output_d1,
        D_output_q1 => ap_const_lv32_0,
        D_output_we1 => kernel_2mm_U0_D_output_we1,
        A_0_empty_n => ap_const_logic_0,
        A_0_read => kernel_2mm_U0_A_0_read,
        A_1_empty_n => ap_const_logic_0,
        A_1_read => kernel_2mm_U0_A_1_read,
        B_0_empty_n => ap_const_logic_0,
        B_0_read => kernel_2mm_U0_B_0_read,
        B_1_empty_n => ap_const_logic_0,
        B_1_read => kernel_2mm_U0_B_1_read,
        C_0_empty_n => ap_const_logic_0,
        C_0_read => kernel_2mm_U0_C_0_read,
        C_1_empty_n => ap_const_logic_0,
        C_1_read => kernel_2mm_U0_C_1_read,
        C_2_empty_n => ap_const_logic_0,
        C_2_read => kernel_2mm_U0_C_2_read,
        C_3_empty_n => ap_const_logic_0,
        C_3_read => kernel_2mm_U0_C_3_read,
        C_4_empty_n => ap_const_logic_0,
        C_4_read => kernel_2mm_U0_C_4_read,
        C_5_empty_n => ap_const_logic_0,
        C_5_read => kernel_2mm_U0_C_5_read,
        C_6_empty_n => ap_const_logic_0,
        C_6_read => kernel_2mm_U0_C_6_read,
        C_7_empty_n => ap_const_logic_0,
        C_7_read => kernel_2mm_U0_C_7_read,
        D_empty_n => ap_const_logic_0,
        D_read => kernel_2mm_U0_D_read,
        D_output_full_n => D_output_i_full_n,
        D_output_write => kernel_2mm_U0_D_output_write,
        ap_done => kernel_2mm_U0_ap_done,
        ap_start => kernel_2mm_U0_ap_start,
        ap_ready => kernel_2mm_U0_ap_ready,
        ap_idle => kernel_2mm_U0_ap_idle,
        ap_continue => kernel_2mm_U0_ap_continue);

    writeData_U0 : component writeData
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => writeData_U0_ap_start,
        ap_done => writeData_U0_ap_done,
        ap_continue => writeData_U0_ap_continue,
        ap_idle => writeData_U0_ap_idle,
        ap_ready => writeData_U0_ap_ready,
        m_axi_D_output_AXI_AWVALID => writeData_U0_m_axi_D_output_AXI_AWVALID,
        m_axi_D_output_AXI_AWREADY => gmem4_AWREADY,
        m_axi_D_output_AXI_AWADDR => writeData_U0_m_axi_D_output_AXI_AWADDR,
        m_axi_D_output_AXI_AWID => writeData_U0_m_axi_D_output_AXI_AWID,
        m_axi_D_output_AXI_AWLEN => writeData_U0_m_axi_D_output_AXI_AWLEN,
        m_axi_D_output_AXI_AWSIZE => writeData_U0_m_axi_D_output_AXI_AWSIZE,
        m_axi_D_output_AXI_AWBURST => writeData_U0_m_axi_D_output_AXI_AWBURST,
        m_axi_D_output_AXI_AWLOCK => writeData_U0_m_axi_D_output_AXI_AWLOCK,
        m_axi_D_output_AXI_AWCACHE => writeData_U0_m_axi_D_output_AXI_AWCACHE,
        m_axi_D_output_AXI_AWPROT => writeData_U0_m_axi_D_output_AXI_AWPROT,
        m_axi_D_output_AXI_AWQOS => writeData_U0_m_axi_D_output_AXI_AWQOS,
        m_axi_D_output_AXI_AWREGION => writeData_U0_m_axi_D_output_AXI_AWREGION,
        m_axi_D_output_AXI_AWUSER => writeData_U0_m_axi_D_output_AXI_AWUSER,
        m_axi_D_output_AXI_WVALID => writeData_U0_m_axi_D_output_AXI_WVALID,
        m_axi_D_output_AXI_WREADY => gmem4_WREADY,
        m_axi_D_output_AXI_WDATA => writeData_U0_m_axi_D_output_AXI_WDATA,
        m_axi_D_output_AXI_WSTRB => writeData_U0_m_axi_D_output_AXI_WSTRB,
        m_axi_D_output_AXI_WLAST => writeData_U0_m_axi_D_output_AXI_WLAST,
        m_axi_D_output_AXI_WID => writeData_U0_m_axi_D_output_AXI_WID,
        m_axi_D_output_AXI_WUSER => writeData_U0_m_axi_D_output_AXI_WUSER,
        m_axi_D_output_AXI_ARVALID => writeData_U0_m_axi_D_output_AXI_ARVALID,
        m_axi_D_output_AXI_ARREADY => ap_const_logic_0,
        m_axi_D_output_AXI_ARADDR => writeData_U0_m_axi_D_output_AXI_ARADDR,
        m_axi_D_output_AXI_ARID => writeData_U0_m_axi_D_output_AXI_ARID,
        m_axi_D_output_AXI_ARLEN => writeData_U0_m_axi_D_output_AXI_ARLEN,
        m_axi_D_output_AXI_ARSIZE => writeData_U0_m_axi_D_output_AXI_ARSIZE,
        m_axi_D_output_AXI_ARBURST => writeData_U0_m_axi_D_output_AXI_ARBURST,
        m_axi_D_output_AXI_ARLOCK => writeData_U0_m_axi_D_output_AXI_ARLOCK,
        m_axi_D_output_AXI_ARCACHE => writeData_U0_m_axi_D_output_AXI_ARCACHE,
        m_axi_D_output_AXI_ARPROT => writeData_U0_m_axi_D_output_AXI_ARPROT,
        m_axi_D_output_AXI_ARQOS => writeData_U0_m_axi_D_output_AXI_ARQOS,
        m_axi_D_output_AXI_ARREGION => writeData_U0_m_axi_D_output_AXI_ARREGION,
        m_axi_D_output_AXI_ARUSER => writeData_U0_m_axi_D_output_AXI_ARUSER,
        m_axi_D_output_AXI_RVALID => ap_const_logic_0,
        m_axi_D_output_AXI_RREADY => writeData_U0_m_axi_D_output_AXI_RREADY,
        m_axi_D_output_AXI_RDATA => ap_const_lv32_0,
        m_axi_D_output_AXI_RLAST => ap_const_logic_0,
        m_axi_D_output_AXI_RID => ap_const_lv1_0,
        m_axi_D_output_AXI_RUSER => ap_const_lv1_0,
        m_axi_D_output_AXI_RRESP => ap_const_lv2_0,
        m_axi_D_output_AXI_BVALID => gmem4_BVALID,
        m_axi_D_output_AXI_BREADY => writeData_U0_m_axi_D_output_AXI_BREADY,
        m_axi_D_output_AXI_BRESP => gmem4_BRESP,
        m_axi_D_output_AXI_BID => gmem4_BID,
        m_axi_D_output_AXI_BUSER => gmem4_BUSER,
        D_output_AXI_offset_dout => D_output_AXI_c_dout,
        D_output_AXI_offset_empty_n => D_output_AXI_c_empty_n,
        D_output_AXI_offset_read => writeData_U0_D_output_AXI_offset_read,
        D_output_address0 => writeData_U0_D_output_address0,
        D_output_ce0 => writeData_U0_D_output_ce0,
        D_output_q0 => D_output_t_q0);

    D_output_AXI_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readData32_U0_D_output_AXI_out_din,
        if_full_n => D_output_AXI_c_full_n,
        if_write => readData32_U0_D_output_AXI_out_write,
        if_dout => D_output_AXI_c_dout,
        if_empty_n => D_output_AXI_c_empty_n,
        if_read => writeData_U0_D_output_AXI_offset_read);





    ap_sync_reg_channel_write_A_0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_A_0 <= ap_const_logic_0;
            else
                if (((readData32_U0_ap_done and readData32_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_A_0 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_A_0 <= ap_sync_channel_write_A_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_A_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_A_1 <= ap_const_logic_0;
            else
                if (((readData32_U0_ap_done and readData32_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_A_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_A_1 <= ap_sync_channel_write_A_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_B_0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_B_0 <= ap_const_logic_0;
            else
                if (((readData32_U0_ap_done and readData32_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_B_0 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_B_0 <= ap_sync_channel_write_B_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_B_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_B_1 <= ap_const_logic_0;
            else
                if (((readData32_U0_ap_done and readData32_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_B_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_B_1 <= ap_sync_channel_write_B_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_C_0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_C_0 <= ap_const_logic_0;
            else
                if (((readData32_U0_ap_done and readData32_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_C_0 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_C_0 <= ap_sync_channel_write_C_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_C_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_C_1 <= ap_const_logic_0;
            else
                if (((readData32_U0_ap_done and readData32_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_C_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_C_1 <= ap_sync_channel_write_C_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_C_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_C_2 <= ap_const_logic_0;
            else
                if (((readData32_U0_ap_done and readData32_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_C_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_C_2 <= ap_sync_channel_write_C_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_C_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_C_3 <= ap_const_logic_0;
            else
                if (((readData32_U0_ap_done and readData32_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_C_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_C_3 <= ap_sync_channel_write_C_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_C_4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_C_4 <= ap_const_logic_0;
            else
                if (((readData32_U0_ap_done and readData32_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_C_4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_C_4 <= ap_sync_channel_write_C_4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_C_5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_C_5 <= ap_const_logic_0;
            else
                if (((readData32_U0_ap_done and readData32_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_C_5 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_C_5 <= ap_sync_channel_write_C_5;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_C_6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_C_6 <= ap_const_logic_0;
            else
                if (((readData32_U0_ap_done and readData32_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_C_6 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_C_6 <= ap_sync_channel_write_C_6;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_C_7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_C_7 <= ap_const_logic_0;
            else
                if (((readData32_U0_ap_done and readData32_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_C_7 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_C_7 <= ap_sync_channel_write_C_7;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_D_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_D <= ap_const_logic_0;
            else
                if (((readData32_U0_ap_done and readData32_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_D <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_D <= ap_sync_channel_write_D;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_A_0 <= (readData32_U0_ap_done and (ap_sync_reg_channel_write_A_0 xor ap_const_logic_1));
    ap_channel_done_A_1 <= (readData32_U0_ap_done and (ap_sync_reg_channel_write_A_1 xor ap_const_logic_1));
    ap_channel_done_B_0 <= (readData32_U0_ap_done and (ap_sync_reg_channel_write_B_0 xor ap_const_logic_1));
    ap_channel_done_B_1 <= (readData32_U0_ap_done and (ap_sync_reg_channel_write_B_1 xor ap_const_logic_1));
    ap_channel_done_C_0 <= (readData32_U0_ap_done and (ap_sync_reg_channel_write_C_0 xor ap_const_logic_1));
    ap_channel_done_C_1 <= (readData32_U0_ap_done and (ap_sync_reg_channel_write_C_1 xor ap_const_logic_1));
    ap_channel_done_C_2 <= (readData32_U0_ap_done and (ap_sync_reg_channel_write_C_2 xor ap_const_logic_1));
    ap_channel_done_C_3 <= (readData32_U0_ap_done and (ap_sync_reg_channel_write_C_3 xor ap_const_logic_1));
    ap_channel_done_C_4 <= (readData32_U0_ap_done and (ap_sync_reg_channel_write_C_4 xor ap_const_logic_1));
    ap_channel_done_C_5 <= (readData32_U0_ap_done and (ap_sync_reg_channel_write_C_5 xor ap_const_logic_1));
    ap_channel_done_C_6 <= (readData32_U0_ap_done and (ap_sync_reg_channel_write_C_6 xor ap_const_logic_1));
    ap_channel_done_C_7 <= (readData32_U0_ap_done and (ap_sync_reg_channel_write_C_7 xor ap_const_logic_1));
    ap_channel_done_D <= (readData32_U0_ap_done and (ap_sync_reg_channel_write_D xor ap_const_logic_1));
    ap_channel_done_D_output <= kernel_2mm_U0_ap_done;
    ap_done <= writeData_U0_ap_done;
    ap_idle <= (writeData_U0_ap_idle and readData32_U0_ap_idle and kernel_2mm_U0_ap_idle and (ap_const_logic_1 xor D_output_t_empty_n) and (ap_const_logic_1 xor D_t_empty_n) and (ap_const_logic_1 xor C_7_t_empty_n) and (ap_const_logic_1 xor C_6_t_empty_n) and (ap_const_logic_1 xor C_5_t_empty_n) and (ap_const_logic_1 xor C_4_t_empty_n) and (ap_const_logic_1 xor C_3_t_empty_n) and (ap_const_logic_1 xor C_2_t_empty_n) and (ap_const_logic_1 xor C_1_t_empty_n) and (ap_const_logic_1 xor C_0_t_empty_n) and (ap_const_logic_1 xor B_1_t_empty_n) and (ap_const_logic_1 xor B_0_t_empty_n) and (ap_const_logic_1 xor A_1_t_empty_n) and (ap_const_logic_1 xor A_0_t_empty_n));
    ap_ready <= readData32_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_channel_write_A_0 <= ((readData32_U0_A_0_full_n and ap_channel_done_A_0) or ap_sync_reg_channel_write_A_0);
    ap_sync_channel_write_A_1 <= ((readData32_U0_A_1_full_n and ap_channel_done_A_1) or ap_sync_reg_channel_write_A_1);
    ap_sync_channel_write_B_0 <= ((readData32_U0_B_0_full_n and ap_channel_done_B_0) or ap_sync_reg_channel_write_B_0);
    ap_sync_channel_write_B_1 <= ((readData32_U0_B_1_full_n and ap_channel_done_B_1) or ap_sync_reg_channel_write_B_1);
    ap_sync_channel_write_C_0 <= ((readData32_U0_C_0_full_n and ap_channel_done_C_0) or ap_sync_reg_channel_write_C_0);
    ap_sync_channel_write_C_1 <= ((readData32_U0_C_1_full_n and ap_channel_done_C_1) or ap_sync_reg_channel_write_C_1);
    ap_sync_channel_write_C_2 <= ((readData32_U0_C_2_full_n and ap_channel_done_C_2) or ap_sync_reg_channel_write_C_2);
    ap_sync_channel_write_C_3 <= ((readData32_U0_C_3_full_n and ap_channel_done_C_3) or ap_sync_reg_channel_write_C_3);
    ap_sync_channel_write_C_4 <= ((readData32_U0_C_4_full_n and ap_channel_done_C_4) or ap_sync_reg_channel_write_C_4);
    ap_sync_channel_write_C_5 <= ((readData32_U0_C_5_full_n and ap_channel_done_C_5) or ap_sync_reg_channel_write_C_5);
    ap_sync_channel_write_C_6 <= ((readData32_U0_C_6_full_n and ap_channel_done_C_6) or ap_sync_reg_channel_write_C_6);
    ap_sync_channel_write_C_7 <= ((readData32_U0_C_7_full_n and ap_channel_done_C_7) or ap_sync_reg_channel_write_C_7);
    ap_sync_channel_write_D <= ((readData32_U0_D_full_n and ap_channel_done_D) or ap_sync_reg_channel_write_D);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= writeData_U0_ap_done;
    ap_sync_ready <= readData32_U0_ap_ready;
    kernel_2mm_U0_D_output_full_n <= D_output_i_full_n;
    kernel_2mm_U0_ap_continue <= kernel_2mm_U0_D_output_full_n;
    kernel_2mm_U0_ap_start <= (D_t_empty_n and C_7_t_empty_n and C_6_t_empty_n and C_5_t_empty_n and C_4_t_empty_n and C_3_t_empty_n and C_2_t_empty_n and C_1_t_empty_n and C_0_t_empty_n and B_1_t_empty_n and B_0_t_empty_n and A_1_t_empty_n and A_0_t_empty_n);
    kernel_2mm_U0_start_full_n <= ap_const_logic_1;
    kernel_2mm_U0_start_write <= ap_const_logic_0;
    readData32_U0_A_0_full_n <= A_0_i_full_n;
    readData32_U0_A_1_full_n <= A_1_i_full_n;
    readData32_U0_B_0_full_n <= B_0_i_full_n;
    readData32_U0_B_1_full_n <= B_1_i_full_n;
    readData32_U0_C_0_full_n <= C_0_i_full_n;
    readData32_U0_C_1_full_n <= C_1_i_full_n;
    readData32_U0_C_2_full_n <= C_2_i_full_n;
    readData32_U0_C_3_full_n <= C_3_i_full_n;
    readData32_U0_C_4_full_n <= C_4_i_full_n;
    readData32_U0_C_5_full_n <= C_5_i_full_n;
    readData32_U0_C_6_full_n <= C_6_i_full_n;
    readData32_U0_C_7_full_n <= C_7_i_full_n;
    readData32_U0_D_full_n <= D_i_full_n;
    readData32_U0_ap_continue <= (ap_sync_channel_write_D and ap_sync_channel_write_C_7 and ap_sync_channel_write_C_6 and ap_sync_channel_write_C_5 and ap_sync_channel_write_C_4 and ap_sync_channel_write_C_3 and ap_sync_channel_write_C_2 and ap_sync_channel_write_C_1 and ap_sync_channel_write_C_0 and ap_sync_channel_write_B_1 and ap_sync_channel_write_B_0 and ap_sync_channel_write_A_1 and ap_sync_channel_write_A_0);
    readData32_U0_ap_start <= ap_start;
    readData32_U0_start_full_n <= ap_const_logic_1;
    readData32_U0_start_write <= ap_const_logic_0;
    writeData_U0_ap_continue <= ap_const_logic_1;
    writeData_U0_ap_start <= D_output_t_empty_n;
    writeData_U0_start_full_n <= ap_const_logic_1;
    writeData_U0_start_write <= ap_const_logic_0;
end behav;
