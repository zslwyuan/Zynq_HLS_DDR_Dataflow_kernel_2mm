-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity func15 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_0_ce0 : OUT STD_LOGIC;
    A_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_1_ce0 : OUT STD_LOGIC;
    A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_0_ce0 : OUT STD_LOGIC;
    B_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_1_ce0 : OUT STD_LOGIC;
    B_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_0_ce0 : OUT STD_LOGIC;
    C_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_1_ce0 : OUT STD_LOGIC;
    C_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_2_ce0 : OUT STD_LOGIC;
    C_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_3_ce0 : OUT STD_LOGIC;
    C_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_4_ce0 : OUT STD_LOGIC;
    C_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_5_ce0 : OUT STD_LOGIC;
    C_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_6_ce0 : OUT STD_LOGIC;
    C_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_7_ce0 : OUT STD_LOGIC;
    C_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    D_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    D_ce0 : OUT STD_LOGIC;
    D_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    tmp_0_ce0 : OUT STD_LOGIC;
    tmp_0_we0 : OUT STD_LOGIC;
    tmp_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    tmp_1_ce0 : OUT STD_LOGIC;
    tmp_1_we0 : OUT STD_LOGIC;
    tmp_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tmp_2_ce0 : OUT STD_LOGIC;
    tmp_2_we0 : OUT STD_LOGIC;
    tmp_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tmp_3_ce0 : OUT STD_LOGIC;
    tmp_3_we0 : OUT STD_LOGIC;
    tmp_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tmp_4_ce0 : OUT STD_LOGIC;
    tmp_4_we0 : OUT STD_LOGIC;
    tmp_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tmp_5_ce0 : OUT STD_LOGIC;
    tmp_5_we0 : OUT STD_LOGIC;
    tmp_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tmp_6_ce0 : OUT STD_LOGIC;
    tmp_6_we0 : OUT STD_LOGIC;
    tmp_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tmp_7_ce0 : OUT STD_LOGIC;
    tmp_7_we0 : OUT STD_LOGIC;
    tmp_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_mid_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_mid_0_ce0 : OUT STD_LOGIC;
    C_mid_0_we0 : OUT STD_LOGIC;
    C_mid_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_mid_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_mid_1_ce0 : OUT STD_LOGIC;
    C_mid_1_we0 : OUT STD_LOGIC;
    C_mid_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_mid_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_mid_2_ce0 : OUT STD_LOGIC;
    C_mid_2_we0 : OUT STD_LOGIC;
    C_mid_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_mid_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_mid_3_ce0 : OUT STD_LOGIC;
    C_mid_3_we0 : OUT STD_LOGIC;
    C_mid_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_mid_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_mid_4_ce0 : OUT STD_LOGIC;
    C_mid_4_we0 : OUT STD_LOGIC;
    C_mid_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_mid_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_mid_5_ce0 : OUT STD_LOGIC;
    C_mid_5_we0 : OUT STD_LOGIC;
    C_mid_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_mid_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_mid_6_ce0 : OUT STD_LOGIC;
    C_mid_6_we0 : OUT STD_LOGIC;
    C_mid_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_mid_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_mid_7_ce0 : OUT STD_LOGIC;
    C_mid_7_we0 : OUT STD_LOGIC;
    C_mid_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    D_mid_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    D_mid_ce0 : OUT STD_LOGIC;
    D_mid_we0 : OUT STD_LOGIC;
    D_mid_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of func15 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_func1_execute8_fu_66_ap_start : STD_LOGIC;
    signal grp_func1_execute8_fu_66_ap_done : STD_LOGIC;
    signal grp_func1_execute8_fu_66_ap_idle : STD_LOGIC;
    signal grp_func1_execute8_fu_66_ap_ready : STD_LOGIC;
    signal grp_func1_execute8_fu_66_tmp_mid_execute_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_func1_execute8_fu_66_tmp_mid_execute_0_ce0 : STD_LOGIC;
    signal grp_func1_execute8_fu_66_tmp_mid_execute_0_we0 : STD_LOGIC;
    signal grp_func1_execute8_fu_66_tmp_mid_execute_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_func1_execute8_fu_66_tmp_mid_execute_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_func1_execute8_fu_66_tmp_mid_execute_1_ce0 : STD_LOGIC;
    signal grp_func1_execute8_fu_66_tmp_mid_execute_1_we0 : STD_LOGIC;
    signal grp_func1_execute8_fu_66_tmp_mid_execute_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_func1_execute8_fu_66_tmp_mid_execute_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_func1_execute8_fu_66_tmp_mid_execute_2_ce0 : STD_LOGIC;
    signal grp_func1_execute8_fu_66_tmp_mid_execute_2_we0 : STD_LOGIC;
    signal grp_func1_execute8_fu_66_tmp_mid_execute_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_func1_execute8_fu_66_tmp_mid_execute_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_func1_execute8_fu_66_tmp_mid_execute_3_ce0 : STD_LOGIC;
    signal grp_func1_execute8_fu_66_tmp_mid_execute_3_we0 : STD_LOGIC;
    signal grp_func1_execute8_fu_66_tmp_mid_execute_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_func1_execute8_fu_66_tmp_mid_execute_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_func1_execute8_fu_66_tmp_mid_execute_4_ce0 : STD_LOGIC;
    signal grp_func1_execute8_fu_66_tmp_mid_execute_4_we0 : STD_LOGIC;
    signal grp_func1_execute8_fu_66_tmp_mid_execute_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_func1_execute8_fu_66_tmp_mid_execute_5_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_func1_execute8_fu_66_tmp_mid_execute_5_ce0 : STD_LOGIC;
    signal grp_func1_execute8_fu_66_tmp_mid_execute_5_we0 : STD_LOGIC;
    signal grp_func1_execute8_fu_66_tmp_mid_execute_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_func1_execute8_fu_66_tmp_mid_execute_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_func1_execute8_fu_66_tmp_mid_execute_6_ce0 : STD_LOGIC;
    signal grp_func1_execute8_fu_66_tmp_mid_execute_6_we0 : STD_LOGIC;
    signal grp_func1_execute8_fu_66_tmp_mid_execute_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_func1_execute8_fu_66_tmp_mid_execute_7_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_func1_execute8_fu_66_tmp_mid_execute_7_ce0 : STD_LOGIC;
    signal grp_func1_execute8_fu_66_tmp_mid_execute_7_we0 : STD_LOGIC;
    signal grp_func1_execute8_fu_66_tmp_mid_execute_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_func1_execute8_fu_66_A_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_func1_execute8_fu_66_A_0_ce0 : STD_LOGIC;
    signal grp_func1_execute8_fu_66_A_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_func1_execute8_fu_66_A_1_ce0 : STD_LOGIC;
    signal grp_func1_execute8_fu_66_B_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_func1_execute8_fu_66_B_0_ce0 : STD_LOGIC;
    signal grp_func1_execute8_fu_66_B_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_func1_execute8_fu_66_B_1_ce0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_ap_start : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_ap_done : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_ap_idle : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_ap_ready : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_input_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_input_0_ce0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_input_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_input_1_ce0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_input_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_input_2_ce0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_input_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_input_3_ce0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_input_4_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_input_4_ce0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_input_5_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_input_5_ce0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_input_6_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_input_6_ce0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_input_7_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_input_7_ce0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_mid_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_mid_0_ce0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_mid_0_we0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_mid_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_mid_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_mid_1_ce0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_mid_1_we0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_mid_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_mid_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_mid_2_ce0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_mid_2_we0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_mid_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_mid_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_mid_3_ce0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_mid_3_we0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_mid_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_mid_4_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_mid_4_ce0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_mid_4_we0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_mid_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_mid_5_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_mid_5_ce0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_mid_5_we0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_mid_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_mid_6_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_mid_6_ce0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_mid_6_we0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_mid_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_mid_7_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_buffer_func1_C7_fu_94_C_mid_7_ce0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_mid_7_we0 : STD_LOGIC;
    signal grp_buffer_func1_C7_fu_94_C_mid_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_buffer_func1_D6_fu_130_ap_start : STD_LOGIC;
    signal grp_buffer_func1_D6_fu_130_ap_done : STD_LOGIC;
    signal grp_buffer_func1_D6_fu_130_ap_idle : STD_LOGIC;
    signal grp_buffer_func1_D6_fu_130_ap_ready : STD_LOGIC;
    signal grp_buffer_func1_D6_fu_130_D_input_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_buffer_func1_D6_fu_130_D_input_ce0 : STD_LOGIC;
    signal grp_buffer_func1_D6_fu_130_D_mid_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_buffer_func1_D6_fu_130_D_mid_ce0 : STD_LOGIC;
    signal grp_buffer_func1_D6_fu_130_D_mid_we0 : STD_LOGIC;
    signal grp_buffer_func1_D6_fu_130_D_mid_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_func1_execute8_fu_66_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call2 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_buffer_func1_C7_fu_94_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call1 : BOOLEAN;
    signal grp_buffer_func1_D6_fu_130_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call0 : BOOLEAN;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state1 : BOOLEAN;

    component func1_execute8 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        tmp_mid_execute_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        tmp_mid_execute_0_ce0 : OUT STD_LOGIC;
        tmp_mid_execute_0_we0 : OUT STD_LOGIC;
        tmp_mid_execute_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_mid_execute_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_mid_execute_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        tmp_mid_execute_1_ce0 : OUT STD_LOGIC;
        tmp_mid_execute_1_we0 : OUT STD_LOGIC;
        tmp_mid_execute_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_mid_execute_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_mid_execute_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tmp_mid_execute_2_ce0 : OUT STD_LOGIC;
        tmp_mid_execute_2_we0 : OUT STD_LOGIC;
        tmp_mid_execute_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_mid_execute_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_mid_execute_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tmp_mid_execute_3_ce0 : OUT STD_LOGIC;
        tmp_mid_execute_3_we0 : OUT STD_LOGIC;
        tmp_mid_execute_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_mid_execute_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_mid_execute_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tmp_mid_execute_4_ce0 : OUT STD_LOGIC;
        tmp_mid_execute_4_we0 : OUT STD_LOGIC;
        tmp_mid_execute_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_mid_execute_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_mid_execute_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tmp_mid_execute_5_ce0 : OUT STD_LOGIC;
        tmp_mid_execute_5_we0 : OUT STD_LOGIC;
        tmp_mid_execute_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_mid_execute_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_mid_execute_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tmp_mid_execute_6_ce0 : OUT STD_LOGIC;
        tmp_mid_execute_6_we0 : OUT STD_LOGIC;
        tmp_mid_execute_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_mid_execute_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_mid_execute_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tmp_mid_execute_7_ce0 : OUT STD_LOGIC;
        tmp_mid_execute_7_we0 : OUT STD_LOGIC;
        tmp_mid_execute_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_mid_execute_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_0_ce0 : OUT STD_LOGIC;
        A_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_1_ce0 : OUT STD_LOGIC;
        A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_0_ce0 : OUT STD_LOGIC;
        B_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_1_ce0 : OUT STD_LOGIC;
        B_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component buffer_func1_C7 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_input_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        C_input_0_ce0 : OUT STD_LOGIC;
        C_input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_input_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        C_input_1_ce0 : OUT STD_LOGIC;
        C_input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_input_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_input_2_ce0 : OUT STD_LOGIC;
        C_input_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_input_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_input_3_ce0 : OUT STD_LOGIC;
        C_input_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_input_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_input_4_ce0 : OUT STD_LOGIC;
        C_input_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_input_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_input_5_ce0 : OUT STD_LOGIC;
        C_input_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_input_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_input_6_ce0 : OUT STD_LOGIC;
        C_input_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_input_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_input_7_ce0 : OUT STD_LOGIC;
        C_input_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_mid_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        C_mid_0_ce0 : OUT STD_LOGIC;
        C_mid_0_we0 : OUT STD_LOGIC;
        C_mid_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_mid_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        C_mid_1_ce0 : OUT STD_LOGIC;
        C_mid_1_we0 : OUT STD_LOGIC;
        C_mid_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_mid_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_mid_2_ce0 : OUT STD_LOGIC;
        C_mid_2_we0 : OUT STD_LOGIC;
        C_mid_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_mid_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_mid_3_ce0 : OUT STD_LOGIC;
        C_mid_3_we0 : OUT STD_LOGIC;
        C_mid_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_mid_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_mid_4_ce0 : OUT STD_LOGIC;
        C_mid_4_we0 : OUT STD_LOGIC;
        C_mid_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_mid_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_mid_5_ce0 : OUT STD_LOGIC;
        C_mid_5_we0 : OUT STD_LOGIC;
        C_mid_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_mid_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_mid_6_ce0 : OUT STD_LOGIC;
        C_mid_6_we0 : OUT STD_LOGIC;
        C_mid_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_mid_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_mid_7_ce0 : OUT STD_LOGIC;
        C_mid_7_we0 : OUT STD_LOGIC;
        C_mid_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component buffer_func1_D6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        D_input_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        D_input_ce0 : OUT STD_LOGIC;
        D_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        D_mid_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        D_mid_ce0 : OUT STD_LOGIC;
        D_mid_we0 : OUT STD_LOGIC;
        D_mid_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_func1_execute8_fu_66 : component func1_execute8
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_func1_execute8_fu_66_ap_start,
        ap_done => grp_func1_execute8_fu_66_ap_done,
        ap_idle => grp_func1_execute8_fu_66_ap_idle,
        ap_ready => grp_func1_execute8_fu_66_ap_ready,
        tmp_mid_execute_0_address0 => grp_func1_execute8_fu_66_tmp_mid_execute_0_address0,
        tmp_mid_execute_0_ce0 => grp_func1_execute8_fu_66_tmp_mid_execute_0_ce0,
        tmp_mid_execute_0_we0 => grp_func1_execute8_fu_66_tmp_mid_execute_0_we0,
        tmp_mid_execute_0_d0 => grp_func1_execute8_fu_66_tmp_mid_execute_0_d0,
        tmp_mid_execute_0_q0 => tmp_0_q0,
        tmp_mid_execute_1_address0 => grp_func1_execute8_fu_66_tmp_mid_execute_1_address0,
        tmp_mid_execute_1_ce0 => grp_func1_execute8_fu_66_tmp_mid_execute_1_ce0,
        tmp_mid_execute_1_we0 => grp_func1_execute8_fu_66_tmp_mid_execute_1_we0,
        tmp_mid_execute_1_d0 => grp_func1_execute8_fu_66_tmp_mid_execute_1_d0,
        tmp_mid_execute_1_q0 => tmp_1_q0,
        tmp_mid_execute_2_address0 => grp_func1_execute8_fu_66_tmp_mid_execute_2_address0,
        tmp_mid_execute_2_ce0 => grp_func1_execute8_fu_66_tmp_mid_execute_2_ce0,
        tmp_mid_execute_2_we0 => grp_func1_execute8_fu_66_tmp_mid_execute_2_we0,
        tmp_mid_execute_2_d0 => grp_func1_execute8_fu_66_tmp_mid_execute_2_d0,
        tmp_mid_execute_2_q0 => tmp_2_q0,
        tmp_mid_execute_3_address0 => grp_func1_execute8_fu_66_tmp_mid_execute_3_address0,
        tmp_mid_execute_3_ce0 => grp_func1_execute8_fu_66_tmp_mid_execute_3_ce0,
        tmp_mid_execute_3_we0 => grp_func1_execute8_fu_66_tmp_mid_execute_3_we0,
        tmp_mid_execute_3_d0 => grp_func1_execute8_fu_66_tmp_mid_execute_3_d0,
        tmp_mid_execute_3_q0 => tmp_3_q0,
        tmp_mid_execute_4_address0 => grp_func1_execute8_fu_66_tmp_mid_execute_4_address0,
        tmp_mid_execute_4_ce0 => grp_func1_execute8_fu_66_tmp_mid_execute_4_ce0,
        tmp_mid_execute_4_we0 => grp_func1_execute8_fu_66_tmp_mid_execute_4_we0,
        tmp_mid_execute_4_d0 => grp_func1_execute8_fu_66_tmp_mid_execute_4_d0,
        tmp_mid_execute_4_q0 => tmp_4_q0,
        tmp_mid_execute_5_address0 => grp_func1_execute8_fu_66_tmp_mid_execute_5_address0,
        tmp_mid_execute_5_ce0 => grp_func1_execute8_fu_66_tmp_mid_execute_5_ce0,
        tmp_mid_execute_5_we0 => grp_func1_execute8_fu_66_tmp_mid_execute_5_we0,
        tmp_mid_execute_5_d0 => grp_func1_execute8_fu_66_tmp_mid_execute_5_d0,
        tmp_mid_execute_5_q0 => tmp_5_q0,
        tmp_mid_execute_6_address0 => grp_func1_execute8_fu_66_tmp_mid_execute_6_address0,
        tmp_mid_execute_6_ce0 => grp_func1_execute8_fu_66_tmp_mid_execute_6_ce0,
        tmp_mid_execute_6_we0 => grp_func1_execute8_fu_66_tmp_mid_execute_6_we0,
        tmp_mid_execute_6_d0 => grp_func1_execute8_fu_66_tmp_mid_execute_6_d0,
        tmp_mid_execute_6_q0 => tmp_6_q0,
        tmp_mid_execute_7_address0 => grp_func1_execute8_fu_66_tmp_mid_execute_7_address0,
        tmp_mid_execute_7_ce0 => grp_func1_execute8_fu_66_tmp_mid_execute_7_ce0,
        tmp_mid_execute_7_we0 => grp_func1_execute8_fu_66_tmp_mid_execute_7_we0,
        tmp_mid_execute_7_d0 => grp_func1_execute8_fu_66_tmp_mid_execute_7_d0,
        tmp_mid_execute_7_q0 => tmp_7_q0,
        A_0_address0 => grp_func1_execute8_fu_66_A_0_address0,
        A_0_ce0 => grp_func1_execute8_fu_66_A_0_ce0,
        A_0_q0 => A_0_q0,
        A_1_address0 => grp_func1_execute8_fu_66_A_1_address0,
        A_1_ce0 => grp_func1_execute8_fu_66_A_1_ce0,
        A_1_q0 => A_1_q0,
        B_0_address0 => grp_func1_execute8_fu_66_B_0_address0,
        B_0_ce0 => grp_func1_execute8_fu_66_B_0_ce0,
        B_0_q0 => B_0_q0,
        B_1_address0 => grp_func1_execute8_fu_66_B_1_address0,
        B_1_ce0 => grp_func1_execute8_fu_66_B_1_ce0,
        B_1_q0 => B_1_q0);

    grp_buffer_func1_C7_fu_94 : component buffer_func1_C7
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_buffer_func1_C7_fu_94_ap_start,
        ap_done => grp_buffer_func1_C7_fu_94_ap_done,
        ap_idle => grp_buffer_func1_C7_fu_94_ap_idle,
        ap_ready => grp_buffer_func1_C7_fu_94_ap_ready,
        C_input_0_address0 => grp_buffer_func1_C7_fu_94_C_input_0_address0,
        C_input_0_ce0 => grp_buffer_func1_C7_fu_94_C_input_0_ce0,
        C_input_0_q0 => C_0_q0,
        C_input_1_address0 => grp_buffer_func1_C7_fu_94_C_input_1_address0,
        C_input_1_ce0 => grp_buffer_func1_C7_fu_94_C_input_1_ce0,
        C_input_1_q0 => C_1_q0,
        C_input_2_address0 => grp_buffer_func1_C7_fu_94_C_input_2_address0,
        C_input_2_ce0 => grp_buffer_func1_C7_fu_94_C_input_2_ce0,
        C_input_2_q0 => C_2_q0,
        C_input_3_address0 => grp_buffer_func1_C7_fu_94_C_input_3_address0,
        C_input_3_ce0 => grp_buffer_func1_C7_fu_94_C_input_3_ce0,
        C_input_3_q0 => C_3_q0,
        C_input_4_address0 => grp_buffer_func1_C7_fu_94_C_input_4_address0,
        C_input_4_ce0 => grp_buffer_func1_C7_fu_94_C_input_4_ce0,
        C_input_4_q0 => C_4_q0,
        C_input_5_address0 => grp_buffer_func1_C7_fu_94_C_input_5_address0,
        C_input_5_ce0 => grp_buffer_func1_C7_fu_94_C_input_5_ce0,
        C_input_5_q0 => C_5_q0,
        C_input_6_address0 => grp_buffer_func1_C7_fu_94_C_input_6_address0,
        C_input_6_ce0 => grp_buffer_func1_C7_fu_94_C_input_6_ce0,
        C_input_6_q0 => C_6_q0,
        C_input_7_address0 => grp_buffer_func1_C7_fu_94_C_input_7_address0,
        C_input_7_ce0 => grp_buffer_func1_C7_fu_94_C_input_7_ce0,
        C_input_7_q0 => C_7_q0,
        C_mid_0_address0 => grp_buffer_func1_C7_fu_94_C_mid_0_address0,
        C_mid_0_ce0 => grp_buffer_func1_C7_fu_94_C_mid_0_ce0,
        C_mid_0_we0 => grp_buffer_func1_C7_fu_94_C_mid_0_we0,
        C_mid_0_d0 => grp_buffer_func1_C7_fu_94_C_mid_0_d0,
        C_mid_1_address0 => grp_buffer_func1_C7_fu_94_C_mid_1_address0,
        C_mid_1_ce0 => grp_buffer_func1_C7_fu_94_C_mid_1_ce0,
        C_mid_1_we0 => grp_buffer_func1_C7_fu_94_C_mid_1_we0,
        C_mid_1_d0 => grp_buffer_func1_C7_fu_94_C_mid_1_d0,
        C_mid_2_address0 => grp_buffer_func1_C7_fu_94_C_mid_2_address0,
        C_mid_2_ce0 => grp_buffer_func1_C7_fu_94_C_mid_2_ce0,
        C_mid_2_we0 => grp_buffer_func1_C7_fu_94_C_mid_2_we0,
        C_mid_2_d0 => grp_buffer_func1_C7_fu_94_C_mid_2_d0,
        C_mid_3_address0 => grp_buffer_func1_C7_fu_94_C_mid_3_address0,
        C_mid_3_ce0 => grp_buffer_func1_C7_fu_94_C_mid_3_ce0,
        C_mid_3_we0 => grp_buffer_func1_C7_fu_94_C_mid_3_we0,
        C_mid_3_d0 => grp_buffer_func1_C7_fu_94_C_mid_3_d0,
        C_mid_4_address0 => grp_buffer_func1_C7_fu_94_C_mid_4_address0,
        C_mid_4_ce0 => grp_buffer_func1_C7_fu_94_C_mid_4_ce0,
        C_mid_4_we0 => grp_buffer_func1_C7_fu_94_C_mid_4_we0,
        C_mid_4_d0 => grp_buffer_func1_C7_fu_94_C_mid_4_d0,
        C_mid_5_address0 => grp_buffer_func1_C7_fu_94_C_mid_5_address0,
        C_mid_5_ce0 => grp_buffer_func1_C7_fu_94_C_mid_5_ce0,
        C_mid_5_we0 => grp_buffer_func1_C7_fu_94_C_mid_5_we0,
        C_mid_5_d0 => grp_buffer_func1_C7_fu_94_C_mid_5_d0,
        C_mid_6_address0 => grp_buffer_func1_C7_fu_94_C_mid_6_address0,
        C_mid_6_ce0 => grp_buffer_func1_C7_fu_94_C_mid_6_ce0,
        C_mid_6_we0 => grp_buffer_func1_C7_fu_94_C_mid_6_we0,
        C_mid_6_d0 => grp_buffer_func1_C7_fu_94_C_mid_6_d0,
        C_mid_7_address0 => grp_buffer_func1_C7_fu_94_C_mid_7_address0,
        C_mid_7_ce0 => grp_buffer_func1_C7_fu_94_C_mid_7_ce0,
        C_mid_7_we0 => grp_buffer_func1_C7_fu_94_C_mid_7_we0,
        C_mid_7_d0 => grp_buffer_func1_C7_fu_94_C_mid_7_d0);

    grp_buffer_func1_D6_fu_130 : component buffer_func1_D6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_buffer_func1_D6_fu_130_ap_start,
        ap_done => grp_buffer_func1_D6_fu_130_ap_done,
        ap_idle => grp_buffer_func1_D6_fu_130_ap_idle,
        ap_ready => grp_buffer_func1_D6_fu_130_ap_ready,
        D_input_address0 => grp_buffer_func1_D6_fu_130_D_input_address0,
        D_input_ce0 => grp_buffer_func1_D6_fu_130_D_input_ce0,
        D_input_q0 => D_q0,
        D_mid_address0 => grp_buffer_func1_D6_fu_130_D_mid_address0,
        D_mid_ce0 => grp_buffer_func1_D6_fu_130_D_mid_ce0,
        D_mid_we0 => grp_buffer_func1_D6_fu_130_D_mid_we0,
        D_mid_d0 => grp_buffer_func1_D6_fu_130_D_mid_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_buffer_func1_C7_fu_94_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_buffer_func1_C7_fu_94_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_buffer_func1_C7_fu_94_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_buffer_func1_C7_fu_94_ap_ready = ap_const_logic_1)) then 
                    grp_buffer_func1_C7_fu_94_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_buffer_func1_D6_fu_130_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_buffer_func1_D6_fu_130_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_buffer_func1_D6_fu_130_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_buffer_func1_D6_fu_130_ap_ready = ap_const_logic_1)) then 
                    grp_buffer_func1_D6_fu_130_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_func1_execute8_fu_66_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_func1_execute8_fu_66_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_func1_execute8_fu_66_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_func1_execute8_fu_66_ap_ready = ap_const_logic_1)) then 
                    grp_func1_execute8_fu_66_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    A_0_address0 <= grp_func1_execute8_fu_66_A_0_address0;
    A_0_ce0 <= grp_func1_execute8_fu_66_A_0_ce0;
    A_1_address0 <= grp_func1_execute8_fu_66_A_1_address0;
    A_1_ce0 <= grp_func1_execute8_fu_66_A_1_ce0;
    B_0_address0 <= grp_func1_execute8_fu_66_B_0_address0;
    B_0_ce0 <= grp_func1_execute8_fu_66_B_0_ce0;
    B_1_address0 <= grp_func1_execute8_fu_66_B_1_address0;
    B_1_ce0 <= grp_func1_execute8_fu_66_B_1_ce0;
    C_0_address0 <= grp_buffer_func1_C7_fu_94_C_input_0_address0;
    C_0_ce0 <= grp_buffer_func1_C7_fu_94_C_input_0_ce0;
    C_1_address0 <= grp_buffer_func1_C7_fu_94_C_input_1_address0;
    C_1_ce0 <= grp_buffer_func1_C7_fu_94_C_input_1_ce0;
    C_2_address0 <= grp_buffer_func1_C7_fu_94_C_input_2_address0;
    C_2_ce0 <= grp_buffer_func1_C7_fu_94_C_input_2_ce0;
    C_3_address0 <= grp_buffer_func1_C7_fu_94_C_input_3_address0;
    C_3_ce0 <= grp_buffer_func1_C7_fu_94_C_input_3_ce0;
    C_4_address0 <= grp_buffer_func1_C7_fu_94_C_input_4_address0;
    C_4_ce0 <= grp_buffer_func1_C7_fu_94_C_input_4_ce0;
    C_5_address0 <= grp_buffer_func1_C7_fu_94_C_input_5_address0;
    C_5_ce0 <= grp_buffer_func1_C7_fu_94_C_input_5_ce0;
    C_6_address0 <= grp_buffer_func1_C7_fu_94_C_input_6_address0;
    C_6_ce0 <= grp_buffer_func1_C7_fu_94_C_input_6_ce0;
    C_7_address0 <= grp_buffer_func1_C7_fu_94_C_input_7_address0;
    C_7_ce0 <= grp_buffer_func1_C7_fu_94_C_input_7_ce0;
    C_mid_0_address0 <= grp_buffer_func1_C7_fu_94_C_mid_0_address0;
    C_mid_0_ce0 <= grp_buffer_func1_C7_fu_94_C_mid_0_ce0;
    C_mid_0_d0 <= grp_buffer_func1_C7_fu_94_C_mid_0_d0;
    C_mid_0_we0 <= grp_buffer_func1_C7_fu_94_C_mid_0_we0;
    C_mid_1_address0 <= grp_buffer_func1_C7_fu_94_C_mid_1_address0;
    C_mid_1_ce0 <= grp_buffer_func1_C7_fu_94_C_mid_1_ce0;
    C_mid_1_d0 <= grp_buffer_func1_C7_fu_94_C_mid_1_d0;
    C_mid_1_we0 <= grp_buffer_func1_C7_fu_94_C_mid_1_we0;
    C_mid_2_address0 <= grp_buffer_func1_C7_fu_94_C_mid_2_address0;
    C_mid_2_ce0 <= grp_buffer_func1_C7_fu_94_C_mid_2_ce0;
    C_mid_2_d0 <= grp_buffer_func1_C7_fu_94_C_mid_2_d0;
    C_mid_2_we0 <= grp_buffer_func1_C7_fu_94_C_mid_2_we0;
    C_mid_3_address0 <= grp_buffer_func1_C7_fu_94_C_mid_3_address0;
    C_mid_3_ce0 <= grp_buffer_func1_C7_fu_94_C_mid_3_ce0;
    C_mid_3_d0 <= grp_buffer_func1_C7_fu_94_C_mid_3_d0;
    C_mid_3_we0 <= grp_buffer_func1_C7_fu_94_C_mid_3_we0;
    C_mid_4_address0 <= grp_buffer_func1_C7_fu_94_C_mid_4_address0;
    C_mid_4_ce0 <= grp_buffer_func1_C7_fu_94_C_mid_4_ce0;
    C_mid_4_d0 <= grp_buffer_func1_C7_fu_94_C_mid_4_d0;
    C_mid_4_we0 <= grp_buffer_func1_C7_fu_94_C_mid_4_we0;
    C_mid_5_address0 <= grp_buffer_func1_C7_fu_94_C_mid_5_address0;
    C_mid_5_ce0 <= grp_buffer_func1_C7_fu_94_C_mid_5_ce0;
    C_mid_5_d0 <= grp_buffer_func1_C7_fu_94_C_mid_5_d0;
    C_mid_5_we0 <= grp_buffer_func1_C7_fu_94_C_mid_5_we0;
    C_mid_6_address0 <= grp_buffer_func1_C7_fu_94_C_mid_6_address0;
    C_mid_6_ce0 <= grp_buffer_func1_C7_fu_94_C_mid_6_ce0;
    C_mid_6_d0 <= grp_buffer_func1_C7_fu_94_C_mid_6_d0;
    C_mid_6_we0 <= grp_buffer_func1_C7_fu_94_C_mid_6_we0;
    C_mid_7_address0 <= grp_buffer_func1_C7_fu_94_C_mid_7_address0;
    C_mid_7_ce0 <= grp_buffer_func1_C7_fu_94_C_mid_7_ce0;
    C_mid_7_d0 <= grp_buffer_func1_C7_fu_94_C_mid_7_d0;
    C_mid_7_we0 <= grp_buffer_func1_C7_fu_94_C_mid_7_we0;
    D_address0 <= grp_buffer_func1_D6_fu_130_D_input_address0;
    D_ce0 <= grp_buffer_func1_D6_fu_130_D_input_ce0;
    D_mid_address0 <= grp_buffer_func1_D6_fu_130_D_mid_address0;
    D_mid_ce0 <= grp_buffer_func1_D6_fu_130_D_mid_ce0;
    D_mid_d0 <= grp_buffer_func1_D6_fu_130_D_mid_d0;
    D_mid_we0 <= grp_buffer_func1_D6_fu_130_D_mid_we0;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call0_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call2_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call2 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(grp_func1_execute8_fu_66_ap_done, grp_buffer_func1_C7_fu_94_ap_done, grp_buffer_func1_D6_fu_130_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((grp_buffer_func1_D6_fu_130_ap_done = ap_const_logic_0) or (grp_buffer_func1_C7_fu_94_ap_done = ap_const_logic_0) or (grp_func1_execute8_fu_66_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_buffer_func1_C7_fu_94_ap_start <= grp_buffer_func1_C7_fu_94_ap_start_reg;
    grp_buffer_func1_D6_fu_130_ap_start <= grp_buffer_func1_D6_fu_130_ap_start_reg;
    grp_func1_execute8_fu_66_ap_start <= grp_func1_execute8_fu_66_ap_start_reg;
    tmp_0_address0 <= grp_func1_execute8_fu_66_tmp_mid_execute_0_address0;
    tmp_0_ce0 <= grp_func1_execute8_fu_66_tmp_mid_execute_0_ce0;
    tmp_0_d0 <= grp_func1_execute8_fu_66_tmp_mid_execute_0_d0;
    tmp_0_we0 <= grp_func1_execute8_fu_66_tmp_mid_execute_0_we0;
    tmp_1_address0 <= grp_func1_execute8_fu_66_tmp_mid_execute_1_address0;
    tmp_1_ce0 <= grp_func1_execute8_fu_66_tmp_mid_execute_1_ce0;
    tmp_1_d0 <= grp_func1_execute8_fu_66_tmp_mid_execute_1_d0;
    tmp_1_we0 <= grp_func1_execute8_fu_66_tmp_mid_execute_1_we0;
    tmp_2_address0 <= grp_func1_execute8_fu_66_tmp_mid_execute_2_address0;
    tmp_2_ce0 <= grp_func1_execute8_fu_66_tmp_mid_execute_2_ce0;
    tmp_2_d0 <= grp_func1_execute8_fu_66_tmp_mid_execute_2_d0;
    tmp_2_we0 <= grp_func1_execute8_fu_66_tmp_mid_execute_2_we0;
    tmp_3_address0 <= grp_func1_execute8_fu_66_tmp_mid_execute_3_address0;
    tmp_3_ce0 <= grp_func1_execute8_fu_66_tmp_mid_execute_3_ce0;
    tmp_3_d0 <= grp_func1_execute8_fu_66_tmp_mid_execute_3_d0;
    tmp_3_we0 <= grp_func1_execute8_fu_66_tmp_mid_execute_3_we0;
    tmp_4_address0 <= grp_func1_execute8_fu_66_tmp_mid_execute_4_address0;
    tmp_4_ce0 <= grp_func1_execute8_fu_66_tmp_mid_execute_4_ce0;
    tmp_4_d0 <= grp_func1_execute8_fu_66_tmp_mid_execute_4_d0;
    tmp_4_we0 <= grp_func1_execute8_fu_66_tmp_mid_execute_4_we0;
    tmp_5_address0 <= grp_func1_execute8_fu_66_tmp_mid_execute_5_address0;
    tmp_5_ce0 <= grp_func1_execute8_fu_66_tmp_mid_execute_5_ce0;
    tmp_5_d0 <= grp_func1_execute8_fu_66_tmp_mid_execute_5_d0;
    tmp_5_we0 <= grp_func1_execute8_fu_66_tmp_mid_execute_5_we0;
    tmp_6_address0 <= grp_func1_execute8_fu_66_tmp_mid_execute_6_address0;
    tmp_6_ce0 <= grp_func1_execute8_fu_66_tmp_mid_execute_6_ce0;
    tmp_6_d0 <= grp_func1_execute8_fu_66_tmp_mid_execute_6_d0;
    tmp_6_we0 <= grp_func1_execute8_fu_66_tmp_mid_execute_6_we0;
    tmp_7_address0 <= grp_func1_execute8_fu_66_tmp_mid_execute_7_address0;
    tmp_7_ce0 <= grp_func1_execute8_fu_66_tmp_mid_execute_7_ce0;
    tmp_7_d0 <= grp_func1_execute8_fu_66_tmp_mid_execute_7_d0;
    tmp_7_we0 <= grp_func1_execute8_fu_66_tmp_mid_execute_7_we0;
end behav;
