/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_io.h"
#include "xscugic.h"
#include "xkernel_2mm_wrapper.h"
#include "test.h"


extern volatile static int RunHlsMacc = 0;
extern volatile static int ResultAvailHlsMacc = 0;


void arrayInitialize(int *A_AXI, int *B_AXI, int *C_AXI, int *D_input_AXI, int *D_output_AXI)
{
	int i, j, k;
	for (i = 0; i < NI; i++)
	{
		for (k = 0; k < NK; ++k)
		{
			A_AXI[i*NK+k] = k;//i*NK+k;
		}
	}

	for (k = 0; k < NK; ++k)
		for (j = 0; j < NJ; j++)

		{
			B_AXI[k*NJ+j] = j;//k*NJ+j;
		}

	for (j = 0; j < NJ; j++)
		for (k = 0; k < NL; ++k)
		{
			C_AXI[j*NL+k] = k;//j*NL+k;
		}

	for (i = 0; i < NI; i++)
		for (j = 0; j < NL; j++)
		  {
			D_input_AXI[i*NL+j] = j;//D_output[i][j] + A[i][j];
		  }

	for (i = 0; i < NI; i++)
		for (j = 0; j < NL; j++)
		  {
			D_output_AXI[i*NL+j] = 0;//D_output[i][j] + A[i][j];
		  }

	Xil_DCacheFlushRange(D_output_AXI, 10000000*8);

	XKernel_2mm_wrapper_Set_D_output_AXI(&hls_test,D_output_AXI);
	XKernel_2mm_wrapper_Set_A_AXI(&hls_test,A_AXI);
	XKernel_2mm_wrapper_Set_B_AXI(&hls_test,B_AXI);
	XKernel_2mm_wrapper_Set_C_AXI(&hls_test,C_AXI);
	XKernel_2mm_wrapper_Set_D_input_AXI(&hls_test,D_input_AXI);

	printf("HLS DDR3 A_AXI offset: 0x%x\n\r",A_AXI);
	printf("HLS DDR3 B_AXI offset: 0x%x\n\r",B_AXI);
	printf("HLS DDR3 C_AXI offset: 0x%x\n\r",C_AXI);
	printf("HLS DDR3 D_input_AXI offset: 0x%x\n\r",D_input_AXI);
	printf("HLS DDR3 D_output_AXI offset: 0x%x\n\r",D_output_AXI);

}





int main()
{
    init_platform();
    print("Start\n\r");

    int i, j, k;
    int status;

    //Setup the control of the HLS module
    status = xkernel_2mm_wrapper_init(&hls_test);
    if(status != XST_SUCCESS){
       print("HLS peripheral setup failed\n\r");
       exit(-1);
    }
    //Setup the interrupt
    status = setup_interrupt();
    if(status != XST_SUCCESS){
       print("Interrupt setup failed\n\r");
       exit(-1);
    }

    print("HLS started\n\r");

    // initialize the data in DDR
    int *D_output_AXI = (int *)(0x10000000);
    int *A_AXI = (int *)(0x11000000);
    int *B_AXI = (int *)(0x12000000);
    int *C_AXI = (int *)(0x13000000);
    int *D_input_AXI = (int *)(0x14000000);
    int D_output_AXI_check[NI][NL];

    arrayInitialize(A_AXI, B_AXI, C_AXI, D_input_AXI, D_output_AXI);





    // start the acceleration of FPGA and monitor its ending.
    int timer_user = 0;
    if (0) { // use interrupt
    	xkernel_2mm_wrapper_start(&hls_test);
    //	print("Detecting interrupt from HLS HW.\n\r");
       while(!ResultAvailHlsMacc)
       {
    	   timer_user++;
       }
          ; // spin
       print("Interrupt received from HLS HW.\n\r");
    } else { // Simple non-interrupt driven test
    	xkernel_2mm_wrapper_start(&hls_test);
    //	print("Detecting HLS peripheral complete.\n\r");
       do {
    	   timer_user++;
       } while (!XKernel_2mm_wrapper_IsReady(&hls_test)); // because we are implementing dataflow, we should check IsReady but not IsDone
       print("Detected HLS peripheral complete. Result received.\n\r");
    }



    printf("\n\r");
    // run the application on CPU for checking
    kernel_2mm_wrapper(
    		A_AXI,
    		B_AXI,
    		C_AXI,
    		D_input_AXI,
			D_output_AXI_check);

    i=0;
    while(i<100000) i++;

    printf("ticks: %d\n\r",timer_user);

    print("-------------------------------------------------done and check as below\n\r");
  //  for(i=0;i<1000000000;i++);
    Xil_DCacheInvalidateRange(D_output_AXI, 10000000*8);
    int check_result = 0;

    int check_list[] = {123, 85, 222, 111, 77, 93, 21, 13, 24, 64 };
    for(i=0;i<10;i++)
    {
    	int check_i = check_list[i] / NL;
    	int check_j = check_list[i] % NL;
    	int data_check = D_output_AXI[check_list[i]];
    	printf("addr=%d: expected:%d=== result:%u\n\r",check_list[i], D_output_AXI_check[check_i][check_j],data_check);
    }
    if (check_result==10) printf("check passed\n\r");
    else printf("check failed\n\r");
    printf("----------------------------------------------\n\r");

    cleanup_platform();
    return 0;
}

