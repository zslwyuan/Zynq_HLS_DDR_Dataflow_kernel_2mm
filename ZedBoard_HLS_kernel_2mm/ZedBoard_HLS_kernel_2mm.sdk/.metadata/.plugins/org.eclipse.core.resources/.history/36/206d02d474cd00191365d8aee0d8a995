/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_io.h"
#include "xscugic.h"
#include "xkernel_2mm_wrapper.h"
#include "test.h"

// HLS macc HW instance
XKernel_2mm_wrapper hls_test;
//Interrupt Controller Instance
XScuGic ScuGic;

volatile static int RunHlsMacc = 0;
volatile static int ResultAvailHlsMacc = 0;

int xkernel_2mm_wrapper_init(XKernel_2mm_wrapper *hls_maccPtr)
{
	XKernel_2mm_wrapper_Config *cfgPtr;
	int status;
	cfgPtr = XKernel_2mm_wrapper_LookupConfig(XPAR_XKERNEL_2MM_WRAPPER_0_DEVICE_ID);
	if (!cfgPtr) {
		print("ERROR: Lookup of accelerator configuration failed.\n\r");
		return XST_FAILURE;
	}
	status = XKernel_2mm_wrapper_CfgInitialize(hls_maccPtr, cfgPtr);
	if (status != XST_SUCCESS) {
		print("ERROR: Could not initialize accelerator.\n\r");
		return XST_FAILURE;
	}
	return status;
}

void xkernel_2mm_wrapper_start(void *InstancePtr)
{
	XKernel_2mm_wrapper *pAccelerator = (XKernel_2mm_wrapper *)InstancePtr;
	XKernel_2mm_wrapper_InterruptEnable(pAccelerator,1);
	XKernel_2mm_wrapper_InterruptGlobalEnable(pAccelerator);
	XKernel_2mm_wrapper_Start(pAccelerator);
}

void xkernel_2mm_wrapper_isr(void *InstancePtr){
	XKernel_2mm_wrapper *pAccelerator = (XKernel_2mm_wrapper *)InstancePtr;

   //Disable the global interrupt
	XKernel_2mm_wrapper_InterruptGlobalDisable(pAccelerator);
   //Disable the local interrupt
	XKernel_2mm_wrapper_InterruptDisable(pAccelerator,0xffffffff);

   // clear the local interrupt
	XKernel_2mm_wrapper_InterruptClear(pAccelerator,1);

   ResultAvailHlsMacc = 1;
   // restart the core if it should run again
   if(RunHlsMacc){
	   xkernel_2mm_wrapper_start(pAccelerator);
   }
}

int setup_interrupt()
{
   //This functions sets up the interrupt on the ARM
   int result;
   XScuGic_Config *pCfg = XScuGic_LookupConfig(XPAR_SCUGIC_SINGLE_DEVICE_ID);
   if (pCfg == NULL){
      print("Interrupt Configuration Lookup Failed\n\r");
      return XST_FAILURE;
   }
   result = XScuGic_CfgInitialize(&ScuGic,pCfg,pCfg->CpuBaseAddress);
   if(result != XST_SUCCESS){
      return result;
   }
   // self test
   result = XScuGic_SelfTest(&ScuGic);
   if(result != XST_SUCCESS){
      return result;
   }
   // Initialize the exception handler
   Xil_ExceptionInit();
   // Register the exception handler
   //print("Register the exception handler\n\r");
   Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,(Xil_ExceptionHandler)XScuGic_InterruptHandler,&ScuGic);
   //Enable the exception handler
   Xil_ExceptionEnable();
   // Connect the Adder ISR to the exception table
   //print("Connect the Adder ISR to the Exception handler table\n\r");
   result = XScuGic_Connect(&ScuGic,XPAR_FABRIC_KERNEL_2MM_WRAPPER_0_INTERRUPT_INTR,(Xil_InterruptHandler)xkernel_2mm_wrapper_isr,&hls_test);
   if(result != XST_SUCCESS){
      return result;
   }
   //print("Enable the Adder ISR\n\r");
   XScuGic_Enable(&ScuGic,XPAR_FABRIC_KERNEL_2MM_WRAPPER_0_INTERRUPT_INTR);
   return XST_SUCCESS;
}

void arrayInitialize(int *A_AXI, int *B_AXI, int *C_AXI, int *D_input_AXI, int *D_output_AXI)
{
	int i, j, k;
	for (i = 0; i < NI; i++)
	{
		for (k = 0; k < NK; ++k)
		{
			A_AXI[i*NK+k] = 1;//i*NK+k;
		}
	}

	for (k = 0; k < NK; ++k)
		for (j = 0; j < NJ; j++)

		{
			B_AXI[k*NJ+j] = k*NJ+j;
		}

	for (j = 0; j < NJ; j++)
		for (k = 0; k < NL; ++k)
		{
			C_AXI[j*NL+k] = j*NL+k;
		}

	for (i = 0; i < NI; i++)
		for (j = 0; j < NL; j++)
		  {
			D_output_AXI[i*NL+j] = 0;//D_output[i][j] + A[i][j];
		  }

	Xil_DCacheFlushRange(D_output_AXI, 10000000*8);

	XKernel_2mm_wrapper_Set_D_output_AXI(&hls_test,D_output_AXI);
	XKernel_2mm_wrapper_Set_A_AXI(&hls_test,A_AXI);
	XKernel_2mm_wrapper_Set_B_AXI(&hls_test,B_AXI);
	XKernel_2mm_wrapper_Set_C_AXI(&hls_test,C_AXI);
	XKernel_2mm_wrapper_Set_D_input_AXI(&hls_test,D_input_AXI);

	printf("HLS DDR3 A_AXI offset: 0x%x\n\r",A_AXI);
	printf("HLS DDR3 B_AXI offset: 0x%x\n\r",B_AXI);
	printf("HLS DDR3 C_AXI offset: 0x%x\n\r",C_AXI);
	printf("HLS DDR3 D_input_AXI offset: 0x%x\n\r",D_input_AXI);
	printf("HLS DDR3 D_output_AXI offset: 0x%x\n\r",D_output_AXI);

}





int main()
{
    init_platform();
    print("Start\n\r");

    int i, j, k;
    int status;

    //Setup the matrix mult
    status = xkernel_2mm_wrapper_init(&hls_test);
    if(status != XST_SUCCESS){
       print("HLS peripheral setup failed\n\r");
       exit(-1);
    }
    //Setup the interrupt
    status = setup_interrupt();
    if(status != XST_SUCCESS){
       print("Interrupt setup failed\n\r");
       exit(-1);
    }

    print("HLS started\n\r");

    int *D_output_AXI = (int *)(0x10000000);
    int *A_AXI = (int *)(0x11000000);
    int *B_AXI = (int *)(0x12000000);
    int *C_AXI = (int *)(0x13000000);
    int *D_input_AXI = (int *)(0x14000000);
    int D_output_AXI_check[NI][NL];

    arrayInitialize(A_AXI, B_AXI, C_AXI, D_input_AXI, D_output_AXI);





    int timer_user = 0;
    if (0) { // use interrupt
    	xkernel_2mm_wrapper_start(&hls_test);
    //	print("Detecting interrupt from HLS HW.\n\r");
       while(!ResultAvailHlsMacc)
       {
    	   timer_user++;
       }
          ; // spin
       print("Interrupt received from HLS HW.\n\r");
    } else { // Simple non-interrupt driven test
    	xkernel_2mm_wrapper_start(&hls_test);
    //	print("Detecting HLS peripheral complete.\n\r");
       do {
    	   timer_user++;
       } while (!XKernel_2mm_wrapper_IsDone(&hls_test));
       print("Detected HLS peripheral complete. Result received.\n\r");
    }




    kernel_2mm_wrapper(
    		A_AXI,
    		B_AXI,
    		C_AXI,
    		D_input_AXI,
			D_output_AXI_check);

    double seconds = (double)timer_user/4944331.0;
    printf("ticks: %d\n\r",timer_user);
    printf("time:%.03lfs\n\r",seconds);
    print("-------------------------------------------------done and check as below\n\r");
  //  for(i=0;i<1000000000;i++);
    Xil_DCacheInvalidateRange(D_output_AXI, 10000000*8);
    int check_result = 0;
    for(i=0;i<10;i++)
    {
    	int data_check = D_output_AXI[i];
    	printf("addr=%d: expected:%d=== result:%u\n\r",i, D_output_AXI_check[0][i],data_check);
    }
    if (check_result==10) printf("check passed\n\r");
    else printf("check failed\n\r");
    printf("----------------------------------------------\n\r");

    cleanup_platform();
    return 0;
}





void buffer_func1_D(
		int D_input[NI][NL],
		int D_mid[NI][NL]
		)
{
	int i,j,k;
	  for (i = 0; i < NI; i++)
	    for (j = 0; j < NL; j++)
	      {
	    	D_mid[i][j] = D_input[i][j];
	      }
}

void buffer_func1_C(
		int C_input[NJ][NL],
		int C_mid[NJ][NL]
		)
{
	int i,j,k;
    for (j = 0; j < NL; j++)
      {
    	for (k = 0; k < NJ; ++k)
    	{
    		C_mid[k][j] =  C_input[k][j];
    	}
      }
}

void func1_execute(
		int tmp_mid_execute[NI][NJ],
		int A[NI][NK],
		int B[NK][NJ]
		)
{
	int i,j,k;
	  for (i = 0; i < NI; i++)
	    for (j = 0; j < NJ; j++)
	    {
	    			tmp_mid_execute[i][j] = 0;
					for (k = 0; k < NK; ++k)
					{
						tmp_mid_execute[i][j] += 123 * A[i][k] * B[k][j];
					}
	    }

}


void func1(
		int A[NI][NK],
		int B[NK][NJ],
		int C[NJ][NL],
		int D[NI][NL],
		int tmp[NI][NJ],
		int C_mid[NJ][NL],
		int D_mid[NI][NL]
		)
{
	int i,j,k;
	buffer_func1_D(
			D,
			D_mid
			);
	buffer_func1_C(
			C,
			C_mid
			);
	func1_execute(
			tmp,
			A,
			B
			);

}

void func2(
		int C[NJ][NL],
		int D[NI][NL],
		int tmp[NI][NJ],
		int D_output[NI][NL]

		)
{
	int i,j,k;
	  for (i = 0; i < NI; i++)
	    for (j = 0; j < NL; j++)
	      {
	    	int sum = D[i][j] * 321;
	    	for (k = 0; k < NJ; ++k)
	    	{
	    		sum+= tmp[i][k] * C[k][j];
	    	}
	    	D_output[i][j] = sum;
	      }
}

void kernel_2mm(
		int A[NI][NK],
		int B[NK][NJ],
		int C[NJ][NL],
		int D[NI][NL],
		int D_output[NI][NL])
{

	  int D_mid[NI][NL];
	  int C_mid[NJ][NL];
	  int tmp_mid[NI][NJ];
  func1(
  		A,
  		B,
		C,
  		D,
		tmp_mid,
		C_mid,
  		D_mid
  		);
  func2(
		  C_mid,
		  D_mid,
		  tmp_mid,
		  D_output

		  );

}

void readData(
		int A_AXI[NI][NK],
		int B_AXI[NK][NJ],
		int C_AXI[NJ][NL],
		int D_input_AXI[NI][NL],
		int A[NI][NK],
		int B[NK][NJ],
		int C[NJ][NL],
		int D[NI][NL]
		)
{
	int i,j,k;
	  for (i = 0; i < NI; i++)
	    {
			for (k = 0; k < NK; ++k)
			{
				A[i][k] = A_AXI[i][k];
			}
	    }

	  for (k = 0; k < NK; ++k)
	    for (j = 0; j < NJ; j++)

			{
				B[k][j] = B_AXI[k][j];
			}

	  for (j = 0; j < NJ; j++)
		  for (k = 0; k < NL; ++k)
			{
				C[j][k] = C_AXI[j][k];
			}

	  for (i = 0; i < NI; i++)
		  for (k = 0; k < NL; ++k)
			{
			  D[i][k] = D_input_AXI[i][k];
			}

}

void writeData(
		int D_output_AXI[NI][NL],
		int D_output[NI][NL])
{
	int i,j,k;
	  for (i = 0; i < NI; i++)
	    for (j = 0; j < NL; j++)
	      {
	    	D_output_AXI[i][j] = D_output[i][j];
	      }
}

void kernel_2mm_wrapper(
		int A_AXI[NI][NK],
		int B_AXI[NK][NJ],
		int C_AXI[NJ][NL],
		int D_input_AXI[NI][NL],
		int D_output_AXI[NI][NL])
{


	int A[NI][NK];
	int B[NK][NJ];
	int C[NJ][NL];
	int D_input[NI][NL];
	int D[NI][NL];
	int D_output[NI][NL];


	readData(A_AXI,
			B_AXI,
			C_AXI,
			D_input_AXI,
			A,
			B,
			C,
			D
			);

		kernel_2mm(
				A,
				B,
				C,
				D,
				D_output);


	writeData(
			D_output_AXI,
			D_output);

}
